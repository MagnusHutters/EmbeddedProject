// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module runner_conv2d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inputs_address0,
        inputs_ce0,
        inputs_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        grp_fu_49873_p_din0,
        grp_fu_49873_p_din1,
        grp_fu_49873_p_opcode,
        grp_fu_49873_p_dout0,
        grp_fu_49873_p_ce,
        grp_fu_49877_p_din0,
        grp_fu_49877_p_din1,
        grp_fu_49877_p_dout0,
        grp_fu_49877_p_ce,
        grp_fu_29505_p_din0,
        grp_fu_29505_p_din1,
        grp_fu_29505_p_opcode,
        grp_fu_29505_p_dout0,
        grp_fu_29505_p_ce
);

parameter    ap_ST_fsm_state1 = 95'd1;
parameter    ap_ST_fsm_state2 = 95'd2;
parameter    ap_ST_fsm_state3 = 95'd4;
parameter    ap_ST_fsm_state4 = 95'd8;
parameter    ap_ST_fsm_state5 = 95'd16;
parameter    ap_ST_fsm_state6 = 95'd32;
parameter    ap_ST_fsm_state7 = 95'd64;
parameter    ap_ST_fsm_state8 = 95'd128;
parameter    ap_ST_fsm_state9 = 95'd256;
parameter    ap_ST_fsm_state10 = 95'd512;
parameter    ap_ST_fsm_state11 = 95'd1024;
parameter    ap_ST_fsm_state12 = 95'd2048;
parameter    ap_ST_fsm_state13 = 95'd4096;
parameter    ap_ST_fsm_state14 = 95'd8192;
parameter    ap_ST_fsm_state15 = 95'd16384;
parameter    ap_ST_fsm_state16 = 95'd32768;
parameter    ap_ST_fsm_state17 = 95'd65536;
parameter    ap_ST_fsm_state18 = 95'd131072;
parameter    ap_ST_fsm_state19 = 95'd262144;
parameter    ap_ST_fsm_state20 = 95'd524288;
parameter    ap_ST_fsm_state21 = 95'd1048576;
parameter    ap_ST_fsm_state22 = 95'd2097152;
parameter    ap_ST_fsm_state23 = 95'd4194304;
parameter    ap_ST_fsm_state24 = 95'd8388608;
parameter    ap_ST_fsm_state25 = 95'd16777216;
parameter    ap_ST_fsm_state26 = 95'd33554432;
parameter    ap_ST_fsm_state27 = 95'd67108864;
parameter    ap_ST_fsm_state28 = 95'd134217728;
parameter    ap_ST_fsm_state29 = 95'd268435456;
parameter    ap_ST_fsm_state30 = 95'd536870912;
parameter    ap_ST_fsm_state31 = 95'd1073741824;
parameter    ap_ST_fsm_state32 = 95'd2147483648;
parameter    ap_ST_fsm_state33 = 95'd4294967296;
parameter    ap_ST_fsm_state34 = 95'd8589934592;
parameter    ap_ST_fsm_state35 = 95'd17179869184;
parameter    ap_ST_fsm_state36 = 95'd34359738368;
parameter    ap_ST_fsm_state37 = 95'd68719476736;
parameter    ap_ST_fsm_state38 = 95'd137438953472;
parameter    ap_ST_fsm_state39 = 95'd274877906944;
parameter    ap_ST_fsm_state40 = 95'd549755813888;
parameter    ap_ST_fsm_state41 = 95'd1099511627776;
parameter    ap_ST_fsm_state42 = 95'd2199023255552;
parameter    ap_ST_fsm_state43 = 95'd4398046511104;
parameter    ap_ST_fsm_state44 = 95'd8796093022208;
parameter    ap_ST_fsm_state45 = 95'd17592186044416;
parameter    ap_ST_fsm_state46 = 95'd35184372088832;
parameter    ap_ST_fsm_state47 = 95'd70368744177664;
parameter    ap_ST_fsm_state48 = 95'd140737488355328;
parameter    ap_ST_fsm_state49 = 95'd281474976710656;
parameter    ap_ST_fsm_state50 = 95'd562949953421312;
parameter    ap_ST_fsm_state51 = 95'd1125899906842624;
parameter    ap_ST_fsm_state52 = 95'd2251799813685248;
parameter    ap_ST_fsm_state53 = 95'd4503599627370496;
parameter    ap_ST_fsm_state54 = 95'd9007199254740992;
parameter    ap_ST_fsm_state55 = 95'd18014398509481984;
parameter    ap_ST_fsm_state56 = 95'd36028797018963968;
parameter    ap_ST_fsm_state57 = 95'd72057594037927936;
parameter    ap_ST_fsm_state58 = 95'd144115188075855872;
parameter    ap_ST_fsm_state59 = 95'd288230376151711744;
parameter    ap_ST_fsm_state60 = 95'd576460752303423488;
parameter    ap_ST_fsm_state61 = 95'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 95'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 95'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 95'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 95'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 95'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 95'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 95'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 95'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 95'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 95'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 95'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 95'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 95'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 95'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 95'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 95'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 95'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 95'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 95'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 95'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 95'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 95'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 95'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 95'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 95'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 95'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 95'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 95'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 95'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 95'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 95'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 95'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 95'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 95'd19807040628566084398385987584;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] inputs_address0;
output   inputs_ce0;
input  [31:0] inputs_q0;
output  [9:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;
output  [31:0] grp_fu_49873_p_din0;
output  [31:0] grp_fu_49873_p_din1;
output  [1:0] grp_fu_49873_p_opcode;
input  [31:0] grp_fu_49873_p_dout0;
output   grp_fu_49873_p_ce;
output  [31:0] grp_fu_49877_p_din0;
output  [31:0] grp_fu_49877_p_din1;
input  [31:0] grp_fu_49877_p_dout0;
output   grp_fu_49877_p_ce;
output  [31:0] grp_fu_29505_p_din0;
output  [31:0] grp_fu_29505_p_din1;
output  [4:0] grp_fu_29505_p_opcode;
input  [0:0] grp_fu_29505_p_dout0;
output   grp_fu_29505_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] inputs_address0;
reg inputs_ce0;
reg[9:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [94:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [11:0] layer4_weights_address0;
reg    layer4_weights_ce0;
wire   [31:0] layer4_weights_q0;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state84;
wire   [31:0] grp_fu_563_p2;
reg   [31:0] reg_585;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state87;
wire   [3:0] empty_fu_590_p2;
reg   [3:0] empty_reg_1690;
wire    ap_CS_fsm_state2;
wire   [9:0] empty_103_fu_626_p2;
reg   [9:0] empty_103_reg_1698;
wire   [0:0] icmp_ln66_fu_596_p2;
wire   [9:0] p_cast33_fu_642_p1;
reg   [9:0] p_cast33_reg_1703;
wire   [9:0] empty_104_fu_666_p2;
reg   [9:0] empty_104_reg_1710;
wire   [9:0] empty_106_fu_698_p2;
reg   [9:0] empty_106_reg_1717;
wire   [2:0] empty_107_fu_704_p2;
reg   [2:0] empty_107_reg_1724;
wire    ap_CS_fsm_state3;
wire  signed [9:0] p_cast53_fu_750_p1;
reg  signed [9:0] p_cast53_reg_1732;
wire   [0:0] icmp_ln67_fu_710_p2;
wire  signed [9:0] p_cast35_fu_784_p1;
reg  signed [9:0] p_cast35_reg_1737;
wire   [9:0] p_cast29_cast_fu_818_p1;
reg   [9:0] p_cast29_cast_reg_1744;
wire   [9:0] zext_ln68_fu_854_p1;
reg   [9:0] zext_ln68_reg_1751;
wire   [4:0] add_ln68_fu_858_p2;
reg   [4:0] add_ln68_reg_1758;
wire    ap_CS_fsm_state4;
wire   [11:0] zext_ln68_8_fu_864_p1;
reg   [11:0] zext_ln68_8_reg_1763;
wire   [10:0] zext_ln68_9_fu_868_p1;
reg   [10:0] zext_ln68_9_reg_1770;
wire   [9:0] zext_ln68_10_fu_872_p1;
reg   [9:0] zext_ln68_10_reg_1777;
wire   [3:0] add_ln73_fu_882_p2;
reg   [3:0] add_ln73_reg_1787;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln73_fu_892_p2;
wire   [0:0] icmp_ln90_fu_953_p2;
reg   [0:0] icmp_ln90_reg_1805;
wire   [31:0] grp_fu_959_p3;
wire    ap_CS_fsm_state12;
wire   [3:0] add_ln73_9_fu_966_p2;
reg   [3:0] add_ln73_9_reg_1815;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln73_9_fu_976_p2;
wire   [31:0] grp_fu_551_p2;
wire    ap_CS_fsm_state22;
wire   [3:0] add_ln73_10_fu_1043_p2;
reg   [3:0] add_ln73_10_reg_1838;
wire    ap_CS_fsm_state23;
wire   [0:0] icmp_ln73_10_fu_1053_p2;
wire    ap_CS_fsm_state32;
wire   [3:0] add_ln73_11_fu_1120_p2;
reg   [3:0] add_ln73_11_reg_1861;
wire    ap_CS_fsm_state33;
wire   [0:0] icmp_ln73_11_fu_1130_p2;
wire    ap_CS_fsm_state42;
wire   [3:0] add_ln73_12_fu_1201_p2;
reg   [3:0] add_ln73_12_reg_1884;
wire    ap_CS_fsm_state43;
wire   [0:0] icmp_ln73_12_fu_1211_p2;
wire    ap_CS_fsm_state52;
wire   [3:0] add_ln73_13_fu_1282_p2;
reg   [3:0] add_ln73_13_reg_1907;
wire    ap_CS_fsm_state53;
wire   [0:0] icmp_ln73_13_fu_1292_p2;
wire    ap_CS_fsm_state62;
wire   [3:0] add_ln73_14_fu_1363_p2;
reg   [3:0] add_ln73_14_reg_1930;
wire    ap_CS_fsm_state63;
wire   [0:0] icmp_ln73_14_fu_1373_p2;
wire    ap_CS_fsm_state72;
wire   [3:0] add_ln73_15_fu_1444_p2;
reg   [3:0] add_ln73_15_reg_1953;
wire    ap_CS_fsm_state73;
wire   [0:0] icmp_ln73_15_fu_1454_p2;
wire    ap_CS_fsm_state82;
wire   [3:0] add_ln73_16_fu_1525_p2;
reg   [3:0] add_ln73_16_reg_1976;
wire    ap_CS_fsm_state83;
wire   [0:0] icmp_ln73_16_fu_1535_p2;
wire    ap_CS_fsm_state92;
wire   [9:0] add_ln110_fu_1633_p2;
reg   [9:0] add_ln110_reg_1999;
wire    ap_CS_fsm_state93;
reg   [9:0] output_addr_reg_2007;
wire   [0:0] icmp_ln110_fu_1644_p2;
wire    ap_CS_fsm_state94;
wire   [0:0] icmp_ln111_fu_1668_p2;
reg   [0:0] icmp_ln111_reg_2017;
wire   [0:0] icmp_ln111_3_fu_1674_p2;
reg   [0:0] icmp_ln111_3_reg_2022;
reg   [3:0] x_reg_306;
reg   [2:0] y_reg_317;
wire   [0:0] icmp_ln68_fu_876_p2;
reg   [4:0] z_reg_328;
reg   [3:0] k_0_0_reg_340;
reg   [31:0] sum_2_0_0_reg_351;
reg   [3:0] k_0_1_reg_363;
reg   [31:0] sum_2_0_1_reg_374;
reg   [3:0] k_0_2_reg_385;
reg   [31:0] sum_2_0_2_reg_396;
reg   [3:0] k_1_0_reg_407;
reg   [31:0] sum_2_1_0_reg_418;
reg   [3:0] k_1_1_reg_429;
reg   [31:0] sum_2_1_1_reg_440;
reg   [3:0] k_1_2_reg_451;
reg   [31:0] sum_2_1_2_reg_462;
reg   [3:0] k_2_0_reg_473;
reg   [31:0] sum_2_2_0_reg_484;
reg   [3:0] k_2_1_reg_495;
reg   [31:0] sum_2_2_1_reg_506;
reg   [3:0] k_2_2_reg_517;
reg   [31:0] sum_2_2_2_reg_528;
reg   [9:0] i_reg_540;
wire    ap_CS_fsm_state95;
wire  signed [63:0] sext_ln78_fu_933_p1;
wire   [63:0] zext_ln84_fu_948_p1;
wire   [63:0] zext_ln78_fu_1023_p1;
wire   [63:0] zext_ln84_20_fu_1038_p1;
wire   [63:0] zext_ln78_16_fu_1100_p1;
wire   [63:0] zext_ln84_21_fu_1115_p1;
wire   [63:0] zext_ln78_17_fu_1181_p1;
wire   [63:0] zext_ln84_22_fu_1196_p1;
wire   [63:0] zext_ln78_18_fu_1262_p1;
wire   [63:0] zext_ln84_23_fu_1277_p1;
wire   [63:0] zext_ln78_19_fu_1343_p1;
wire   [63:0] zext_ln84_24_fu_1358_p1;
wire   [63:0] zext_ln78_20_fu_1424_p1;
wire   [63:0] zext_ln84_25_fu_1439_p1;
wire   [63:0] zext_ln78_21_fu_1505_p1;
wire   [63:0] zext_ln84_26_fu_1520_p1;
wire   [63:0] zext_ln78_22_fu_1586_p1;
wire   [63:0] zext_ln84_27_fu_1601_p1;
wire   [63:0] zext_ln104_fu_1628_p1;
wire   [63:0] zext_ln110_fu_1639_p1;
wire   [0:0] and_ln111_fu_1684_p2;
reg   [31:0] grp_fu_551_p0;
wire   [31:0] grp_fu_551_p1;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state88;
wire   [31:0] grp_fu_563_p0;
wire   [31:0] grp_fu_563_p1;
wire   [31:0] grp_fu_569_p0;
wire   [31:0] grp_fu_569_p1;
wire   [2:0] empty_102_fu_602_p1;
wire   [7:0] p_shl1_fu_614_p3;
wire   [9:0] p_shl_fu_606_p3;
wire   [9:0] p_shl1_cast_fu_622_p1;
wire   [8:0] tmp_s_fu_632_p4;
wire   [6:0] p_shl7_fu_654_p3;
wire   [9:0] p_shl6_fu_646_p3;
wire   [9:0] p_shl19_cast_fu_662_p1;
wire   [3:0] empty_105_fu_672_p2;
wire   [6:0] p_shl9_fu_686_p3;
wire   [9:0] p_shl8_fu_678_p3;
wire   [9:0] p_shl27_cast_fu_694_p1;
wire   [1:0] empty_109_fu_716_p1;
wire   [6:0] p_shl2_fu_720_p3;
wire   [4:0] p_shl3_fu_732_p3;
wire   [7:0] p_shl2_cast_fu_728_p1;
wire   [7:0] p_shl3_cast_fu_740_p1;
wire   [7:0] empty_110_fu_744_p2;
wire   [5:0] p_shl4_fu_754_p3;
wire   [3:0] p_shl5_fu_766_p3;
wire   [6:0] p_shl4_cast_fu_762_p1;
wire   [6:0] p_shl5_cast_fu_774_p1;
wire   [6:0] empty_111_fu_778_p2;
wire   [1:0] empty_112_fu_788_p1;
wire   [4:0] p_shl11_fu_800_p3;
wire   [5:0] p_shl10_fu_792_p3;
wire   [5:0] p_shl11_cast56_fu_808_p1;
wire   [5:0] p_cast29_fu_812_p2;
wire   [2:0] empty_113_fu_822_p2;
wire   [4:0] p_shl13_fu_836_p3;
wire   [6:0] p_shl12_fu_828_p3;
wire   [6:0] p_shl15_cast_fu_844_p1;
wire   [6:0] empty_114_fu_848_p2;
wire   [8:0] shl_ln_fu_898_p3;
wire   [6:0] shl_ln76_s_fu_910_p3;
wire   [9:0] zext_ln76_fu_906_p1;
wire   [9:0] zext_ln76_18_fu_918_p1;
wire   [9:0] sub_ln76_fu_922_p2;
wire   [9:0] add_ln78_fu_928_p2;
wire   [9:0] zext_ln73_fu_888_p1;
wire   [9:0] add_ln84_26_fu_938_p2;
wire   [9:0] add_ln84_fu_943_p2;
wire    ap_CS_fsm_state10;
wire   [8:0] shl_ln76_17_fu_982_p3;
wire   [6:0] shl_ln76_18_fu_994_p3;
wire   [9:0] zext_ln76_19_fu_990_p1;
wire   [9:0] zext_ln76_20_fu_1002_p1;
wire   [9:0] sub_ln76_9_fu_1006_p2;
wire   [9:0] add_ln78_25_fu_1012_p2;
wire   [9:0] add_ln78_17_fu_1018_p2;
wire   [9:0] zext_ln73_9_fu_972_p1;
wire   [9:0] add_ln84_27_fu_1028_p2;
wire   [9:0] add_ln84_17_fu_1033_p2;
wire   [8:0] shl_ln76_19_fu_1059_p3;
wire   [6:0] shl_ln76_20_fu_1071_p3;
wire   [9:0] zext_ln76_21_fu_1067_p1;
wire   [9:0] zext_ln76_22_fu_1079_p1;
wire   [9:0] sub_ln76_10_fu_1083_p2;
wire   [9:0] add_ln78_26_fu_1089_p2;
wire   [9:0] add_ln78_18_fu_1095_p2;
wire   [9:0] zext_ln73_10_fu_1049_p1;
wire   [9:0] add_ln84_28_fu_1105_p2;
wire   [9:0] add_ln84_18_fu_1110_p2;
wire   [8:0] shl_ln76_21_fu_1136_p3;
wire   [6:0] shl_ln76_22_fu_1148_p3;
wire   [9:0] zext_ln76_23_fu_1144_p1;
wire   [9:0] zext_ln76_24_fu_1156_p1;
wire   [9:0] sub_ln76_11_fu_1160_p2;
wire  signed [10:0] sext_ln78_8_fu_1166_p1;
wire   [10:0] add_ln78_27_fu_1170_p2;
wire   [10:0] add_ln78_19_fu_1176_p2;
wire   [9:0] zext_ln73_11_fu_1126_p1;
wire   [9:0] add_ln84_29_fu_1186_p2;
wire   [9:0] add_ln84_19_fu_1191_p2;
wire   [8:0] shl_ln76_23_fu_1217_p3;
wire   [6:0] shl_ln76_24_fu_1229_p3;
wire   [9:0] zext_ln76_25_fu_1225_p1;
wire   [9:0] zext_ln76_26_fu_1237_p1;
wire   [9:0] sub_ln76_12_fu_1241_p2;
wire  signed [10:0] sext_ln78_9_fu_1247_p1;
wire   [10:0] add_ln78_28_fu_1251_p2;
wire   [10:0] add_ln78_20_fu_1257_p2;
wire   [9:0] zext_ln73_12_fu_1207_p1;
wire   [9:0] add_ln84_30_fu_1267_p2;
wire   [9:0] add_ln84_20_fu_1272_p2;
wire   [8:0] shl_ln76_25_fu_1298_p3;
wire   [6:0] shl_ln76_26_fu_1310_p3;
wire   [9:0] zext_ln76_27_fu_1306_p1;
wire   [9:0] zext_ln76_28_fu_1318_p1;
wire   [9:0] sub_ln76_13_fu_1322_p2;
wire  signed [10:0] sext_ln78_10_fu_1328_p1;
wire   [10:0] add_ln78_29_fu_1332_p2;
wire   [10:0] add_ln78_21_fu_1338_p2;
wire   [9:0] zext_ln73_13_fu_1288_p1;
wire   [9:0] add_ln84_31_fu_1348_p2;
wire   [9:0] add_ln84_21_fu_1353_p2;
wire   [8:0] shl_ln76_27_fu_1379_p3;
wire   [6:0] shl_ln76_28_fu_1391_p3;
wire   [9:0] zext_ln76_29_fu_1387_p1;
wire   [9:0] zext_ln76_30_fu_1399_p1;
wire   [9:0] sub_ln76_14_fu_1403_p2;
wire  signed [11:0] sext_ln78_11_fu_1409_p1;
wire   [11:0] add_ln78_30_fu_1413_p2;
wire   [11:0] add_ln78_22_fu_1419_p2;
wire   [9:0] zext_ln73_14_fu_1369_p1;
wire   [9:0] add_ln84_32_fu_1429_p2;
wire   [9:0] add_ln84_22_fu_1434_p2;
wire   [8:0] shl_ln76_29_fu_1460_p3;
wire   [6:0] shl_ln76_30_fu_1472_p3;
wire   [9:0] zext_ln76_31_fu_1468_p1;
wire   [9:0] zext_ln76_32_fu_1480_p1;
wire   [9:0] sub_ln76_15_fu_1484_p2;
wire  signed [11:0] sext_ln78_12_fu_1490_p1;
wire   [11:0] add_ln78_31_fu_1494_p2;
wire   [11:0] add_ln78_23_fu_1500_p2;
wire   [9:0] zext_ln73_15_fu_1450_p1;
wire   [9:0] add_ln84_33_fu_1510_p2;
wire   [9:0] add_ln84_23_fu_1515_p2;
wire   [8:0] shl_ln76_31_fu_1541_p3;
wire   [6:0] shl_ln76_32_fu_1553_p3;
wire   [9:0] zext_ln76_33_fu_1549_p1;
wire   [9:0] zext_ln76_34_fu_1561_p1;
wire   [9:0] sub_ln76_16_fu_1565_p2;
wire  signed [11:0] sext_ln78_13_fu_1571_p1;
wire   [11:0] add_ln78_32_fu_1575_p2;
wire   [11:0] add_ln78_24_fu_1581_p2;
wire   [9:0] zext_ln73_16_fu_1531_p1;
wire   [9:0] add_ln84_34_fu_1591_p2;
wire   [9:0] add_ln84_24_fu_1596_p2;
wire   [4:0] tmp_fu_1606_p4;
wire   [9:0] tmp17_fu_1615_p3;
wire   [9:0] add_ln104_fu_1623_p2;
wire   [31:0] bitcast_ln111_fu_1650_p1;
wire   [7:0] tmp_34_fu_1654_p4;
wire   [22:0] trunc_ln111_fu_1664_p1;
wire   [0:0] or_ln111_fu_1680_p2;
wire   [0:0] grp_fu_569_p2;
wire    grp_fu_551_ce;
wire    grp_fu_563_ce;
wire    grp_fu_569_ce;
wire   [4:0] grp_fu_569_opcode;
reg    grp_fu_959_in_valid;
reg   [94:0] ap_NS_fsm;
wire   [31:0] grp_fu_959_p0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 95'd1;
end

runner_conv2d_layer4_weights #(
    .DataWidth( 32 ),
    .AddressRange( 2592 ),
    .AddressWidth( 12 ))
layer4_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer4_weights_address0),
    .ce0(layer4_weights_ce0),
    .q0(layer4_weights_q0)
);

runner_facc_32ns_32ns_1ns_32_3_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_3_no_dsp_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .ce(1'b1),
    .in_data(reg_585),
    .in_last(icmp_ln90_reg_1805),
    .in_valid(grp_fu_959_in_valid),
    .out_data(grp_fu_959_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_596_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_540 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        i_reg_540 <= add_ln110_reg_1999;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_876_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k_0_0_reg_340 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        k_0_0_reg_340 <= add_ln73_reg_1787;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_892_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        k_0_1_reg_363 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        k_0_1_reg_363 <= add_ln73_9_reg_1815;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_9_fu_976_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        k_0_2_reg_385 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        k_0_2_reg_385 <= add_ln73_10_reg_1838;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_10_fu_1053_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        k_1_0_reg_407 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        k_1_0_reg_407 <= add_ln73_11_reg_1861;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_11_fu_1130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        k_1_1_reg_429 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        k_1_1_reg_429 <= add_ln73_12_reg_1884;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_12_fu_1211_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        k_1_2_reg_451 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        k_1_2_reg_451 <= add_ln73_13_reg_1907;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_13_fu_1292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
        k_2_0_reg_473 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        k_2_0_reg_473 <= add_ln73_14_reg_1930;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_14_fu_1373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state63))) begin
        k_2_1_reg_495 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        k_2_1_reg_495 <= add_ln73_15_reg_1953;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_15_fu_1454_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state73))) begin
        k_2_2_reg_517 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        k_2_2_reg_517 <= add_ln73_16_reg_1976;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_876_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sum_2_0_0_reg_351 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        sum_2_0_0_reg_351 <= grp_fu_959_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_892_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        sum_2_0_1_reg_374 <= sum_2_0_0_reg_351;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        sum_2_0_1_reg_374 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_9_fu_976_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        sum_2_0_2_reg_396 <= sum_2_0_1_reg_374;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        sum_2_0_2_reg_396 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_10_fu_1053_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        sum_2_1_0_reg_418 <= sum_2_0_2_reg_396;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        sum_2_1_0_reg_418 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_11_fu_1130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        sum_2_1_1_reg_440 <= sum_2_1_0_reg_418;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        sum_2_1_1_reg_440 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_12_fu_1211_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        sum_2_1_2_reg_462 <= sum_2_1_1_reg_440;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        sum_2_1_2_reg_462 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_13_fu_1292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
        sum_2_2_0_reg_484 <= sum_2_1_2_reg_462;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        sum_2_2_0_reg_484 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_14_fu_1373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state63))) begin
        sum_2_2_1_reg_506 <= sum_2_2_0_reg_484;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        sum_2_2_1_reg_506 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_15_fu_1454_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state73))) begin
        sum_2_2_2_reg_528 <= sum_2_2_1_reg_506;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        sum_2_2_2_reg_528 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_reg_306 <= 4'd0;
    end else if (((icmp_ln67_fu_710_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        x_reg_306 <= empty_reg_1690;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_596_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        y_reg_317 <= 3'd0;
    end else if (((icmp_ln68_fu_876_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        y_reg_317 <= empty_107_reg_1724;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_710_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        z_reg_328 <= 5'd0;
    end else if (((icmp_ln73_16_fu_1535_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state83))) begin
        z_reg_328 <= add_ln68_reg_1758;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        add_ln110_reg_1999 <= add_ln110_fu_1633_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln68_reg_1758 <= add_ln68_fu_858_p2;
        zext_ln68_10_reg_1777[4 : 0] <= zext_ln68_10_fu_872_p1[4 : 0];
        zext_ln68_8_reg_1763[4 : 0] <= zext_ln68_8_fu_864_p1[4 : 0];
        zext_ln68_9_reg_1770[4 : 0] <= zext_ln68_9_fu_868_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        add_ln73_10_reg_1838 <= add_ln73_10_fu_1043_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        add_ln73_11_reg_1861 <= add_ln73_11_fu_1120_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        add_ln73_12_reg_1884 <= add_ln73_12_fu_1201_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        add_ln73_13_reg_1907 <= add_ln73_13_fu_1282_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        add_ln73_14_reg_1930 <= add_ln73_14_fu_1363_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        add_ln73_15_reg_1953 <= add_ln73_15_fu_1444_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        add_ln73_16_reg_1976 <= add_ln73_16_fu_1525_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        add_ln73_9_reg_1815 <= add_ln73_9_fu_966_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln73_reg_1787 <= add_ln73_fu_882_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_596_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_103_reg_1698[9 : 5] <= empty_103_fu_626_p2[9 : 5];
        empty_104_reg_1710[9 : 3] <= empty_104_fu_666_p2[9 : 3];
        empty_106_reg_1717[9 : 3] <= empty_106_fu_698_p2[9 : 3];
        p_cast33_reg_1703[8 : 3] <= p_cast33_fu_642_p1[8 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_107_reg_1724 <= empty_107_fu_704_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_reg_1690 <= empty_fu_590_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        icmp_ln111_3_reg_2022 <= icmp_ln111_3_fu_1674_p2;
        icmp_ln111_reg_2017 <= icmp_ln111_fu_1668_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_892_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        icmp_ln90_reg_1805 <= icmp_ln90_fu_953_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln110_fu_1644_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state93))) begin
        output_addr_reg_2007 <= zext_ln110_fu_1639_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_710_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_cast29_cast_reg_1744[5 : 2] <= p_cast29_cast_fu_818_p1[5 : 2];
        p_cast35_reg_1737[9 : 2] <= p_cast35_fu_784_p1[9 : 2];
        p_cast53_reg_1732[9 : 3] <= p_cast53_fu_750_p1[9 : 3];
        zext_ln68_reg_1751[6 : 2] <= zext_ln68_fu_854_p1[6 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_585 <= grp_fu_49877_p_dout0;
    end
end

always @ (*) begin
    if ((((icmp_ln110_fu_1644_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state93)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln110_fu_1644_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state93))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        grp_fu_551_p0 = sum_2_2_2_reg_528;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_551_p0 = sum_2_2_1_reg_506;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        grp_fu_551_p0 = sum_2_2_0_reg_484;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_551_p0 = sum_2_1_2_reg_462;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_551_p0 = sum_2_1_1_reg_440;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_551_p0 = sum_2_1_0_reg_418;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_551_p0 = sum_2_0_2_reg_396;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_551_p0 = sum_2_0_1_reg_374;
    end else begin
        grp_fu_551_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_959_in_valid = 1'b1;
    end else begin
        grp_fu_959_in_valid = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        inputs_address0 = zext_ln84_27_fu_1601_p1;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        inputs_address0 = zext_ln84_26_fu_1520_p1;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        inputs_address0 = zext_ln84_25_fu_1439_p1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        inputs_address0 = zext_ln84_24_fu_1358_p1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        inputs_address0 = zext_ln84_23_fu_1277_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        inputs_address0 = zext_ln84_22_fu_1196_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        inputs_address0 = zext_ln84_21_fu_1115_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        inputs_address0 = zext_ln84_20_fu_1038_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        inputs_address0 = zext_ln84_fu_948_p1;
    end else begin
        inputs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state5))) begin
        inputs_ce0 = 1'b1;
    end else begin
        inputs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        layer4_weights_address0 = zext_ln78_22_fu_1586_p1;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        layer4_weights_address0 = zext_ln78_21_fu_1505_p1;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        layer4_weights_address0 = zext_ln78_20_fu_1424_p1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        layer4_weights_address0 = zext_ln78_19_fu_1343_p1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        layer4_weights_address0 = zext_ln78_18_fu_1262_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        layer4_weights_address0 = zext_ln78_17_fu_1181_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        layer4_weights_address0 = zext_ln78_16_fu_1100_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        layer4_weights_address0 = zext_ln78_fu_1023_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        layer4_weights_address0 = sext_ln78_fu_933_p1;
    end else begin
        layer4_weights_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state5))) begin
        layer4_weights_ce0 = 1'b1;
    end else begin
        layer4_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        output_r_address0 = output_addr_reg_2007;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        output_r_address0 = zext_ln110_fu_1639_p1;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        output_r_address0 = zext_ln104_fu_1628_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state83))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        output_r_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        output_r_d0 = sum_2_2_2_reg_528;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln111_fu_1684_p2) & (1'b1 == ap_CS_fsm_state95)) | ((icmp_ln73_16_fu_1535_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state83)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln66_fu_596_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state93;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln67_fu_710_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln68_fu_876_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln73_fu_892_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln73_9_fu_976_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state23 : begin
            if (((icmp_ln73_10_fu_1053_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state33 : begin
            if (((icmp_ln73_11_fu_1130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state43 : begin
            if (((icmp_ln73_12_fu_1211_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state53 : begin
            if (((icmp_ln73_13_fu_1292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state63 : begin
            if (((icmp_ln73_14_fu_1373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state73 : begin
            if (((icmp_ln73_15_fu_1454_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state83 : begin
            if (((icmp_ln73_16_fu_1535_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state83))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state93 : begin
            if (((icmp_ln110_fu_1644_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state93))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln104_fu_1623_p2 = ($signed(tmp17_fu_1615_p3) + $signed(p_cast53_reg_1732));

assign add_ln110_fu_1633_p2 = (i_reg_540 + 10'd1);

assign add_ln68_fu_858_p2 = (z_reg_328 + 5'd1);

assign add_ln73_10_fu_1043_p2 = (k_0_2_reg_385 + 4'd1);

assign add_ln73_11_fu_1120_p2 = (k_1_0_reg_407 + 4'd1);

assign add_ln73_12_fu_1201_p2 = (k_1_1_reg_429 + 4'd1);

assign add_ln73_13_fu_1282_p2 = (k_1_2_reg_451 + 4'd1);

assign add_ln73_14_fu_1363_p2 = (k_2_0_reg_473 + 4'd1);

assign add_ln73_15_fu_1444_p2 = (k_2_1_reg_495 + 4'd1);

assign add_ln73_16_fu_1525_p2 = (k_2_2_reg_517 + 4'd1);

assign add_ln73_9_fu_966_p2 = (k_0_1_reg_363 + 4'd1);

assign add_ln73_fu_882_p2 = (k_0_0_reg_340 + 4'd1);

assign add_ln78_17_fu_1018_p2 = (add_ln78_25_fu_1012_p2 + zext_ln68_10_reg_1777);

assign add_ln78_18_fu_1095_p2 = (add_ln78_26_fu_1089_p2 + zext_ln68_10_reg_1777);

assign add_ln78_19_fu_1176_p2 = (add_ln78_27_fu_1170_p2 + zext_ln68_9_reg_1770);

assign add_ln78_20_fu_1257_p2 = (add_ln78_28_fu_1251_p2 + zext_ln68_9_reg_1770);

assign add_ln78_21_fu_1338_p2 = (add_ln78_29_fu_1332_p2 + zext_ln68_9_reg_1770);

assign add_ln78_22_fu_1419_p2 = (add_ln78_30_fu_1413_p2 + zext_ln68_8_reg_1763);

assign add_ln78_23_fu_1500_p2 = (add_ln78_31_fu_1494_p2 + zext_ln68_8_reg_1763);

assign add_ln78_24_fu_1581_p2 = (add_ln78_32_fu_1575_p2 + zext_ln68_8_reg_1763);

assign add_ln78_25_fu_1012_p2 = (sub_ln76_9_fu_1006_p2 + 10'd288);

assign add_ln78_26_fu_1089_p2 = ($signed(sub_ln76_10_fu_1083_p2) + $signed(10'd576));

assign add_ln78_27_fu_1170_p2 = ($signed(sext_ln78_8_fu_1166_p1) + $signed(11'd864));

assign add_ln78_28_fu_1251_p2 = ($signed(sext_ln78_9_fu_1247_p1) + $signed(11'd1152));

assign add_ln78_29_fu_1332_p2 = ($signed(sext_ln78_10_fu_1328_p1) + $signed(11'd1440));

assign add_ln78_30_fu_1413_p2 = ($signed(sext_ln78_11_fu_1409_p1) + $signed(12'd1728));

assign add_ln78_31_fu_1494_p2 = ($signed(sext_ln78_12_fu_1490_p1) + $signed(12'd2016));

assign add_ln78_32_fu_1575_p2 = ($signed(sext_ln78_13_fu_1571_p1) + $signed(12'd2304));

assign add_ln78_fu_928_p2 = (zext_ln68_10_reg_1777 + sub_ln76_fu_922_p2);

assign add_ln84_17_fu_1033_p2 = (add_ln84_27_fu_1028_p2 + p_cast29_cast_reg_1744);

assign add_ln84_18_fu_1110_p2 = (add_ln84_28_fu_1105_p2 + zext_ln68_reg_1751);

assign add_ln84_19_fu_1191_p2 = ($signed(add_ln84_29_fu_1186_p2) + $signed(p_cast35_reg_1737));

assign add_ln84_20_fu_1272_p2 = (add_ln84_30_fu_1267_p2 + p_cast29_cast_reg_1744);

assign add_ln84_21_fu_1353_p2 = (add_ln84_31_fu_1348_p2 + zext_ln68_reg_1751);

assign add_ln84_22_fu_1434_p2 = ($signed(add_ln84_32_fu_1429_p2) + $signed(p_cast35_reg_1737));

assign add_ln84_23_fu_1515_p2 = (add_ln84_33_fu_1510_p2 + p_cast29_cast_reg_1744);

assign add_ln84_24_fu_1596_p2 = (add_ln84_34_fu_1591_p2 + zext_ln68_reg_1751);

assign add_ln84_26_fu_938_p2 = (p_cast33_reg_1703 + zext_ln73_fu_888_p1);

assign add_ln84_27_fu_1028_p2 = (p_cast33_reg_1703 + zext_ln73_9_fu_972_p1);

assign add_ln84_28_fu_1105_p2 = (p_cast33_reg_1703 + zext_ln73_10_fu_1049_p1);

assign add_ln84_29_fu_1186_p2 = (empty_104_reg_1710 + zext_ln73_11_fu_1126_p1);

assign add_ln84_30_fu_1267_p2 = (empty_104_reg_1710 + zext_ln73_12_fu_1207_p1);

assign add_ln84_31_fu_1348_p2 = (empty_104_reg_1710 + zext_ln73_13_fu_1288_p1);

assign add_ln84_32_fu_1429_p2 = (empty_106_reg_1717 + zext_ln73_14_fu_1369_p1);

assign add_ln84_33_fu_1510_p2 = (empty_106_reg_1717 + zext_ln73_15_fu_1450_p1);

assign add_ln84_34_fu_1591_p2 = (empty_106_reg_1717 + zext_ln73_16_fu_1531_p1);

assign add_ln84_fu_943_p2 = ($signed(add_ln84_26_fu_938_p2) + $signed(p_cast35_reg_1737));

assign and_ln111_fu_1684_p2 = (or_ln111_fu_1680_p2 & grp_fu_29505_p_dout0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign bitcast_ln111_fu_1650_p1 = output_r_q0;

assign empty_102_fu_602_p1 = x_reg_306[2:0];

assign empty_103_fu_626_p2 = (p_shl_fu_606_p3 - p_shl1_cast_fu_622_p1);

assign empty_104_fu_666_p2 = (p_shl6_fu_646_p3 + p_shl19_cast_fu_662_p1);

assign empty_105_fu_672_p2 = (x_reg_306 + 4'd2);

assign empty_106_fu_698_p2 = (p_shl8_fu_678_p3 + p_shl27_cast_fu_694_p1);

assign empty_107_fu_704_p2 = (y_reg_317 + 3'd1);

assign empty_109_fu_716_p1 = y_reg_317[1:0];

assign empty_110_fu_744_p2 = (p_shl2_cast_fu_728_p1 - p_shl3_cast_fu_740_p1);

assign empty_111_fu_778_p2 = (p_shl4_cast_fu_762_p1 - p_shl5_cast_fu_774_p1);

assign empty_112_fu_788_p1 = empty_107_fu_704_p2[1:0];

assign empty_113_fu_822_p2 = (y_reg_317 + 3'd2);

assign empty_114_fu_848_p2 = (p_shl12_fu_828_p3 - p_shl15_cast_fu_844_p1);

assign empty_fu_590_p2 = (x_reg_306 + 4'd1);

assign grp_fu_29505_p_ce = 1'b1;

assign grp_fu_29505_p_din0 = output_r_q0;

assign grp_fu_29505_p_din1 = 32'd0;

assign grp_fu_29505_p_opcode = 5'd4;

assign grp_fu_49873_p_ce = 1'b1;

assign grp_fu_49873_p_din0 = grp_fu_551_p0;

assign grp_fu_49873_p_din1 = reg_585;

assign grp_fu_49873_p_opcode = 2'd0;

assign grp_fu_49877_p_ce = 1'b1;

assign grp_fu_49877_p_din0 = layer4_weights_q0;

assign grp_fu_49877_p_din1 = inputs_q0;

assign grp_fu_551_ce = 1'b1;

assign grp_fu_551_p1 = reg_585;

assign grp_fu_551_p2 = grp_fu_49873_p_dout0;

assign grp_fu_563_ce = 1'b1;

assign grp_fu_563_p0 = layer4_weights_q0;

assign grp_fu_563_p1 = inputs_q0;

assign grp_fu_563_p2 = grp_fu_49877_p_dout0;

assign grp_fu_569_ce = 1'b1;

assign grp_fu_569_opcode = 5'd4;

assign grp_fu_569_p0 = output_r_q0;

assign grp_fu_569_p1 = 32'd0;

assign grp_fu_569_p2 = grp_fu_29505_p_dout0;

assign icmp_ln110_fu_1644_p2 = ((i_reg_540 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln111_3_fu_1674_p2 = ((trunc_ln111_fu_1664_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln111_fu_1668_p2 = ((tmp_34_fu_1654_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_596_p2 = ((x_reg_306 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_710_p2 = ((y_reg_317 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_876_p2 = ((z_reg_328 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln73_10_fu_1053_p2 = ((k_0_2_reg_385 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln73_11_fu_1130_p2 = ((k_1_0_reg_407 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln73_12_fu_1211_p2 = ((k_1_1_reg_429 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln73_13_fu_1292_p2 = ((k_1_2_reg_451 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln73_14_fu_1373_p2 = ((k_2_0_reg_473 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln73_15_fu_1454_p2 = ((k_2_1_reg_495 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln73_16_fu_1535_p2 = ((k_2_2_reg_517 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln73_9_fu_976_p2 = ((k_0_1_reg_363 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_892_p2 = ((k_0_0_reg_340 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_953_p2 = ((add_ln73_fu_882_p2 == 4'd12) ? 1'b1 : 1'b0);

assign or_ln111_fu_1680_p2 = (icmp_ln111_reg_2017 | icmp_ln111_3_reg_2022);

assign p_cast29_cast_fu_818_p1 = p_cast29_fu_812_p2;

assign p_cast29_fu_812_p2 = (p_shl10_fu_792_p3 - p_shl11_cast56_fu_808_p1);

assign p_cast33_fu_642_p1 = tmp_s_fu_632_p4;

assign p_cast35_fu_784_p1 = $signed(empty_111_fu_778_p2);

assign p_cast53_fu_750_p1 = $signed(empty_110_fu_744_p2);

assign p_shl10_fu_792_p3 = {{empty_112_fu_788_p1}, {4'd0}};

assign p_shl11_cast56_fu_808_p1 = p_shl11_fu_800_p3;

assign p_shl11_fu_800_p3 = {{empty_107_fu_704_p2}, {2'd0}};

assign p_shl12_fu_828_p3 = {{empty_113_fu_822_p2}, {4'd0}};

assign p_shl13_fu_836_p3 = {{empty_113_fu_822_p2}, {2'd0}};

assign p_shl15_cast_fu_844_p1 = p_shl13_fu_836_p3;

assign p_shl19_cast_fu_662_p1 = p_shl7_fu_654_p3;

assign p_shl1_cast_fu_622_p1 = p_shl1_fu_614_p3;

assign p_shl1_fu_614_p3 = {{empty_102_fu_602_p1}, {5'd0}};

assign p_shl27_cast_fu_694_p1 = p_shl9_fu_686_p3;

assign p_shl2_cast_fu_728_p1 = p_shl2_fu_720_p3;

assign p_shl2_fu_720_p3 = {{empty_109_fu_716_p1}, {5'd0}};

assign p_shl3_cast_fu_740_p1 = p_shl3_fu_732_p3;

assign p_shl3_fu_732_p3 = {{empty_109_fu_716_p1}, {3'd0}};

assign p_shl4_cast_fu_762_p1 = p_shl4_fu_754_p3;

assign p_shl4_fu_754_p3 = {{empty_109_fu_716_p1}, {4'd0}};

assign p_shl5_cast_fu_774_p1 = p_shl5_fu_766_p3;

assign p_shl5_fu_766_p3 = {{empty_109_fu_716_p1}, {2'd0}};

assign p_shl6_fu_646_p3 = {{empty_fu_590_p2}, {6'd0}};

assign p_shl7_fu_654_p3 = {{empty_fu_590_p2}, {3'd0}};

assign p_shl8_fu_678_p3 = {{empty_105_fu_672_p2}, {6'd0}};

assign p_shl9_fu_686_p3 = {{empty_105_fu_672_p2}, {3'd0}};

assign p_shl_fu_606_p3 = {{empty_102_fu_602_p1}, {7'd0}};

assign sext_ln78_10_fu_1328_p1 = $signed(sub_ln76_13_fu_1322_p2);

assign sext_ln78_11_fu_1409_p1 = $signed(sub_ln76_14_fu_1403_p2);

assign sext_ln78_12_fu_1490_p1 = $signed(sub_ln76_15_fu_1484_p2);

assign sext_ln78_13_fu_1571_p1 = $signed(sub_ln76_16_fu_1565_p2);

assign sext_ln78_8_fu_1166_p1 = $signed(sub_ln76_11_fu_1160_p2);

assign sext_ln78_9_fu_1247_p1 = $signed(sub_ln76_12_fu_1241_p2);

assign sext_ln78_fu_933_p1 = $signed(add_ln78_fu_928_p2);

assign shl_ln76_17_fu_982_p3 = {{k_0_1_reg_363}, {5'd0}};

assign shl_ln76_18_fu_994_p3 = {{k_0_1_reg_363}, {3'd0}};

assign shl_ln76_19_fu_1059_p3 = {{k_0_2_reg_385}, {5'd0}};

assign shl_ln76_20_fu_1071_p3 = {{k_0_2_reg_385}, {3'd0}};

assign shl_ln76_21_fu_1136_p3 = {{k_1_0_reg_407}, {5'd0}};

assign shl_ln76_22_fu_1148_p3 = {{k_1_0_reg_407}, {3'd0}};

assign shl_ln76_23_fu_1217_p3 = {{k_1_1_reg_429}, {5'd0}};

assign shl_ln76_24_fu_1229_p3 = {{k_1_1_reg_429}, {3'd0}};

assign shl_ln76_25_fu_1298_p3 = {{k_1_2_reg_451}, {5'd0}};

assign shl_ln76_26_fu_1310_p3 = {{k_1_2_reg_451}, {3'd0}};

assign shl_ln76_27_fu_1379_p3 = {{k_2_0_reg_473}, {5'd0}};

assign shl_ln76_28_fu_1391_p3 = {{k_2_0_reg_473}, {3'd0}};

assign shl_ln76_29_fu_1460_p3 = {{k_2_1_reg_495}, {5'd0}};

assign shl_ln76_30_fu_1472_p3 = {{k_2_1_reg_495}, {3'd0}};

assign shl_ln76_31_fu_1541_p3 = {{k_2_2_reg_517}, {5'd0}};

assign shl_ln76_32_fu_1553_p3 = {{k_2_2_reg_517}, {3'd0}};

assign shl_ln76_s_fu_910_p3 = {{k_0_0_reg_340}, {3'd0}};

assign shl_ln_fu_898_p3 = {{k_0_0_reg_340}, {5'd0}};

assign sub_ln76_10_fu_1083_p2 = (zext_ln76_21_fu_1067_p1 - zext_ln76_22_fu_1079_p1);

assign sub_ln76_11_fu_1160_p2 = (zext_ln76_23_fu_1144_p1 - zext_ln76_24_fu_1156_p1);

assign sub_ln76_12_fu_1241_p2 = (zext_ln76_25_fu_1225_p1 - zext_ln76_26_fu_1237_p1);

assign sub_ln76_13_fu_1322_p2 = (zext_ln76_27_fu_1306_p1 - zext_ln76_28_fu_1318_p1);

assign sub_ln76_14_fu_1403_p2 = (zext_ln76_29_fu_1387_p1 - zext_ln76_30_fu_1399_p1);

assign sub_ln76_15_fu_1484_p2 = (zext_ln76_31_fu_1468_p1 - zext_ln76_32_fu_1480_p1);

assign sub_ln76_16_fu_1565_p2 = (zext_ln76_33_fu_1549_p1 - zext_ln76_34_fu_1561_p1);

assign sub_ln76_9_fu_1006_p2 = (zext_ln76_19_fu_990_p1 - zext_ln76_20_fu_1002_p1);

assign sub_ln76_fu_922_p2 = (zext_ln76_fu_906_p1 - zext_ln76_18_fu_918_p1);

assign tmp17_fu_1615_p3 = {{tmp_fu_1606_p4}, {z_reg_328}};

assign tmp_34_fu_1654_p4 = {{bitcast_ln111_fu_1650_p1[30:23]}};

assign tmp_fu_1606_p4 = {{empty_103_reg_1698[9:5]}};

assign tmp_s_fu_632_p4 = {{{empty_102_fu_602_p1}, {empty_102_fu_602_p1}}, {3'd0}};

assign trunc_ln111_fu_1664_p1 = bitcast_ln111_fu_1650_p1[22:0];

assign zext_ln104_fu_1628_p1 = add_ln104_fu_1623_p2;

assign zext_ln110_fu_1639_p1 = i_reg_540;

assign zext_ln68_10_fu_872_p1 = z_reg_328;

assign zext_ln68_8_fu_864_p1 = z_reg_328;

assign zext_ln68_9_fu_868_p1 = z_reg_328;

assign zext_ln68_fu_854_p1 = empty_114_fu_848_p2;

assign zext_ln73_10_fu_1049_p1 = k_0_2_reg_385;

assign zext_ln73_11_fu_1126_p1 = k_1_0_reg_407;

assign zext_ln73_12_fu_1207_p1 = k_1_1_reg_429;

assign zext_ln73_13_fu_1288_p1 = k_1_2_reg_451;

assign zext_ln73_14_fu_1369_p1 = k_2_0_reg_473;

assign zext_ln73_15_fu_1450_p1 = k_2_1_reg_495;

assign zext_ln73_16_fu_1531_p1 = k_2_2_reg_517;

assign zext_ln73_9_fu_972_p1 = k_0_1_reg_363;

assign zext_ln73_fu_888_p1 = k_0_0_reg_340;

assign zext_ln76_18_fu_918_p1 = shl_ln76_s_fu_910_p3;

assign zext_ln76_19_fu_990_p1 = shl_ln76_17_fu_982_p3;

assign zext_ln76_20_fu_1002_p1 = shl_ln76_18_fu_994_p3;

assign zext_ln76_21_fu_1067_p1 = shl_ln76_19_fu_1059_p3;

assign zext_ln76_22_fu_1079_p1 = shl_ln76_20_fu_1071_p3;

assign zext_ln76_23_fu_1144_p1 = shl_ln76_21_fu_1136_p3;

assign zext_ln76_24_fu_1156_p1 = shl_ln76_22_fu_1148_p3;

assign zext_ln76_25_fu_1225_p1 = shl_ln76_23_fu_1217_p3;

assign zext_ln76_26_fu_1237_p1 = shl_ln76_24_fu_1229_p3;

assign zext_ln76_27_fu_1306_p1 = shl_ln76_25_fu_1298_p3;

assign zext_ln76_28_fu_1318_p1 = shl_ln76_26_fu_1310_p3;

assign zext_ln76_29_fu_1387_p1 = shl_ln76_27_fu_1379_p3;

assign zext_ln76_30_fu_1399_p1 = shl_ln76_28_fu_1391_p3;

assign zext_ln76_31_fu_1468_p1 = shl_ln76_29_fu_1460_p3;

assign zext_ln76_32_fu_1480_p1 = shl_ln76_30_fu_1472_p3;

assign zext_ln76_33_fu_1549_p1 = shl_ln76_31_fu_1541_p3;

assign zext_ln76_34_fu_1561_p1 = shl_ln76_32_fu_1553_p3;

assign zext_ln76_fu_906_p1 = shl_ln_fu_898_p3;

assign zext_ln78_16_fu_1100_p1 = add_ln78_18_fu_1095_p2;

assign zext_ln78_17_fu_1181_p1 = add_ln78_19_fu_1176_p2;

assign zext_ln78_18_fu_1262_p1 = add_ln78_20_fu_1257_p2;

assign zext_ln78_19_fu_1343_p1 = add_ln78_21_fu_1338_p2;

assign zext_ln78_20_fu_1424_p1 = add_ln78_22_fu_1419_p2;

assign zext_ln78_21_fu_1505_p1 = add_ln78_23_fu_1500_p2;

assign zext_ln78_22_fu_1586_p1 = add_ln78_24_fu_1581_p2;

assign zext_ln78_fu_1023_p1 = add_ln78_17_fu_1018_p2;

assign zext_ln84_20_fu_1038_p1 = add_ln84_17_fu_1033_p2;

assign zext_ln84_21_fu_1115_p1 = add_ln84_18_fu_1110_p2;

assign zext_ln84_22_fu_1196_p1 = add_ln84_19_fu_1191_p2;

assign zext_ln84_23_fu_1277_p1 = add_ln84_20_fu_1272_p2;

assign zext_ln84_24_fu_1358_p1 = add_ln84_21_fu_1353_p2;

assign zext_ln84_25_fu_1439_p1 = add_ln84_22_fu_1434_p2;

assign zext_ln84_26_fu_1520_p1 = add_ln84_23_fu_1515_p2;

assign zext_ln84_27_fu_1601_p1 = add_ln84_24_fu_1596_p2;

assign zext_ln84_fu_948_p1 = add_ln84_fu_943_p2;

always @ (posedge ap_clk) begin
    empty_103_reg_1698[4:0] <= 5'b00000;
    p_cast33_reg_1703[2:0] <= 3'b000;
    p_cast33_reg_1703[9] <= 1'b0;
    empty_104_reg_1710[2:0] <= 3'b000;
    empty_106_reg_1717[2:0] <= 3'b000;
    p_cast53_reg_1732[2:0] <= 3'b000;
    p_cast35_reg_1737[1:0] <= 2'b00;
    p_cast29_cast_reg_1744[1:0] <= 2'b00;
    p_cast29_cast_reg_1744[9:6] <= 4'b0000;
    zext_ln68_reg_1751[1:0] <= 2'b00;
    zext_ln68_reg_1751[9:7] <= 3'b000;
    zext_ln68_8_reg_1763[11:5] <= 7'b0000000;
    zext_ln68_9_reg_1770[10:5] <= 6'b000000;
    zext_ln68_10_reg_1777[9:5] <= 5'b00000;
end

endmodule //runner_conv2d
