// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module runner_maxPooling2D (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_feature_map_address0,
        output_feature_map_ce0,
        output_feature_map_we0,
        output_feature_map_d0,
        layer_4_output_address0,
        layer_4_output_ce0,
        layer_4_output_q0,
        grp_fu_29505_p_din0,
        grp_fu_29505_p_din1,
        grp_fu_29505_p_opcode,
        grp_fu_29505_p_dout0,
        grp_fu_29505_p_ce
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] output_feature_map_address0;
output   output_feature_map_ce0;
output   output_feature_map_we0;
output  [31:0] output_feature_map_d0;
output  [9:0] layer_4_output_address0;
output   layer_4_output_ce0;
input  [31:0] layer_4_output_q0;
output  [31:0] grp_fu_29505_p_din0;
output  [31:0] grp_fu_29505_p_din1;
output  [4:0] grp_fu_29505_p_opcode;
input  [0:0] grp_fu_29505_p_dout0;
output   grp_fu_29505_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_feature_map_ce0;
reg output_feature_map_we0;
reg[9:0] layer_4_output_address0;
reg layer_4_output_ce0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_168;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
wire   [2:0] add_ln123_fu_174_p2;
reg   [2:0] add_ln123_reg_785;
wire    ap_CS_fsm_state2;
wire   [1:0] empty_47_fu_186_p1;
reg   [1:0] empty_47_reg_793;
wire   [0:0] icmp_ln123_fu_180_p2;
wire   [2:0] empty_48_fu_190_p2;
reg   [2:0] empty_48_reg_800;
wire   [2:0] empty_49_fu_196_p2;
reg   [2:0] empty_49_reg_805;
wire   [1:0] add_ln124_fu_202_p2;
reg   [1:0] add_ln124_reg_812;
wire    ap_CS_fsm_state3;
wire   [7:0] empty_53_fu_247_p2;
reg   [7:0] empty_53_reg_820;
wire   [0:0] icmp_ln124_fu_212_p2;
wire   [9:0] sub_ln131_fu_290_p2;
reg   [9:0] sub_ln131_reg_825;
wire   [9:0] sub_ln131_7_fu_322_p2;
reg   [9:0] sub_ln131_7_reg_830;
wire   [9:0] sub_ln131_8_fu_359_p2;
reg   [9:0] sub_ln131_8_reg_835;
wire   [9:0] sub_ln131_9_fu_391_p2;
reg   [9:0] sub_ln131_9_reg_840;
wire   [4:0] add_ln125_fu_397_p2;
reg   [4:0] add_ln125_reg_845;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln125_fu_411_p2;
wire   [9:0] add_ln136_7_fu_427_p2;
reg   [9:0] add_ln136_7_reg_858;
wire   [9:0] add_ln136_8_fu_432_p2;
reg   [9:0] add_ln136_8_reg_863;
wire   [9:0] add_ln136_9_fu_437_p2;
reg   [9:0] add_ln136_9_reg_868;
wire   [7:0] add_ln146_fu_442_p2;
reg   [7:0] add_ln146_reg_873;
wire   [31:0] select_ln136_fu_493_p3;
reg   [31:0] select_ln136_reg_883;
wire   [31:0] select_ln136_7_fu_585_p3;
reg   [31:0] select_ln136_7_reg_890;
wire    ap_CS_fsm_state7;
wire   [31:0] select_ln136_8_fu_679_p3;
reg   [31:0] select_ln136_8_reg_902;
wire    ap_CS_fsm_state9;
reg   [2:0] h_reg_128;
reg   [1:0] w_reg_139;
reg   [4:0] d_reg_150;
wire    ap_CS_fsm_state11;
wire   [63:0] zext_ln136_fu_422_p1;
wire   [63:0] zext_ln136_7_fu_447_p1;
wire   [63:0] zext_ln136_8_fu_592_p1;
wire   [63:0] zext_ln136_9_fu_686_p1;
wire   [63:0] zext_ln146_fu_781_p1;
reg   [31:0] grp_fu_161_p0;
reg   [31:0] grp_fu_161_p1;
wire   [2:0] zext_ln124_fu_208_p1;
wire   [2:0] empty_52_fu_222_p2;
wire   [5:0] p_shl1_fu_235_p3;
wire   [7:0] p_shl_fu_227_p3;
wire   [7:0] p_shl1_cast_fu_243_p1;
wire   [0:0] empty_51_fu_218_p1;
wire   [7:0] shl_ln131_s_fu_275_p5;
wire   [9:0] shl_ln_fu_264_p5;
wire   [9:0] zext_ln131_fu_286_p1;
wire   [4:0] add_ln_fu_253_p5;
wire   [4:0] or_ln131_fu_296_p2;
wire   [7:0] shl_ln131_6_fu_310_p3;
wire   [9:0] shl_ln131_5_fu_302_p3;
wire   [9:0] zext_ln131_4_fu_318_p1;
wire   [7:0] shl_ln131_8_fu_346_p4;
wire   [9:0] shl_ln131_7_fu_337_p4;
wire   [9:0] zext_ln131_5_fu_355_p1;
wire   [4:0] add_ln131_4_fu_328_p4;
wire   [4:0] or_ln131_2_fu_365_p2;
wire   [7:0] shl_ln131_1_fu_379_p3;
wire   [9:0] shl_ln131_9_fu_371_p3;
wire   [9:0] zext_ln131_6_fu_387_p1;
wire   [9:0] zext_ln125_3_fu_407_p1;
wire   [9:0] add_ln136_fu_417_p2;
wire   [7:0] zext_ln125_fu_403_p1;
wire   [31:0] bitcast_ln136_fu_451_p1;
wire   [7:0] tmp_fu_455_p4;
wire   [22:0] trunc_ln136_fu_465_p1;
wire   [0:0] icmp_ln136_27_fu_475_p2;
wire   [0:0] icmp_ln136_fu_469_p2;
wire   [0:0] or_ln136_fu_481_p2;
wire   [0:0] grp_fu_161_p2;
wire   [0:0] and_ln136_fu_487_p2;
wire   [31:0] bitcast_ln136_13_fu_502_p1;
wire   [31:0] bitcast_ln136_14_fu_519_p1;
wire   [7:0] tmp_21_fu_505_p4;
wire   [22:0] trunc_ln136_13_fu_515_p1;
wire   [0:0] icmp_ln136_29_fu_543_p2;
wire   [0:0] icmp_ln136_28_fu_537_p2;
wire   [7:0] tmp_22_fu_523_p4;
wire   [22:0] trunc_ln136_14_fu_533_p1;
wire   [0:0] icmp_ln136_31_fu_561_p2;
wire   [0:0] icmp_ln136_30_fu_555_p2;
wire   [0:0] or_ln136_13_fu_549_p2;
wire   [0:0] or_ln136_14_fu_567_p2;
wire   [0:0] and_ln136_13_fu_573_p2;
wire   [0:0] and_ln136_14_fu_579_p2;
wire   [31:0] bitcast_ln136_15_fu_596_p1;
wire   [31:0] bitcast_ln136_16_fu_613_p1;
wire   [7:0] tmp_24_fu_599_p4;
wire   [22:0] trunc_ln136_15_fu_609_p1;
wire   [0:0] icmp_ln136_33_fu_637_p2;
wire   [0:0] icmp_ln136_32_fu_631_p2;
wire   [7:0] tmp_25_fu_617_p4;
wire   [22:0] trunc_ln136_16_fu_627_p1;
wire   [0:0] icmp_ln136_35_fu_655_p2;
wire   [0:0] icmp_ln136_34_fu_649_p2;
wire   [0:0] or_ln136_15_fu_643_p2;
wire   [0:0] or_ln136_16_fu_661_p2;
wire   [0:0] and_ln136_15_fu_667_p2;
wire   [0:0] and_ln136_16_fu_673_p2;
wire   [31:0] bitcast_ln136_17_fu_690_p1;
wire   [31:0] bitcast_ln136_18_fu_707_p1;
wire   [7:0] tmp_27_fu_693_p4;
wire   [22:0] trunc_ln136_17_fu_703_p1;
wire   [0:0] icmp_ln136_37_fu_731_p2;
wire   [0:0] icmp_ln136_36_fu_725_p2;
wire   [7:0] tmp_28_fu_711_p4;
wire   [22:0] trunc_ln136_18_fu_721_p1;
wire   [0:0] icmp_ln136_39_fu_749_p2;
wire   [0:0] icmp_ln136_38_fu_743_p2;
wire   [0:0] or_ln136_17_fu_737_p2;
wire   [0:0] or_ln136_18_fu_755_p2;
wire   [0:0] and_ln136_17_fu_761_p2;
wire   [0:0] and_ln136_18_fu_767_p2;
wire    grp_fu_161_ce;
reg   [4:0] grp_fu_161_opcode;
reg   [10:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln124_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        d_reg_150 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        d_reg_150 <= add_ln125_reg_845;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        h_reg_128 <= 3'd0;
    end else if (((icmp_ln124_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        h_reg_128 <= add_ln123_reg_785;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        w_reg_139 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln125_fu_411_p2 == 1'd1))) begin
        w_reg_139 <= add_ln124_reg_812;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln123_reg_785 <= add_ln123_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln124_reg_812 <= add_ln124_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln125_reg_845 <= add_ln125_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln125_fu_411_p2 == 1'd0))) begin
        add_ln136_7_reg_858 <= add_ln136_7_fu_427_p2;
        add_ln136_8_reg_863 <= add_ln136_8_fu_432_p2;
        add_ln136_9_reg_868 <= add_ln136_9_fu_437_p2;
        add_ln146_reg_873 <= add_ln146_fu_442_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_47_reg_793 <= empty_47_fu_186_p1;
        empty_48_reg_800[2 : 1] <= empty_48_fu_190_p2[2 : 1];
        empty_49_reg_805[2 : 1] <= empty_49_fu_196_p2[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln124_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        empty_53_reg_820[7 : 3] <= empty_53_fu_247_p2[7 : 3];
        sub_ln131_7_reg_830[9 : 4] <= sub_ln131_7_fu_322_p2[9 : 4];
        sub_ln131_8_reg_835[9 : 4] <= sub_ln131_8_fu_359_p2[9 : 4];
        sub_ln131_9_reg_840[9 : 4] <= sub_ln131_9_fu_391_p2[9 : 4];
        sub_ln131_reg_825[9 : 4] <= sub_ln131_fu_290_p2[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_168 <= layer_4_output_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        select_ln136_7_reg_890 <= select_ln136_7_fu_585_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        select_ln136_8_reg_902 <= select_ln136_8_fu_679_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        select_ln136_reg_883 <= select_ln136_fu_493_p3;
    end
end

always @ (*) begin
    if ((((icmp_ln123_fu_180_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln123_fu_180_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_161_opcode = 5'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_161_opcode = 5'd4;
    end else begin
        grp_fu_161_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_161_p0 = select_ln136_8_reg_902;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_161_p0 = select_ln136_7_reg_890;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_161_p0 = select_ln136_fu_493_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_161_p0 = layer_4_output_q0;
    end else begin
        grp_fu_161_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_161_p1 = layer_4_output_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_161_p1 = 32'd4286578687;
    end else begin
        grp_fu_161_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        layer_4_output_address0 = zext_ln136_9_fu_686_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        layer_4_output_address0 = zext_ln136_8_fu_592_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        layer_4_output_address0 = zext_ln136_7_fu_447_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        layer_4_output_address0 = zext_ln136_fu_422_p1;
    end else begin
        layer_4_output_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        layer_4_output_ce0 = 1'b1;
    end else begin
        layer_4_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_feature_map_ce0 = 1'b1;
    end else begin
        output_feature_map_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_feature_map_we0 = 1'b1;
    end else begin
        output_feature_map_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln123_fu_180_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln124_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln125_fu_411_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln123_fu_174_p2 = (h_reg_128 + 3'd1);

assign add_ln124_fu_202_p2 = (w_reg_139 + 2'd1);

assign add_ln125_fu_397_p2 = (d_reg_150 + 5'd1);

assign add_ln131_4_fu_328_p4 = {{{empty_49_reg_805}, {empty_51_fu_218_p1}}, {1'd0}};

assign add_ln136_7_fu_427_p2 = (sub_ln131_7_reg_830 + zext_ln125_3_fu_407_p1);

assign add_ln136_8_fu_432_p2 = (sub_ln131_8_reg_835 + zext_ln125_3_fu_407_p1);

assign add_ln136_9_fu_437_p2 = (sub_ln131_9_reg_840 + zext_ln125_3_fu_407_p1);

assign add_ln136_fu_417_p2 = (sub_ln131_reg_825 + zext_ln125_3_fu_407_p1);

assign add_ln146_fu_442_p2 = (zext_ln125_fu_403_p1 + empty_53_reg_820);

assign add_ln_fu_253_p5 = {{{{empty_47_reg_793}, {1'd0}}, {empty_51_fu_218_p1}}, {1'd0}};

assign and_ln136_13_fu_573_p2 = (or_ln136_14_fu_567_p2 & or_ln136_13_fu_549_p2);

assign and_ln136_14_fu_579_p2 = (grp_fu_29505_p_dout0 & and_ln136_13_fu_573_p2);

assign and_ln136_15_fu_667_p2 = (or_ln136_16_fu_661_p2 & or_ln136_15_fu_643_p2);

assign and_ln136_16_fu_673_p2 = (grp_fu_29505_p_dout0 & and_ln136_15_fu_667_p2);

assign and_ln136_17_fu_761_p2 = (or_ln136_18_fu_755_p2 & or_ln136_17_fu_737_p2);

assign and_ln136_18_fu_767_p2 = (grp_fu_29505_p_dout0 & and_ln136_17_fu_761_p2);

assign and_ln136_fu_487_p2 = (or_ln136_fu_481_p2 & grp_fu_29505_p_dout0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln136_13_fu_502_p1 = select_ln136_reg_883;

assign bitcast_ln136_14_fu_519_p1 = reg_168;

assign bitcast_ln136_15_fu_596_p1 = select_ln136_7_reg_890;

assign bitcast_ln136_16_fu_613_p1 = reg_168;

assign bitcast_ln136_17_fu_690_p1 = select_ln136_8_reg_902;

assign bitcast_ln136_18_fu_707_p1 = reg_168;

assign bitcast_ln136_fu_451_p1 = reg_168;

assign empty_47_fu_186_p1 = h_reg_128[1:0];

assign empty_48_fu_190_p2 = h_reg_128 << 3'd1;

assign empty_49_fu_196_p2 = (empty_48_fu_190_p2 | 3'd1);

assign empty_51_fu_218_p1 = w_reg_139[0:0];

assign empty_52_fu_222_p2 = (zext_ln124_fu_208_p1 + empty_48_reg_800);

assign empty_53_fu_247_p2 = (p_shl_fu_227_p3 - p_shl1_cast_fu_243_p1);

assign grp_fu_161_ce = 1'b1;

assign grp_fu_161_p2 = grp_fu_29505_p_dout0;

assign grp_fu_29505_p_ce = 1'b1;

assign grp_fu_29505_p_din0 = grp_fu_161_p0;

assign grp_fu_29505_p_din1 = grp_fu_161_p1;

assign grp_fu_29505_p_opcode = grp_fu_161_opcode;

assign icmp_ln123_fu_180_p2 = ((h_reg_128 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln124_fu_212_p2 = ((w_reg_139 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln125_fu_411_p2 = ((d_reg_150 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln136_27_fu_475_p2 = ((trunc_ln136_fu_465_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_28_fu_537_p2 = ((tmp_21_fu_505_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_29_fu_543_p2 = ((trunc_ln136_13_fu_515_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_30_fu_555_p2 = ((tmp_22_fu_523_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_31_fu_561_p2 = ((trunc_ln136_14_fu_533_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_32_fu_631_p2 = ((tmp_24_fu_599_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_33_fu_637_p2 = ((trunc_ln136_15_fu_609_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_34_fu_649_p2 = ((tmp_25_fu_617_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_35_fu_655_p2 = ((trunc_ln136_16_fu_627_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_36_fu_725_p2 = ((tmp_27_fu_693_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_37_fu_731_p2 = ((trunc_ln136_17_fu_703_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_38_fu_743_p2 = ((tmp_28_fu_711_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_39_fu_749_p2 = ((trunc_ln136_18_fu_721_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_fu_469_p2 = ((tmp_fu_455_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln131_2_fu_365_p2 = (5'd1 | add_ln131_4_fu_328_p4);

assign or_ln131_fu_296_p2 = (5'd1 | add_ln_fu_253_p5);

assign or_ln136_13_fu_549_p2 = (icmp_ln136_29_fu_543_p2 | icmp_ln136_28_fu_537_p2);

assign or_ln136_14_fu_567_p2 = (icmp_ln136_31_fu_561_p2 | icmp_ln136_30_fu_555_p2);

assign or_ln136_15_fu_643_p2 = (icmp_ln136_33_fu_637_p2 | icmp_ln136_32_fu_631_p2);

assign or_ln136_16_fu_661_p2 = (icmp_ln136_35_fu_655_p2 | icmp_ln136_34_fu_649_p2);

assign or_ln136_17_fu_737_p2 = (icmp_ln136_37_fu_731_p2 | icmp_ln136_36_fu_725_p2);

assign or_ln136_18_fu_755_p2 = (icmp_ln136_39_fu_749_p2 | icmp_ln136_38_fu_743_p2);

assign or_ln136_fu_481_p2 = (icmp_ln136_fu_469_p2 | icmp_ln136_27_fu_475_p2);

assign output_feature_map_address0 = zext_ln146_fu_781_p1;

assign output_feature_map_d0 = ((and_ln136_18_fu_767_p2[0:0] == 1'b1) ? select_ln136_8_reg_902 : reg_168);

assign p_shl1_cast_fu_243_p1 = p_shl1_fu_235_p3;

assign p_shl1_fu_235_p3 = {{empty_52_fu_222_p2}, {3'd0}};

assign p_shl_fu_227_p3 = {{empty_52_fu_222_p2}, {5'd0}};

assign select_ln136_7_fu_585_p3 = ((and_ln136_14_fu_579_p2[0:0] == 1'b1) ? select_ln136_reg_883 : reg_168);

assign select_ln136_8_fu_679_p3 = ((and_ln136_16_fu_673_p2[0:0] == 1'b1) ? select_ln136_7_reg_890 : reg_168);

assign select_ln136_fu_493_p3 = ((and_ln136_fu_487_p2[0:0] == 1'b1) ? 32'd4286578687 : reg_168);

assign shl_ln131_1_fu_379_p3 = {{or_ln131_2_fu_365_p2}, {3'd0}};

assign shl_ln131_5_fu_302_p3 = {{or_ln131_fu_296_p2}, {5'd0}};

assign shl_ln131_6_fu_310_p3 = {{or_ln131_fu_296_p2}, {3'd0}};

assign shl_ln131_7_fu_337_p4 = {{{empty_49_reg_805}, {empty_51_fu_218_p1}}, {6'd0}};

assign shl_ln131_8_fu_346_p4 = {{{empty_49_reg_805}, {empty_51_fu_218_p1}}, {4'd0}};

assign shl_ln131_9_fu_371_p3 = {{or_ln131_2_fu_365_p2}, {5'd0}};

assign shl_ln131_s_fu_275_p5 = {{{{empty_47_reg_793}, {1'd0}}, {empty_51_fu_218_p1}}, {4'd0}};

assign shl_ln_fu_264_p5 = {{{{empty_47_reg_793}, {1'd0}}, {empty_51_fu_218_p1}}, {6'd0}};

assign sub_ln131_7_fu_322_p2 = (shl_ln131_5_fu_302_p3 - zext_ln131_4_fu_318_p1);

assign sub_ln131_8_fu_359_p2 = (shl_ln131_7_fu_337_p4 - zext_ln131_5_fu_355_p1);

assign sub_ln131_9_fu_391_p2 = (shl_ln131_9_fu_371_p3 - zext_ln131_6_fu_387_p1);

assign sub_ln131_fu_290_p2 = (shl_ln_fu_264_p5 - zext_ln131_fu_286_p1);

assign tmp_21_fu_505_p4 = {{bitcast_ln136_13_fu_502_p1[30:23]}};

assign tmp_22_fu_523_p4 = {{bitcast_ln136_14_fu_519_p1[30:23]}};

assign tmp_24_fu_599_p4 = {{bitcast_ln136_15_fu_596_p1[30:23]}};

assign tmp_25_fu_617_p4 = {{bitcast_ln136_16_fu_613_p1[30:23]}};

assign tmp_27_fu_693_p4 = {{bitcast_ln136_17_fu_690_p1[30:23]}};

assign tmp_28_fu_711_p4 = {{bitcast_ln136_18_fu_707_p1[30:23]}};

assign tmp_fu_455_p4 = {{bitcast_ln136_fu_451_p1[30:23]}};

assign trunc_ln136_13_fu_515_p1 = bitcast_ln136_13_fu_502_p1[22:0];

assign trunc_ln136_14_fu_533_p1 = bitcast_ln136_14_fu_519_p1[22:0];

assign trunc_ln136_15_fu_609_p1 = bitcast_ln136_15_fu_596_p1[22:0];

assign trunc_ln136_16_fu_627_p1 = bitcast_ln136_16_fu_613_p1[22:0];

assign trunc_ln136_17_fu_703_p1 = bitcast_ln136_17_fu_690_p1[22:0];

assign trunc_ln136_18_fu_721_p1 = bitcast_ln136_18_fu_707_p1[22:0];

assign trunc_ln136_fu_465_p1 = bitcast_ln136_fu_451_p1[22:0];

assign zext_ln124_fu_208_p1 = w_reg_139;

assign zext_ln125_3_fu_407_p1 = d_reg_150;

assign zext_ln125_fu_403_p1 = d_reg_150;

assign zext_ln131_4_fu_318_p1 = shl_ln131_6_fu_310_p3;

assign zext_ln131_5_fu_355_p1 = shl_ln131_8_fu_346_p4;

assign zext_ln131_6_fu_387_p1 = shl_ln131_1_fu_379_p3;

assign zext_ln131_fu_286_p1 = shl_ln131_s_fu_275_p5;

assign zext_ln136_7_fu_447_p1 = add_ln136_7_reg_858;

assign zext_ln136_8_fu_592_p1 = add_ln136_8_reg_863;

assign zext_ln136_9_fu_686_p1 = add_ln136_9_reg_868;

assign zext_ln136_fu_422_p1 = add_ln136_fu_417_p2;

assign zext_ln146_fu_781_p1 = add_ln146_reg_873;

always @ (posedge ap_clk) begin
    empty_48_reg_800[0] <= 1'b0;
    empty_49_reg_805[0] <= 1'b1;
    empty_53_reg_820[2:0] <= 3'b000;
    sub_ln131_reg_825[3:0] <= 4'b0000;
    sub_ln131_7_reg_830[3:0] <= 4'b1000;
    sub_ln131_8_reg_835[3:0] <= 4'b0000;
    sub_ln131_9_reg_840[3:0] <= 4'b1000;
end

endmodule //runner_maxPooling2D
