// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module runner_maxPooling2D_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer_0_output_address0,
        layer_0_output_ce0,
        layer_0_output_q0,
        layer_1_output_address0,
        layer_1_output_ce0,
        layer_1_output_we0,
        layer_1_output_d0,
        grp_fu_29505_p_din0,
        grp_fu_29505_p_din1,
        grp_fu_29505_p_opcode,
        grp_fu_29505_p_dout0,
        grp_fu_29505_p_ce
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] layer_0_output_address0;
output   layer_0_output_ce0;
input  [31:0] layer_0_output_q0;
output  [11:0] layer_1_output_address0;
output   layer_1_output_ce0;
output   layer_1_output_we0;
output  [31:0] layer_1_output_d0;
output  [31:0] grp_fu_29505_p_din0;
output  [31:0] grp_fu_29505_p_din1;
output  [4:0] grp_fu_29505_p_opcode;
input  [0:0] grp_fu_29505_p_dout0;
output   grp_fu_29505_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] layer_0_output_address0;
reg layer_0_output_ce0;
reg layer_1_output_ce0;
reg layer_1_output_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_174;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
wire   [4:0] add_ln123_fu_180_p2;
reg   [4:0] add_ln123_reg_881;
wire    ap_CS_fsm_state2;
wire   [9:0] empty_30_fu_216_p2;
reg   [9:0] empty_30_reg_889;
wire   [0:0] icmp_ln123_fu_190_p2;
wire  signed [12:0] tmp_32_cast_fu_252_p1;
reg  signed [12:0] tmp_32_cast_reg_894;
wire   [11:0] empty_33_fu_286_p2;
reg   [11:0] empty_33_reg_899;
wire   [3:0] add_ln124_fu_292_p2;
reg   [3:0] add_ln124_reg_904;
wire    ap_CS_fsm_state3;
wire   [11:0] empty_37_fu_353_p2;
reg   [11:0] empty_37_reg_912;
wire   [0:0] icmp_ln124_fu_302_p2;
wire   [13:0] sub_ln131_fu_384_p2;
reg   [13:0] sub_ln131_reg_917;
wire   [13:0] sub_ln131_1_fu_416_p2;
reg   [13:0] sub_ln131_1_reg_922;
wire   [13:0] sub_ln131_2_fu_451_p2;
reg   [13:0] sub_ln131_2_reg_927;
wire   [13:0] sub_ln131_3_fu_487_p2;
reg   [13:0] sub_ln131_3_reg_932;
wire   [2:0] add_ln125_fu_493_p2;
reg   [2:0] add_ln125_reg_937;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln125_fu_507_p2;
wire   [13:0] add_ln136_1_fu_523_p2;
reg   [13:0] add_ln136_1_reg_950;
wire   [13:0] add_ln136_2_fu_528_p2;
reg   [13:0] add_ln136_2_reg_955;
wire   [13:0] add_ln136_3_fu_533_p2;
reg   [13:0] add_ln136_3_reg_960;
wire   [11:0] add_ln146_fu_538_p2;
reg   [11:0] add_ln146_reg_965;
wire   [31:0] select_ln136_fu_589_p3;
reg   [31:0] select_ln136_reg_975;
wire   [31:0] select_ln136_1_fu_681_p3;
reg   [31:0] select_ln136_1_reg_982;
wire    ap_CS_fsm_state7;
wire   [31:0] select_ln136_2_fu_775_p3;
reg   [31:0] select_ln136_2_reg_994;
wire    ap_CS_fsm_state9;
reg   [4:0] h_reg_134;
reg   [3:0] w_reg_145;
reg   [2:0] d_reg_156;
wire    ap_CS_fsm_state11;
wire   [63:0] zext_ln136_fu_518_p1;
wire   [63:0] zext_ln136_1_fu_543_p1;
wire   [63:0] zext_ln136_2_fu_688_p1;
wire   [63:0] zext_ln136_3_fu_782_p1;
wire   [63:0] zext_ln146_fu_877_p1;
reg   [31:0] grp_fu_167_p0;
reg   [31:0] grp_fu_167_p1;
wire   [8:0] p_shl_fu_204_p3;
wire   [9:0] p_shl_cast_fu_212_p1;
wire   [9:0] zext_ln123_fu_186_p1;
wire   [9:0] p_shl3_fu_222_p3;
wire   [5:0] tmp_12_fu_196_p3;
wire   [10:0] p_shl13_cast_fu_230_p1;
wire   [10:0] p_shl14_cast_fu_234_p1;
wire   [10:0] empty_31_fu_238_p2;
wire   [11:0] tmp_13_fu_244_p3;
wire   [5:0] empty_32_fu_256_p2;
wire   [10:0] p_shl7_fu_262_p3;
wire   [6:0] p_shl8_fu_274_p3;
wire   [11:0] p_shl7_cast_fu_270_p1;
wire   [11:0] p_shl8_cast_fu_282_p1;
wire   [4:0] tmp_14_fu_308_p3;
wire   [9:0] zext_ln124_fu_298_p1;
wire   [9:0] empty_35_fu_324_p2;
wire   [8:0] empty_36_fu_329_p1;
wire   [10:0] p_shl2_fu_341_p3;
wire   [11:0] p_shl1_fu_333_p3;
wire  signed [11:0] p_shl2_cast_fu_349_p1;
wire   [12:0] p_cast10_fu_320_p1;
wire   [12:0] add_ln131_fu_359_p2;
wire   [10:0] trunc_ln131_fu_364_p1;
wire   [13:0] shl_ln_fu_368_p3;
wire   [13:0] shl_ln131_1_fu_376_p3;
wire   [12:0] or_ln131_fu_390_p2;
wire   [10:0] trunc_ln131_1_fu_396_p1;
wire   [13:0] shl_ln131_2_fu_400_p3;
wire   [13:0] shl_ln131_3_fu_408_p3;
wire   [11:0] p_cast11_fu_316_p1;
wire   [11:0] add_ln131_1_fu_422_p2;
wire   [10:0] trunc_ln131_2_fu_427_p1;
wire   [12:0] shl_ln131_5_fu_439_p3;
wire   [13:0] shl_ln131_4_fu_431_p3;
wire  signed [13:0] sext_ln131_fu_447_p1;
wire   [11:0] or_ln131_1_fu_457_p2;
wire   [10:0] trunc_ln131_3_fu_463_p1;
wire   [12:0] shl_ln131_7_fu_475_p3;
wire   [13:0] shl_ln131_6_fu_467_p3;
wire  signed [13:0] sext_ln131_1_fu_483_p1;
wire   [13:0] zext_ln125_1_fu_503_p1;
wire   [13:0] add_ln136_fu_513_p2;
wire   [11:0] zext_ln125_fu_499_p1;
wire   [31:0] bitcast_ln136_fu_547_p1;
wire   [7:0] tmp_fu_551_p4;
wire   [22:0] trunc_ln136_fu_561_p1;
wire   [0:0] icmp_ln136_1_fu_571_p2;
wire   [0:0] icmp_ln136_fu_565_p2;
wire   [0:0] or_ln136_fu_577_p2;
wire   [0:0] grp_fu_167_p2;
wire   [0:0] and_ln136_fu_583_p2;
wire   [31:0] bitcast_ln136_1_fu_598_p1;
wire   [31:0] bitcast_ln136_2_fu_615_p1;
wire   [7:0] tmp_3_fu_601_p4;
wire   [22:0] trunc_ln136_1_fu_611_p1;
wire   [0:0] icmp_ln136_3_fu_639_p2;
wire   [0:0] icmp_ln136_2_fu_633_p2;
wire   [7:0] tmp_4_fu_619_p4;
wire   [22:0] trunc_ln136_2_fu_629_p1;
wire   [0:0] icmp_ln136_5_fu_657_p2;
wire   [0:0] icmp_ln136_4_fu_651_p2;
wire   [0:0] or_ln136_1_fu_645_p2;
wire   [0:0] or_ln136_2_fu_663_p2;
wire   [0:0] and_ln136_1_fu_669_p2;
wire   [0:0] and_ln136_2_fu_675_p2;
wire   [31:0] bitcast_ln136_3_fu_692_p1;
wire   [31:0] bitcast_ln136_4_fu_709_p1;
wire   [7:0] tmp_6_fu_695_p4;
wire   [22:0] trunc_ln136_3_fu_705_p1;
wire   [0:0] icmp_ln136_7_fu_733_p2;
wire   [0:0] icmp_ln136_6_fu_727_p2;
wire   [7:0] tmp_7_fu_713_p4;
wire   [22:0] trunc_ln136_4_fu_723_p1;
wire   [0:0] icmp_ln136_9_fu_751_p2;
wire   [0:0] icmp_ln136_8_fu_745_p2;
wire   [0:0] or_ln136_3_fu_739_p2;
wire   [0:0] or_ln136_4_fu_757_p2;
wire   [0:0] and_ln136_3_fu_763_p2;
wire   [0:0] and_ln136_4_fu_769_p2;
wire   [31:0] bitcast_ln136_5_fu_786_p1;
wire   [31:0] bitcast_ln136_6_fu_803_p1;
wire   [7:0] tmp_9_fu_789_p4;
wire   [22:0] trunc_ln136_5_fu_799_p1;
wire   [0:0] icmp_ln136_11_fu_827_p2;
wire   [0:0] icmp_ln136_10_fu_821_p2;
wire   [7:0] tmp_10_fu_807_p4;
wire   [22:0] trunc_ln136_6_fu_817_p1;
wire   [0:0] icmp_ln136_13_fu_845_p2;
wire   [0:0] icmp_ln136_12_fu_839_p2;
wire   [0:0] or_ln136_5_fu_833_p2;
wire   [0:0] or_ln136_6_fu_851_p2;
wire   [0:0] and_ln136_5_fu_857_p2;
wire   [0:0] and_ln136_6_fu_863_p2;
wire    grp_fu_167_ce;
reg   [4:0] grp_fu_167_opcode;
reg   [10:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln124_fu_302_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        d_reg_156 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        d_reg_156 <= add_ln125_reg_937;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        h_reg_134 <= 5'd0;
    end else if (((icmp_ln124_fu_302_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        h_reg_134 <= add_ln123_reg_881;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        w_reg_145 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln125_fu_507_p2 == 1'd1))) begin
        w_reg_145 <= add_ln124_reg_904;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln123_reg_881 <= add_ln123_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln124_reg_904 <= add_ln124_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln125_reg_937 <= add_ln125_fu_493_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln125_fu_507_p2 == 1'd0))) begin
        add_ln136_1_reg_950 <= add_ln136_1_fu_523_p2;
        add_ln136_2_reg_955 <= add_ln136_2_fu_528_p2;
        add_ln136_3_reg_960 <= add_ln136_3_fu_533_p2;
        add_ln146_reg_965 <= add_ln146_fu_538_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_30_reg_889 <= empty_30_fu_216_p2;
        empty_33_reg_899[11 : 2] <= empty_33_fu_286_p2[11 : 2];
        tmp_32_cast_reg_894[12 : 2] <= tmp_32_cast_fu_252_p1[12 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln124_fu_302_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        empty_37_reg_912[11 : 1] <= empty_37_fu_353_p2[11 : 1];
        sub_ln131_1_reg_922[13 : 2] <= sub_ln131_1_fu_416_p2[13 : 2];
        sub_ln131_2_reg_927[13 : 2] <= sub_ln131_2_fu_451_p2[13 : 2];
        sub_ln131_3_reg_932[13 : 2] <= sub_ln131_3_fu_487_p2[13 : 2];
        sub_ln131_reg_917[13 : 2] <= sub_ln131_fu_384_p2[13 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_174 <= layer_0_output_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        select_ln136_1_reg_982 <= select_ln136_1_fu_681_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        select_ln136_2_reg_994 <= select_ln136_2_fu_775_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        select_ln136_reg_975 <= select_ln136_fu_589_p3;
    end
end

always @ (*) begin
    if ((((icmp_ln123_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln123_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_167_opcode = 5'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_167_opcode = 5'd4;
    end else begin
        grp_fu_167_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_167_p0 = select_ln136_2_reg_994;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_167_p0 = select_ln136_1_reg_982;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_167_p0 = select_ln136_fu_589_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_167_p0 = layer_0_output_q0;
    end else begin
        grp_fu_167_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_167_p1 = layer_0_output_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_167_p1 = 32'd4286578687;
    end else begin
        grp_fu_167_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        layer_0_output_address0 = zext_ln136_3_fu_782_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        layer_0_output_address0 = zext_ln136_2_fu_688_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        layer_0_output_address0 = zext_ln136_1_fu_543_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        layer_0_output_address0 = zext_ln136_fu_518_p1;
    end else begin
        layer_0_output_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        layer_0_output_ce0 = 1'b1;
    end else begin
        layer_0_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        layer_1_output_ce0 = 1'b1;
    end else begin
        layer_1_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        layer_1_output_we0 = 1'b1;
    end else begin
        layer_1_output_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln123_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln124_fu_302_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln125_fu_507_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln123_fu_180_p2 = (h_reg_134 + 5'd1);

assign add_ln124_fu_292_p2 = (w_reg_145 + 4'd1);

assign add_ln125_fu_493_p2 = (d_reg_156 + 3'd1);

assign add_ln131_1_fu_422_p2 = (empty_33_reg_899 + p_cast11_fu_316_p1);

assign add_ln131_fu_359_p2 = ($signed(tmp_32_cast_reg_894) + $signed(p_cast10_fu_320_p1));

assign add_ln136_1_fu_523_p2 = (sub_ln131_1_reg_922 + zext_ln125_1_fu_503_p1);

assign add_ln136_2_fu_528_p2 = (sub_ln131_2_reg_927 + zext_ln125_1_fu_503_p1);

assign add_ln136_3_fu_533_p2 = (sub_ln131_3_reg_932 + zext_ln125_1_fu_503_p1);

assign add_ln136_fu_513_p2 = (sub_ln131_reg_917 + zext_ln125_1_fu_503_p1);

assign add_ln146_fu_538_p2 = (zext_ln125_fu_499_p1 + empty_37_reg_912);

assign and_ln136_1_fu_669_p2 = (or_ln136_2_fu_663_p2 & or_ln136_1_fu_645_p2);

assign and_ln136_2_fu_675_p2 = (grp_fu_29505_p_dout0 & and_ln136_1_fu_669_p2);

assign and_ln136_3_fu_763_p2 = (or_ln136_4_fu_757_p2 & or_ln136_3_fu_739_p2);

assign and_ln136_4_fu_769_p2 = (grp_fu_29505_p_dout0 & and_ln136_3_fu_763_p2);

assign and_ln136_5_fu_857_p2 = (or_ln136_6_fu_851_p2 & or_ln136_5_fu_833_p2);

assign and_ln136_6_fu_863_p2 = (grp_fu_29505_p_dout0 & and_ln136_5_fu_857_p2);

assign and_ln136_fu_583_p2 = (or_ln136_fu_577_p2 & grp_fu_29505_p_dout0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln136_1_fu_598_p1 = select_ln136_reg_975;

assign bitcast_ln136_2_fu_615_p1 = reg_174;

assign bitcast_ln136_3_fu_692_p1 = select_ln136_1_reg_982;

assign bitcast_ln136_4_fu_709_p1 = reg_174;

assign bitcast_ln136_5_fu_786_p1 = select_ln136_2_reg_994;

assign bitcast_ln136_6_fu_803_p1 = reg_174;

assign bitcast_ln136_fu_547_p1 = reg_174;

assign empty_30_fu_216_p2 = (p_shl_cast_fu_212_p1 - zext_ln123_fu_186_p1);

assign empty_31_fu_238_p2 = (p_shl13_cast_fu_230_p1 - p_shl14_cast_fu_234_p1);

assign empty_32_fu_256_p2 = (tmp_12_fu_196_p3 | 6'd1);

assign empty_33_fu_286_p2 = (p_shl7_cast_fu_270_p1 - p_shl8_cast_fu_282_p1);

assign empty_35_fu_324_p2 = (zext_ln124_fu_298_p1 + empty_30_reg_889);

assign empty_36_fu_329_p1 = empty_35_fu_324_p2[8:0];

assign empty_37_fu_353_p2 = ($signed(p_shl1_fu_333_p3) - $signed(p_shl2_cast_fu_349_p1));

assign grp_fu_167_ce = 1'b1;

assign grp_fu_167_p2 = grp_fu_29505_p_dout0;

assign grp_fu_29505_p_ce = 1'b1;

assign grp_fu_29505_p_din0 = grp_fu_167_p0;

assign grp_fu_29505_p_din1 = grp_fu_167_p1;

assign grp_fu_29505_p_opcode = grp_fu_167_opcode;

assign icmp_ln123_fu_190_p2 = ((h_reg_134 == 5'd23) ? 1'b1 : 1'b0);

assign icmp_ln124_fu_302_p2 = ((w_reg_145 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln125_fu_507_p2 = ((d_reg_156 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln136_10_fu_821_p2 = ((tmp_9_fu_789_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_11_fu_827_p2 = ((trunc_ln136_5_fu_799_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_12_fu_839_p2 = ((tmp_10_fu_807_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_13_fu_845_p2 = ((trunc_ln136_6_fu_817_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_1_fu_571_p2 = ((trunc_ln136_fu_561_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_2_fu_633_p2 = ((tmp_3_fu_601_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_3_fu_639_p2 = ((trunc_ln136_1_fu_611_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_4_fu_651_p2 = ((tmp_4_fu_619_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_5_fu_657_p2 = ((trunc_ln136_2_fu_629_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_6_fu_727_p2 = ((tmp_6_fu_695_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_7_fu_733_p2 = ((trunc_ln136_3_fu_705_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_8_fu_745_p2 = ((tmp_7_fu_713_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_9_fu_751_p2 = ((trunc_ln136_4_fu_723_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_fu_565_p2 = ((tmp_fu_551_p4 != 8'd255) ? 1'b1 : 1'b0);

assign layer_1_output_address0 = zext_ln146_fu_877_p1;

assign layer_1_output_d0 = ((and_ln136_6_fu_863_p2[0:0] == 1'b1) ? select_ln136_2_reg_994 : reg_174);

assign or_ln131_1_fu_457_p2 = (12'd1 | add_ln131_1_fu_422_p2);

assign or_ln131_fu_390_p2 = (13'd1 | add_ln131_fu_359_p2);

assign or_ln136_1_fu_645_p2 = (icmp_ln136_3_fu_639_p2 | icmp_ln136_2_fu_633_p2);

assign or_ln136_2_fu_663_p2 = (icmp_ln136_5_fu_657_p2 | icmp_ln136_4_fu_651_p2);

assign or_ln136_3_fu_739_p2 = (icmp_ln136_7_fu_733_p2 | icmp_ln136_6_fu_727_p2);

assign or_ln136_4_fu_757_p2 = (icmp_ln136_9_fu_751_p2 | icmp_ln136_8_fu_745_p2);

assign or_ln136_5_fu_833_p2 = (icmp_ln136_11_fu_827_p2 | icmp_ln136_10_fu_821_p2);

assign or_ln136_6_fu_851_p2 = (icmp_ln136_13_fu_845_p2 | icmp_ln136_12_fu_839_p2);

assign or_ln136_fu_577_p2 = (icmp_ln136_fu_565_p2 | icmp_ln136_1_fu_571_p2);

assign p_cast10_fu_320_p1 = tmp_14_fu_308_p3;

assign p_cast11_fu_316_p1 = tmp_14_fu_308_p3;

assign p_shl13_cast_fu_230_p1 = p_shl3_fu_222_p3;

assign p_shl14_cast_fu_234_p1 = tmp_12_fu_196_p3;

assign p_shl1_fu_333_p3 = {{empty_36_fu_329_p1}, {3'd0}};

assign p_shl2_cast_fu_349_p1 = $signed(p_shl2_fu_341_p3);

assign p_shl2_fu_341_p3 = {{empty_35_fu_324_p2}, {1'd0}};

assign p_shl3_fu_222_p3 = {{h_reg_134}, {5'd0}};

assign p_shl7_cast_fu_270_p1 = p_shl7_fu_262_p3;

assign p_shl7_fu_262_p3 = {{empty_32_fu_256_p2}, {5'd0}};

assign p_shl8_cast_fu_282_p1 = p_shl8_fu_274_p3;

assign p_shl8_fu_274_p3 = {{empty_32_fu_256_p2}, {1'd0}};

assign p_shl_cast_fu_212_p1 = p_shl_fu_204_p3;

assign p_shl_fu_204_p3 = {{h_reg_134}, {4'd0}};

assign select_ln136_1_fu_681_p3 = ((and_ln136_2_fu_675_p2[0:0] == 1'b1) ? select_ln136_reg_975 : reg_174);

assign select_ln136_2_fu_775_p3 = ((and_ln136_4_fu_769_p2[0:0] == 1'b1) ? select_ln136_1_reg_982 : reg_174);

assign select_ln136_fu_589_p3 = ((and_ln136_fu_583_p2[0:0] == 1'b1) ? 32'd4286578687 : reg_174);

assign sext_ln131_1_fu_483_p1 = $signed(shl_ln131_7_fu_475_p3);

assign sext_ln131_fu_447_p1 = $signed(shl_ln131_5_fu_439_p3);

assign shl_ln131_1_fu_376_p3 = {{add_ln131_fu_359_p2}, {1'd0}};

assign shl_ln131_2_fu_400_p3 = {{trunc_ln131_1_fu_396_p1}, {3'd0}};

assign shl_ln131_3_fu_408_p3 = {{or_ln131_fu_390_p2}, {1'd0}};

assign shl_ln131_4_fu_431_p3 = {{trunc_ln131_2_fu_427_p1}, {3'd0}};

assign shl_ln131_5_fu_439_p3 = {{add_ln131_1_fu_422_p2}, {1'd0}};

assign shl_ln131_6_fu_467_p3 = {{trunc_ln131_3_fu_463_p1}, {3'd0}};

assign shl_ln131_7_fu_475_p3 = {{or_ln131_1_fu_457_p2}, {1'd0}};

assign shl_ln_fu_368_p3 = {{trunc_ln131_fu_364_p1}, {3'd0}};

assign sub_ln131_1_fu_416_p2 = (shl_ln131_2_fu_400_p3 - shl_ln131_3_fu_408_p3);

assign sub_ln131_2_fu_451_p2 = ($signed(shl_ln131_4_fu_431_p3) - $signed(sext_ln131_fu_447_p1));

assign sub_ln131_3_fu_487_p2 = ($signed(shl_ln131_6_fu_467_p3) - $signed(sext_ln131_1_fu_483_p1));

assign sub_ln131_fu_384_p2 = (shl_ln_fu_368_p3 - shl_ln131_1_fu_376_p3);

assign tmp_10_fu_807_p4 = {{bitcast_ln136_6_fu_803_p1[30:23]}};

assign tmp_12_fu_196_p3 = {{h_reg_134}, {1'd0}};

assign tmp_13_fu_244_p3 = {{empty_31_fu_238_p2}, {1'd0}};

assign tmp_14_fu_308_p3 = {{w_reg_145}, {1'd0}};

assign tmp_32_cast_fu_252_p1 = $signed(tmp_13_fu_244_p3);

assign tmp_3_fu_601_p4 = {{bitcast_ln136_1_fu_598_p1[30:23]}};

assign tmp_4_fu_619_p4 = {{bitcast_ln136_2_fu_615_p1[30:23]}};

assign tmp_6_fu_695_p4 = {{bitcast_ln136_3_fu_692_p1[30:23]}};

assign tmp_7_fu_713_p4 = {{bitcast_ln136_4_fu_709_p1[30:23]}};

assign tmp_9_fu_789_p4 = {{bitcast_ln136_5_fu_786_p1[30:23]}};

assign tmp_fu_551_p4 = {{bitcast_ln136_fu_547_p1[30:23]}};

assign trunc_ln131_1_fu_396_p1 = or_ln131_fu_390_p2[10:0];

assign trunc_ln131_2_fu_427_p1 = add_ln131_1_fu_422_p2[10:0];

assign trunc_ln131_3_fu_463_p1 = or_ln131_1_fu_457_p2[10:0];

assign trunc_ln131_fu_364_p1 = add_ln131_fu_359_p2[10:0];

assign trunc_ln136_1_fu_611_p1 = bitcast_ln136_1_fu_598_p1[22:0];

assign trunc_ln136_2_fu_629_p1 = bitcast_ln136_2_fu_615_p1[22:0];

assign trunc_ln136_3_fu_705_p1 = bitcast_ln136_3_fu_692_p1[22:0];

assign trunc_ln136_4_fu_723_p1 = bitcast_ln136_4_fu_709_p1[22:0];

assign trunc_ln136_5_fu_799_p1 = bitcast_ln136_5_fu_786_p1[22:0];

assign trunc_ln136_6_fu_817_p1 = bitcast_ln136_6_fu_803_p1[22:0];

assign trunc_ln136_fu_561_p1 = bitcast_ln136_fu_547_p1[22:0];

assign zext_ln123_fu_186_p1 = h_reg_134;

assign zext_ln124_fu_298_p1 = w_reg_145;

assign zext_ln125_1_fu_503_p1 = d_reg_156;

assign zext_ln125_fu_499_p1 = d_reg_156;

assign zext_ln136_1_fu_543_p1 = add_ln136_1_reg_950;

assign zext_ln136_2_fu_688_p1 = add_ln136_2_reg_955;

assign zext_ln136_3_fu_782_p1 = add_ln136_3_reg_960;

assign zext_ln136_fu_518_p1 = add_ln136_fu_513_p2;

assign zext_ln146_fu_877_p1 = add_ln146_reg_965;

always @ (posedge ap_clk) begin
    tmp_32_cast_reg_894[1:0] <= 2'b00;
    empty_33_reg_899[1:0] <= 2'b10;
    empty_37_reg_912[0] <= 1'b0;
    sub_ln131_reg_917[1:0] <= 2'b00;
    sub_ln131_1_reg_922[1:0] <= 2'b10;
    sub_ln131_2_reg_927[1:0] <= 2'b00;
    sub_ln131_3_reg_932[1:0] <= 2'b10;
end

endmodule //runner_maxPooling2D_2
