-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity runner_maxPooling2D is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_feature_map_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_feature_map_ce0 : OUT STD_LOGIC;
    output_feature_map_we0 : OUT STD_LOGIC;
    output_feature_map_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer_4_output_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer_4_output_ce0 : OUT STD_LOGIC;
    layer_4_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_29505_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_29505_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_29505_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_29505_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_29505_p_ce : OUT STD_LOGIC );
end;


architecture behav of runner_maxPooling2D is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_FF7FFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111011111111111111111111111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln123_fu_174_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln123_reg_785 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_47_fu_186_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_47_reg_793 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln123_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_fu_190_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_48_reg_800 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_49_fu_196_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_49_reg_805 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln124_fu_202_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln124_reg_812 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_53_fu_247_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_53_reg_820 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln124_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln131_fu_290_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln131_reg_825 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln131_7_fu_322_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln131_7_reg_830 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln131_8_fu_359_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln131_8_reg_835 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln131_9_fu_391_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln131_9_reg_840 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln125_fu_397_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln125_reg_845 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln125_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln136_7_fu_427_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln136_7_reg_858 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln136_8_fu_432_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln136_8_reg_863 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln136_9_fu_437_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln136_9_reg_868 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln146_fu_442_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln146_reg_873 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln136_fu_493_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_reg_883 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_7_fu_585_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_7_reg_890 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal select_ln136_8_fu_679_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_8_reg_902 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal h_reg_128 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_139 : STD_LOGIC_VECTOR (1 downto 0);
    signal d_reg_150 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln136_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_7_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_8_fu_592_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_9_fu_686_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln146_fu_781_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_161_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_161_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln124_fu_208_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_52_fu_222_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl1_fu_235_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_fu_227_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_cast_fu_243_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_51_fu_218_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln131_s_fu_275_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_264_p5 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln131_fu_286_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln_fu_253_p5 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln131_fu_296_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln131_6_fu_310_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln131_5_fu_302_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln131_4_fu_318_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln131_8_fu_346_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln131_7_fu_337_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln131_5_fu_355_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln131_4_fu_328_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln131_2_fu_365_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln131_1_fu_379_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln131_9_fu_371_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln131_6_fu_387_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln125_3_fu_407_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln136_fu_417_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln125_fu_403_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln136_fu_451_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_455_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_fu_465_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_27_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln136_13_fu_502_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln136_14_fu_519_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_505_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_13_fu_515_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_29_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_28_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_523_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_14_fu_533_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_31_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_30_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_13_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_14_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_13_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_14_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln136_15_fu_596_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln136_16_fu_613_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_599_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_15_fu_609_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_33_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_32_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_617_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_16_fu_627_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_35_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_34_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_15_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_16_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_15_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_16_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln136_17_fu_690_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln136_18_fu_707_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_693_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_17_fu_703_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_37_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_36_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_711_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_18_fu_721_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_39_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_38_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_17_fu_737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_18_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_17_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_18_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_161_ce : STD_LOGIC;
    signal grp_fu_161_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component runner_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    d_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_fu_212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                d_reg_150 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                d_reg_150 <= add_ln125_reg_845;
            end if; 
        end if;
    end process;

    h_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                h_reg_128 <= ap_const_lv3_0;
            elsif (((icmp_ln124_fu_212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                h_reg_128 <= add_ln123_reg_785;
            end if; 
        end if;
    end process;

    w_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                w_reg_139 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln125_fu_411_p2 = ap_const_lv1_1))) then 
                w_reg_139 <= add_ln124_reg_812;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln123_reg_785 <= add_ln123_fu_174_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln124_reg_812 <= add_ln124_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln125_reg_845 <= add_ln125_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln125_fu_411_p2 = ap_const_lv1_0))) then
                add_ln136_7_reg_858 <= add_ln136_7_fu_427_p2;
                add_ln136_8_reg_863 <= add_ln136_8_fu_432_p2;
                add_ln136_9_reg_868 <= add_ln136_9_fu_437_p2;
                add_ln146_reg_873 <= add_ln146_fu_442_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                empty_47_reg_793 <= empty_47_fu_186_p1;
                    empty_48_reg_800(2 downto 1) <= empty_48_fu_190_p2(2 downto 1);
                    empty_49_reg_805(2 downto 1) <= empty_49_fu_196_p2(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_fu_212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    empty_53_reg_820(7 downto 3) <= empty_53_fu_247_p2(7 downto 3);
                    sub_ln131_7_reg_830(9 downto 4) <= sub_ln131_7_fu_322_p2(9 downto 4);
                    sub_ln131_8_reg_835(9 downto 4) <= sub_ln131_8_fu_359_p2(9 downto 4);
                    sub_ln131_9_reg_840(9 downto 4) <= sub_ln131_9_fu_391_p2(9 downto 4);
                    sub_ln131_reg_825(9 downto 4) <= sub_ln131_fu_290_p2(9 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_168 <= layer_4_output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                select_ln136_7_reg_890 <= select_ln136_7_fu_585_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                select_ln136_8_reg_902 <= select_ln136_8_fu_679_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                select_ln136_reg_883 <= select_ln136_fu_493_p3;
            end if;
        end if;
    end process;
    empty_48_reg_800(0) <= '0';
    empty_49_reg_805(0) <= '1';
    empty_53_reg_820(2 downto 0) <= "000";
    sub_ln131_reg_825(3 downto 0) <= "0000";
    sub_ln131_7_reg_830(3 downto 0) <= "1000";
    sub_ln131_8_reg_835(3 downto 0) <= "0000";
    sub_ln131_9_reg_840(3 downto 0) <= "1000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln123_fu_180_p2, ap_CS_fsm_state3, icmp_ln124_fu_212_p2, ap_CS_fsm_state4, icmp_ln125_fu_411_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln123_fu_180_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln124_fu_212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln125_fu_411_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln123_fu_174_p2 <= std_logic_vector(unsigned(h_reg_128) + unsigned(ap_const_lv3_1));
    add_ln124_fu_202_p2 <= std_logic_vector(unsigned(w_reg_139) + unsigned(ap_const_lv2_1));
    add_ln125_fu_397_p2 <= std_logic_vector(unsigned(d_reg_150) + unsigned(ap_const_lv5_1));
    add_ln131_4_fu_328_p4 <= ((empty_49_reg_805 & empty_51_fu_218_p1) & ap_const_lv1_0);
    add_ln136_7_fu_427_p2 <= std_logic_vector(unsigned(sub_ln131_7_reg_830) + unsigned(zext_ln125_3_fu_407_p1));
    add_ln136_8_fu_432_p2 <= std_logic_vector(unsigned(sub_ln131_8_reg_835) + unsigned(zext_ln125_3_fu_407_p1));
    add_ln136_9_fu_437_p2 <= std_logic_vector(unsigned(sub_ln131_9_reg_840) + unsigned(zext_ln125_3_fu_407_p1));
    add_ln136_fu_417_p2 <= std_logic_vector(unsigned(sub_ln131_reg_825) + unsigned(zext_ln125_3_fu_407_p1));
    add_ln146_fu_442_p2 <= std_logic_vector(unsigned(zext_ln125_fu_403_p1) + unsigned(empty_53_reg_820));
    add_ln_fu_253_p5 <= (((empty_47_reg_793 & ap_const_lv1_0) & empty_51_fu_218_p1) & ap_const_lv1_0);
    and_ln136_13_fu_573_p2 <= (or_ln136_14_fu_567_p2 and or_ln136_13_fu_549_p2);
    and_ln136_14_fu_579_p2 <= (grp_fu_29505_p_dout0 and and_ln136_13_fu_573_p2);
    and_ln136_15_fu_667_p2 <= (or_ln136_16_fu_661_p2 and or_ln136_15_fu_643_p2);
    and_ln136_16_fu_673_p2 <= (grp_fu_29505_p_dout0 and and_ln136_15_fu_667_p2);
    and_ln136_17_fu_761_p2 <= (or_ln136_18_fu_755_p2 and or_ln136_17_fu_737_p2);
    and_ln136_18_fu_767_p2 <= (grp_fu_29505_p_dout0 and and_ln136_17_fu_761_p2);
    and_ln136_fu_487_p2 <= (or_ln136_fu_481_p2 and grp_fu_29505_p_dout0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln123_fu_180_p2)
    begin
        if ((((icmp_ln123_fu_180_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln123_fu_180_p2)
    begin
        if (((icmp_ln123_fu_180_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln136_13_fu_502_p1 <= select_ln136_reg_883;
    bitcast_ln136_14_fu_519_p1 <= reg_168;
    bitcast_ln136_15_fu_596_p1 <= select_ln136_7_reg_890;
    bitcast_ln136_16_fu_613_p1 <= reg_168;
    bitcast_ln136_17_fu_690_p1 <= select_ln136_8_reg_902;
    bitcast_ln136_18_fu_707_p1 <= reg_168;
    bitcast_ln136_fu_451_p1 <= reg_168;
    empty_47_fu_186_p1 <= h_reg_128(2 - 1 downto 0);
    empty_48_fu_190_p2 <= std_logic_vector(shift_left(unsigned(h_reg_128),to_integer(unsigned('0' & ap_const_lv3_1(3-1 downto 0)))));
    empty_49_fu_196_p2 <= (empty_48_fu_190_p2 or ap_const_lv3_1);
    empty_51_fu_218_p1 <= w_reg_139(1 - 1 downto 0);
    empty_52_fu_222_p2 <= std_logic_vector(unsigned(zext_ln124_fu_208_p1) + unsigned(empty_48_reg_800));
    empty_53_fu_247_p2 <= std_logic_vector(unsigned(p_shl_fu_227_p3) - unsigned(p_shl1_cast_fu_243_p1));
    grp_fu_161_ce <= ap_const_logic_1;

    grp_fu_161_opcode_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_161_opcode <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_161_opcode <= ap_const_lv5_4;
        else 
            grp_fu_161_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_161_p0_assign_proc : process(layer_4_output_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, select_ln136_fu_493_p3, select_ln136_7_reg_890, select_ln136_8_reg_902)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_161_p0 <= select_ln136_8_reg_902;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_161_p0 <= select_ln136_7_reg_890;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_161_p0 <= select_ln136_fu_493_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_161_p0 <= layer_4_output_q0;
        else 
            grp_fu_161_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_161_p1_assign_proc : process(layer_4_output_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_161_p1 <= layer_4_output_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_161_p1 <= ap_const_lv32_FF7FFFFF;
        else 
            grp_fu_161_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_161_p2 <= grp_fu_29505_p_dout0;
    grp_fu_29505_p_ce <= ap_const_logic_1;
    grp_fu_29505_p_din0 <= grp_fu_161_p0;
    grp_fu_29505_p_din1 <= grp_fu_161_p1;
    grp_fu_29505_p_opcode <= grp_fu_161_opcode;
    icmp_ln123_fu_180_p2 <= "1" when (h_reg_128 = ap_const_lv3_4) else "0";
    icmp_ln124_fu_212_p2 <= "1" when (w_reg_139 = ap_const_lv2_2) else "0";
    icmp_ln125_fu_411_p2 <= "1" when (d_reg_150 = ap_const_lv5_18) else "0";
    icmp_ln136_27_fu_475_p2 <= "1" when (trunc_ln136_fu_465_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_28_fu_537_p2 <= "0" when (tmp_21_fu_505_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_29_fu_543_p2 <= "1" when (trunc_ln136_13_fu_515_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_30_fu_555_p2 <= "0" when (tmp_22_fu_523_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_31_fu_561_p2 <= "1" when (trunc_ln136_14_fu_533_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_32_fu_631_p2 <= "0" when (tmp_24_fu_599_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_33_fu_637_p2 <= "1" when (trunc_ln136_15_fu_609_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_34_fu_649_p2 <= "0" when (tmp_25_fu_617_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_35_fu_655_p2 <= "1" when (trunc_ln136_16_fu_627_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_36_fu_725_p2 <= "0" when (tmp_27_fu_693_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_37_fu_731_p2 <= "1" when (trunc_ln136_17_fu_703_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_38_fu_743_p2 <= "0" when (tmp_28_fu_711_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_39_fu_749_p2 <= "1" when (trunc_ln136_18_fu_721_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_fu_469_p2 <= "0" when (tmp_fu_455_p4 = ap_const_lv8_FF) else "1";

    layer_4_output_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9, zext_ln136_fu_422_p1, zext_ln136_7_fu_447_p1, zext_ln136_8_fu_592_p1, zext_ln136_9_fu_686_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            layer_4_output_address0 <= zext_ln136_9_fu_686_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            layer_4_output_address0 <= zext_ln136_8_fu_592_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_4_output_address0 <= zext_ln136_7_fu_447_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            layer_4_output_address0 <= zext_ln136_fu_422_p1(10 - 1 downto 0);
        else 
            layer_4_output_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    layer_4_output_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            layer_4_output_ce0 <= ap_const_logic_1;
        else 
            layer_4_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln131_2_fu_365_p2 <= (ap_const_lv5_1 or add_ln131_4_fu_328_p4);
    or_ln131_fu_296_p2 <= (ap_const_lv5_1 or add_ln_fu_253_p5);
    or_ln136_13_fu_549_p2 <= (icmp_ln136_29_fu_543_p2 or icmp_ln136_28_fu_537_p2);
    or_ln136_14_fu_567_p2 <= (icmp_ln136_31_fu_561_p2 or icmp_ln136_30_fu_555_p2);
    or_ln136_15_fu_643_p2 <= (icmp_ln136_33_fu_637_p2 or icmp_ln136_32_fu_631_p2);
    or_ln136_16_fu_661_p2 <= (icmp_ln136_35_fu_655_p2 or icmp_ln136_34_fu_649_p2);
    or_ln136_17_fu_737_p2 <= (icmp_ln136_37_fu_731_p2 or icmp_ln136_36_fu_725_p2);
    or_ln136_18_fu_755_p2 <= (icmp_ln136_39_fu_749_p2 or icmp_ln136_38_fu_743_p2);
    or_ln136_fu_481_p2 <= (icmp_ln136_fu_469_p2 or icmp_ln136_27_fu_475_p2);
    output_feature_map_address0 <= zext_ln146_fu_781_p1(8 - 1 downto 0);

    output_feature_map_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_feature_map_ce0 <= ap_const_logic_1;
        else 
            output_feature_map_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_feature_map_d0 <= 
        select_ln136_8_reg_902 when (and_ln136_18_fu_767_p2(0) = '1') else 
        reg_168;

    output_feature_map_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_feature_map_we0 <= ap_const_logic_1;
        else 
            output_feature_map_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_235_p3),8));
    p_shl1_fu_235_p3 <= (empty_52_fu_222_p2 & ap_const_lv3_0);
    p_shl_fu_227_p3 <= (empty_52_fu_222_p2 & ap_const_lv5_0);
    select_ln136_7_fu_585_p3 <= 
        select_ln136_reg_883 when (and_ln136_14_fu_579_p2(0) = '1') else 
        reg_168;
    select_ln136_8_fu_679_p3 <= 
        select_ln136_7_reg_890 when (and_ln136_16_fu_673_p2(0) = '1') else 
        reg_168;
    select_ln136_fu_493_p3 <= 
        ap_const_lv32_FF7FFFFF when (and_ln136_fu_487_p2(0) = '1') else 
        reg_168;
    shl_ln131_1_fu_379_p3 <= (or_ln131_2_fu_365_p2 & ap_const_lv3_0);
    shl_ln131_5_fu_302_p3 <= (or_ln131_fu_296_p2 & ap_const_lv5_0);
    shl_ln131_6_fu_310_p3 <= (or_ln131_fu_296_p2 & ap_const_lv3_0);
    shl_ln131_7_fu_337_p4 <= ((empty_49_reg_805 & empty_51_fu_218_p1) & ap_const_lv6_0);
    shl_ln131_8_fu_346_p4 <= ((empty_49_reg_805 & empty_51_fu_218_p1) & ap_const_lv4_0);
    shl_ln131_9_fu_371_p3 <= (or_ln131_2_fu_365_p2 & ap_const_lv5_0);
    shl_ln131_s_fu_275_p5 <= (((empty_47_reg_793 & ap_const_lv1_0) & empty_51_fu_218_p1) & ap_const_lv4_0);
    shl_ln_fu_264_p5 <= (((empty_47_reg_793 & ap_const_lv1_0) & empty_51_fu_218_p1) & ap_const_lv6_0);
    sub_ln131_7_fu_322_p2 <= std_logic_vector(unsigned(shl_ln131_5_fu_302_p3) - unsigned(zext_ln131_4_fu_318_p1));
    sub_ln131_8_fu_359_p2 <= std_logic_vector(unsigned(shl_ln131_7_fu_337_p4) - unsigned(zext_ln131_5_fu_355_p1));
    sub_ln131_9_fu_391_p2 <= std_logic_vector(unsigned(shl_ln131_9_fu_371_p3) - unsigned(zext_ln131_6_fu_387_p1));
    sub_ln131_fu_290_p2 <= std_logic_vector(unsigned(shl_ln_fu_264_p5) - unsigned(zext_ln131_fu_286_p1));
    tmp_21_fu_505_p4 <= bitcast_ln136_13_fu_502_p1(30 downto 23);
    tmp_22_fu_523_p4 <= bitcast_ln136_14_fu_519_p1(30 downto 23);
    tmp_24_fu_599_p4 <= bitcast_ln136_15_fu_596_p1(30 downto 23);
    tmp_25_fu_617_p4 <= bitcast_ln136_16_fu_613_p1(30 downto 23);
    tmp_27_fu_693_p4 <= bitcast_ln136_17_fu_690_p1(30 downto 23);
    tmp_28_fu_711_p4 <= bitcast_ln136_18_fu_707_p1(30 downto 23);
    tmp_fu_455_p4 <= bitcast_ln136_fu_451_p1(30 downto 23);
    trunc_ln136_13_fu_515_p1 <= bitcast_ln136_13_fu_502_p1(23 - 1 downto 0);
    trunc_ln136_14_fu_533_p1 <= bitcast_ln136_14_fu_519_p1(23 - 1 downto 0);
    trunc_ln136_15_fu_609_p1 <= bitcast_ln136_15_fu_596_p1(23 - 1 downto 0);
    trunc_ln136_16_fu_627_p1 <= bitcast_ln136_16_fu_613_p1(23 - 1 downto 0);
    trunc_ln136_17_fu_703_p1 <= bitcast_ln136_17_fu_690_p1(23 - 1 downto 0);
    trunc_ln136_18_fu_721_p1 <= bitcast_ln136_18_fu_707_p1(23 - 1 downto 0);
    trunc_ln136_fu_465_p1 <= bitcast_ln136_fu_451_p1(23 - 1 downto 0);
    zext_ln124_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_139),3));
    zext_ln125_3_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_reg_150),10));
    zext_ln125_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_reg_150),8));
    zext_ln131_4_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln131_6_fu_310_p3),10));
    zext_ln131_5_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln131_8_fu_346_p4),10));
    zext_ln131_6_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln131_1_fu_379_p3),10));
    zext_ln131_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln131_s_fu_275_p5),10));
    zext_ln136_7_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_7_reg_858),64));
    zext_ln136_8_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_8_reg_863),64));
    zext_ln136_9_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_9_reg_868),64));
    zext_ln136_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_fu_417_p2),64));
    zext_ln146_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln146_reg_873),64));
end behav;
