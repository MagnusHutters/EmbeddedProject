-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity runner_maxPooling2D_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer_0_output_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    layer_0_output_ce0 : OUT STD_LOGIC;
    layer_0_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer_1_output_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    layer_1_output_ce0 : OUT STD_LOGIC;
    layer_1_output_we0 : OUT STD_LOGIC;
    layer_1_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_29505_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_29505_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_29505_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_29505_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_29505_p_ce : OUT STD_LOGIC );
end;


architecture behav of runner_maxPooling2D_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_FF7FFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111011111111111111111111111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln123_fu_180_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln123_reg_881 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_30_fu_216_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_30_reg_889 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln123_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_cast_fu_252_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_32_cast_reg_894 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_33_fu_286_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_33_reg_899 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln124_fu_292_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln124_reg_904 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_37_fu_353_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_37_reg_912 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln124_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln131_fu_384_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln131_reg_917 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln131_1_fu_416_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln131_1_reg_922 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln131_2_fu_451_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln131_2_reg_927 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln131_3_fu_487_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln131_3_reg_932 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln125_fu_493_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln125_reg_937 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln125_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln136_1_fu_523_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln136_1_reg_950 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln136_2_fu_528_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln136_2_reg_955 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln136_3_fu_533_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln136_3_reg_960 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln146_fu_538_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln146_reg_965 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln136_fu_589_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_reg_975 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_1_fu_681_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_1_reg_982 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal select_ln136_2_fu_775_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_2_reg_994 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal h_reg_134 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_145 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_reg_156 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln136_fu_518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_1_fu_543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_2_fu_688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_3_fu_782_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln146_fu_877_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_167_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_167_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_204_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_212_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln123_fu_186_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_fu_222_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_fu_196_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl13_cast_fu_230_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl14_cast_fu_234_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_31_fu_238_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_fu_244_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_32_fu_256_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl7_fu_262_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl8_fu_274_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl7_cast_fu_270_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl8_cast_fu_282_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_fu_308_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln124_fu_298_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_35_fu_324_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_36_fu_329_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_fu_341_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_fu_333_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl2_cast_fu_349_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_cast10_fu_320_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln131_fu_359_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln131_fu_364_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln_fu_368_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln131_1_fu_376_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln131_fu_390_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln131_1_fu_396_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln131_2_fu_400_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln131_3_fu_408_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_cast11_fu_316_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln131_1_fu_422_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln131_2_fu_427_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln131_5_fu_439_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln131_4_fu_431_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln131_fu_447_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln131_1_fu_457_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln131_3_fu_463_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln131_7_fu_475_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln131_6_fu_467_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln131_1_fu_483_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln125_1_fu_503_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln136_fu_513_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln125_fu_499_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln136_fu_547_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_551_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_fu_561_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_1_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln136_1_fu_598_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln136_2_fu_615_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_601_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_1_fu_611_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_3_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_2_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_619_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_2_fu_629_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_5_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_4_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_1_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_2_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_1_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_2_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln136_3_fu_692_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln136_4_fu_709_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_695_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_3_fu_705_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_7_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_6_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_713_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_4_fu_723_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_9_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_8_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_3_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_4_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_3_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_4_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln136_5_fu_786_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln136_6_fu_803_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_789_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_5_fu_799_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_11_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_10_fu_821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_807_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_6_fu_817_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_13_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_12_fu_839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_5_fu_833_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_6_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_5_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_6_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_167_ce : STD_LOGIC;
    signal grp_fu_167_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component runner_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    d_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_fu_302_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                d_reg_156 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                d_reg_156 <= add_ln125_reg_937;
            end if; 
        end if;
    end process;

    h_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                h_reg_134 <= ap_const_lv5_0;
            elsif (((icmp_ln124_fu_302_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                h_reg_134 <= add_ln123_reg_881;
            end if; 
        end if;
    end process;

    w_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_fu_190_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                w_reg_145 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln125_fu_507_p2 = ap_const_lv1_1))) then 
                w_reg_145 <= add_ln124_reg_904;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln123_reg_881 <= add_ln123_fu_180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln124_reg_904 <= add_ln124_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln125_reg_937 <= add_ln125_fu_493_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln125_fu_507_p2 = ap_const_lv1_0))) then
                add_ln136_1_reg_950 <= add_ln136_1_fu_523_p2;
                add_ln136_2_reg_955 <= add_ln136_2_fu_528_p2;
                add_ln136_3_reg_960 <= add_ln136_3_fu_533_p2;
                add_ln146_reg_965 <= add_ln146_fu_538_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_fu_190_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                empty_30_reg_889 <= empty_30_fu_216_p2;
                    empty_33_reg_899(11 downto 2) <= empty_33_fu_286_p2(11 downto 2);
                    tmp_32_cast_reg_894(12 downto 2) <= tmp_32_cast_fu_252_p1(12 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_fu_302_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    empty_37_reg_912(11 downto 1) <= empty_37_fu_353_p2(11 downto 1);
                    sub_ln131_1_reg_922(13 downto 2) <= sub_ln131_1_fu_416_p2(13 downto 2);
                    sub_ln131_2_reg_927(13 downto 2) <= sub_ln131_2_fu_451_p2(13 downto 2);
                    sub_ln131_3_reg_932(13 downto 2) <= sub_ln131_3_fu_487_p2(13 downto 2);
                    sub_ln131_reg_917(13 downto 2) <= sub_ln131_fu_384_p2(13 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_174 <= layer_0_output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                select_ln136_1_reg_982 <= select_ln136_1_fu_681_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                select_ln136_2_reg_994 <= select_ln136_2_fu_775_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                select_ln136_reg_975 <= select_ln136_fu_589_p3;
            end if;
        end if;
    end process;
    tmp_32_cast_reg_894(1 downto 0) <= "00";
    empty_33_reg_899(1 downto 0) <= "10";
    empty_37_reg_912(0) <= '0';
    sub_ln131_reg_917(1 downto 0) <= "00";
    sub_ln131_1_reg_922(1 downto 0) <= "10";
    sub_ln131_2_reg_927(1 downto 0) <= "00";
    sub_ln131_3_reg_932(1 downto 0) <= "10";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln123_fu_190_p2, ap_CS_fsm_state3, icmp_ln124_fu_302_p2, ap_CS_fsm_state4, icmp_ln125_fu_507_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln123_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln124_fu_302_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln125_fu_507_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln123_fu_180_p2 <= std_logic_vector(unsigned(h_reg_134) + unsigned(ap_const_lv5_1));
    add_ln124_fu_292_p2 <= std_logic_vector(unsigned(w_reg_145) + unsigned(ap_const_lv4_1));
    add_ln125_fu_493_p2 <= std_logic_vector(unsigned(d_reg_156) + unsigned(ap_const_lv3_1));
    add_ln131_1_fu_422_p2 <= std_logic_vector(unsigned(empty_33_reg_899) + unsigned(p_cast11_fu_316_p1));
    add_ln131_fu_359_p2 <= std_logic_vector(signed(tmp_32_cast_reg_894) + signed(p_cast10_fu_320_p1));
    add_ln136_1_fu_523_p2 <= std_logic_vector(unsigned(sub_ln131_1_reg_922) + unsigned(zext_ln125_1_fu_503_p1));
    add_ln136_2_fu_528_p2 <= std_logic_vector(unsigned(sub_ln131_2_reg_927) + unsigned(zext_ln125_1_fu_503_p1));
    add_ln136_3_fu_533_p2 <= std_logic_vector(unsigned(sub_ln131_3_reg_932) + unsigned(zext_ln125_1_fu_503_p1));
    add_ln136_fu_513_p2 <= std_logic_vector(unsigned(sub_ln131_reg_917) + unsigned(zext_ln125_1_fu_503_p1));
    add_ln146_fu_538_p2 <= std_logic_vector(unsigned(zext_ln125_fu_499_p1) + unsigned(empty_37_reg_912));
    and_ln136_1_fu_669_p2 <= (or_ln136_2_fu_663_p2 and or_ln136_1_fu_645_p2);
    and_ln136_2_fu_675_p2 <= (grp_fu_29505_p_dout0 and and_ln136_1_fu_669_p2);
    and_ln136_3_fu_763_p2 <= (or_ln136_4_fu_757_p2 and or_ln136_3_fu_739_p2);
    and_ln136_4_fu_769_p2 <= (grp_fu_29505_p_dout0 and and_ln136_3_fu_763_p2);
    and_ln136_5_fu_857_p2 <= (or_ln136_6_fu_851_p2 and or_ln136_5_fu_833_p2);
    and_ln136_6_fu_863_p2 <= (grp_fu_29505_p_dout0 and and_ln136_5_fu_857_p2);
    and_ln136_fu_583_p2 <= (or_ln136_fu_577_p2 and grp_fu_29505_p_dout0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln123_fu_190_p2)
    begin
        if ((((icmp_ln123_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln123_fu_190_p2)
    begin
        if (((icmp_ln123_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln136_1_fu_598_p1 <= select_ln136_reg_975;
    bitcast_ln136_2_fu_615_p1 <= reg_174;
    bitcast_ln136_3_fu_692_p1 <= select_ln136_1_reg_982;
    bitcast_ln136_4_fu_709_p1 <= reg_174;
    bitcast_ln136_5_fu_786_p1 <= select_ln136_2_reg_994;
    bitcast_ln136_6_fu_803_p1 <= reg_174;
    bitcast_ln136_fu_547_p1 <= reg_174;
    empty_30_fu_216_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_212_p1) - unsigned(zext_ln123_fu_186_p1));
    empty_31_fu_238_p2 <= std_logic_vector(unsigned(p_shl13_cast_fu_230_p1) - unsigned(p_shl14_cast_fu_234_p1));
    empty_32_fu_256_p2 <= (tmp_12_fu_196_p3 or ap_const_lv6_1);
    empty_33_fu_286_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_270_p1) - unsigned(p_shl8_cast_fu_282_p1));
    empty_35_fu_324_p2 <= std_logic_vector(unsigned(zext_ln124_fu_298_p1) + unsigned(empty_30_reg_889));
    empty_36_fu_329_p1 <= empty_35_fu_324_p2(9 - 1 downto 0);
    empty_37_fu_353_p2 <= std_logic_vector(unsigned(p_shl1_fu_333_p3) - unsigned(p_shl2_cast_fu_349_p1));
    grp_fu_167_ce <= ap_const_logic_1;

    grp_fu_167_opcode_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_167_opcode <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_167_opcode <= ap_const_lv5_4;
        else 
            grp_fu_167_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_167_p0_assign_proc : process(layer_0_output_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, select_ln136_fu_589_p3, select_ln136_1_reg_982, select_ln136_2_reg_994)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_167_p0 <= select_ln136_2_reg_994;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_167_p0 <= select_ln136_1_reg_982;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_167_p0 <= select_ln136_fu_589_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_167_p0 <= layer_0_output_q0;
        else 
            grp_fu_167_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_167_p1_assign_proc : process(layer_0_output_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_167_p1 <= layer_0_output_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_167_p1 <= ap_const_lv32_FF7FFFFF;
        else 
            grp_fu_167_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_167_p2 <= grp_fu_29505_p_dout0;
    grp_fu_29505_p_ce <= ap_const_logic_1;
    grp_fu_29505_p_din0 <= grp_fu_167_p0;
    grp_fu_29505_p_din1 <= grp_fu_167_p1;
    grp_fu_29505_p_opcode <= grp_fu_167_opcode;
    icmp_ln123_fu_190_p2 <= "1" when (h_reg_134 = ap_const_lv5_17) else "0";
    icmp_ln124_fu_302_p2 <= "1" when (w_reg_145 = ap_const_lv4_F) else "0";
    icmp_ln125_fu_507_p2 <= "1" when (d_reg_156 = ap_const_lv3_6) else "0";
    icmp_ln136_10_fu_821_p2 <= "0" when (tmp_9_fu_789_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_11_fu_827_p2 <= "1" when (trunc_ln136_5_fu_799_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_12_fu_839_p2 <= "0" when (tmp_10_fu_807_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_13_fu_845_p2 <= "1" when (trunc_ln136_6_fu_817_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_1_fu_571_p2 <= "1" when (trunc_ln136_fu_561_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_2_fu_633_p2 <= "0" when (tmp_3_fu_601_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_3_fu_639_p2 <= "1" when (trunc_ln136_1_fu_611_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_4_fu_651_p2 <= "0" when (tmp_4_fu_619_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_5_fu_657_p2 <= "1" when (trunc_ln136_2_fu_629_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_6_fu_727_p2 <= "0" when (tmp_6_fu_695_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_7_fu_733_p2 <= "1" when (trunc_ln136_3_fu_705_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_8_fu_745_p2 <= "0" when (tmp_7_fu_713_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_9_fu_751_p2 <= "1" when (trunc_ln136_4_fu_723_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_fu_565_p2 <= "0" when (tmp_fu_551_p4 = ap_const_lv8_FF) else "1";

    layer_0_output_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9, zext_ln136_fu_518_p1, zext_ln136_1_fu_543_p1, zext_ln136_2_fu_688_p1, zext_ln136_3_fu_782_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            layer_0_output_address0 <= zext_ln136_3_fu_782_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            layer_0_output_address0 <= zext_ln136_2_fu_688_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_0_output_address0 <= zext_ln136_1_fu_543_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            layer_0_output_address0 <= zext_ln136_fu_518_p1(14 - 1 downto 0);
        else 
            layer_0_output_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    layer_0_output_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            layer_0_output_ce0 <= ap_const_logic_1;
        else 
            layer_0_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_1_output_address0 <= zext_ln146_fu_877_p1(12 - 1 downto 0);

    layer_1_output_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            layer_1_output_ce0 <= ap_const_logic_1;
        else 
            layer_1_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_1_output_d0 <= 
        select_ln136_2_reg_994 when (and_ln136_6_fu_863_p2(0) = '1') else 
        reg_174;

    layer_1_output_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            layer_1_output_we0 <= ap_const_logic_1;
        else 
            layer_1_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln131_1_fu_457_p2 <= (ap_const_lv12_1 or add_ln131_1_fu_422_p2);
    or_ln131_fu_390_p2 <= (ap_const_lv13_1 or add_ln131_fu_359_p2);
    or_ln136_1_fu_645_p2 <= (icmp_ln136_3_fu_639_p2 or icmp_ln136_2_fu_633_p2);
    or_ln136_2_fu_663_p2 <= (icmp_ln136_5_fu_657_p2 or icmp_ln136_4_fu_651_p2);
    or_ln136_3_fu_739_p2 <= (icmp_ln136_7_fu_733_p2 or icmp_ln136_6_fu_727_p2);
    or_ln136_4_fu_757_p2 <= (icmp_ln136_9_fu_751_p2 or icmp_ln136_8_fu_745_p2);
    or_ln136_5_fu_833_p2 <= (icmp_ln136_11_fu_827_p2 or icmp_ln136_10_fu_821_p2);
    or_ln136_6_fu_851_p2 <= (icmp_ln136_13_fu_845_p2 or icmp_ln136_12_fu_839_p2);
    or_ln136_fu_577_p2 <= (icmp_ln136_fu_565_p2 or icmp_ln136_1_fu_571_p2);
    p_cast10_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_308_p3),13));
    p_cast11_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_308_p3),12));
    p_shl13_cast_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_222_p3),11));
    p_shl14_cast_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_196_p3),11));
    p_shl1_fu_333_p3 <= (empty_36_fu_329_p1 & ap_const_lv3_0);
        p_shl2_cast_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl2_fu_341_p3),12));

    p_shl2_fu_341_p3 <= (empty_35_fu_324_p2 & ap_const_lv1_0);
    p_shl3_fu_222_p3 <= (h_reg_134 & ap_const_lv5_0);
    p_shl7_cast_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl7_fu_262_p3),12));
    p_shl7_fu_262_p3 <= (empty_32_fu_256_p2 & ap_const_lv5_0);
    p_shl8_cast_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_fu_274_p3),12));
    p_shl8_fu_274_p3 <= (empty_32_fu_256_p2 & ap_const_lv1_0);
    p_shl_cast_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_204_p3),10));
    p_shl_fu_204_p3 <= (h_reg_134 & ap_const_lv4_0);
    select_ln136_1_fu_681_p3 <= 
        select_ln136_reg_975 when (and_ln136_2_fu_675_p2(0) = '1') else 
        reg_174;
    select_ln136_2_fu_775_p3 <= 
        select_ln136_1_reg_982 when (and_ln136_4_fu_769_p2(0) = '1') else 
        reg_174;
    select_ln136_fu_589_p3 <= 
        ap_const_lv32_FF7FFFFF when (and_ln136_fu_583_p2(0) = '1') else 
        reg_174;
        sext_ln131_1_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln131_7_fu_475_p3),14));

        sext_ln131_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln131_5_fu_439_p3),14));

    shl_ln131_1_fu_376_p3 <= (add_ln131_fu_359_p2 & ap_const_lv1_0);
    shl_ln131_2_fu_400_p3 <= (trunc_ln131_1_fu_396_p1 & ap_const_lv3_0);
    shl_ln131_3_fu_408_p3 <= (or_ln131_fu_390_p2 & ap_const_lv1_0);
    shl_ln131_4_fu_431_p3 <= (trunc_ln131_2_fu_427_p1 & ap_const_lv3_0);
    shl_ln131_5_fu_439_p3 <= (add_ln131_1_fu_422_p2 & ap_const_lv1_0);
    shl_ln131_6_fu_467_p3 <= (trunc_ln131_3_fu_463_p1 & ap_const_lv3_0);
    shl_ln131_7_fu_475_p3 <= (or_ln131_1_fu_457_p2 & ap_const_lv1_0);
    shl_ln_fu_368_p3 <= (trunc_ln131_fu_364_p1 & ap_const_lv3_0);
    sub_ln131_1_fu_416_p2 <= std_logic_vector(unsigned(shl_ln131_2_fu_400_p3) - unsigned(shl_ln131_3_fu_408_p3));
    sub_ln131_2_fu_451_p2 <= std_logic_vector(unsigned(shl_ln131_4_fu_431_p3) - unsigned(sext_ln131_fu_447_p1));
    sub_ln131_3_fu_487_p2 <= std_logic_vector(unsigned(shl_ln131_6_fu_467_p3) - unsigned(sext_ln131_1_fu_483_p1));
    sub_ln131_fu_384_p2 <= std_logic_vector(unsigned(shl_ln_fu_368_p3) - unsigned(shl_ln131_1_fu_376_p3));
    tmp_10_fu_807_p4 <= bitcast_ln136_6_fu_803_p1(30 downto 23);
    tmp_12_fu_196_p3 <= (h_reg_134 & ap_const_lv1_0);
    tmp_13_fu_244_p3 <= (empty_31_fu_238_p2 & ap_const_lv1_0);
    tmp_14_fu_308_p3 <= (w_reg_145 & ap_const_lv1_0);
        tmp_32_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_fu_244_p3),13));

    tmp_3_fu_601_p4 <= bitcast_ln136_1_fu_598_p1(30 downto 23);
    tmp_4_fu_619_p4 <= bitcast_ln136_2_fu_615_p1(30 downto 23);
    tmp_6_fu_695_p4 <= bitcast_ln136_3_fu_692_p1(30 downto 23);
    tmp_7_fu_713_p4 <= bitcast_ln136_4_fu_709_p1(30 downto 23);
    tmp_9_fu_789_p4 <= bitcast_ln136_5_fu_786_p1(30 downto 23);
    tmp_fu_551_p4 <= bitcast_ln136_fu_547_p1(30 downto 23);
    trunc_ln131_1_fu_396_p1 <= or_ln131_fu_390_p2(11 - 1 downto 0);
    trunc_ln131_2_fu_427_p1 <= add_ln131_1_fu_422_p2(11 - 1 downto 0);
    trunc_ln131_3_fu_463_p1 <= or_ln131_1_fu_457_p2(11 - 1 downto 0);
    trunc_ln131_fu_364_p1 <= add_ln131_fu_359_p2(11 - 1 downto 0);
    trunc_ln136_1_fu_611_p1 <= bitcast_ln136_1_fu_598_p1(23 - 1 downto 0);
    trunc_ln136_2_fu_629_p1 <= bitcast_ln136_2_fu_615_p1(23 - 1 downto 0);
    trunc_ln136_3_fu_705_p1 <= bitcast_ln136_3_fu_692_p1(23 - 1 downto 0);
    trunc_ln136_4_fu_723_p1 <= bitcast_ln136_4_fu_709_p1(23 - 1 downto 0);
    trunc_ln136_5_fu_799_p1 <= bitcast_ln136_5_fu_786_p1(23 - 1 downto 0);
    trunc_ln136_6_fu_817_p1 <= bitcast_ln136_6_fu_803_p1(23 - 1 downto 0);
    trunc_ln136_fu_561_p1 <= bitcast_ln136_fu_547_p1(23 - 1 downto 0);
    zext_ln123_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_134),10));
    zext_ln124_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_145),10));
    zext_ln125_1_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_reg_156),14));
    zext_ln125_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_reg_156),12));
    zext_ln136_1_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_1_reg_950),64));
    zext_ln136_2_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_2_reg_955),64));
    zext_ln136_3_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_3_reg_960),64));
    zext_ln136_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_fu_513_p2),64));
    zext_ln146_fu_877_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln146_reg_965),64));
end behav;
