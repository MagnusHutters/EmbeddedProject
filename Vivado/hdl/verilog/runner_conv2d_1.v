// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module runner_conv2d_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inputs_address0,
        inputs_ce0,
        inputs_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        grp_fu_49873_p_din0,
        grp_fu_49873_p_din1,
        grp_fu_49873_p_opcode,
        grp_fu_49873_p_dout0,
        grp_fu_49873_p_ce,
        grp_fu_49877_p_din0,
        grp_fu_49877_p_din1,
        grp_fu_49877_p_dout0,
        grp_fu_49877_p_ce,
        grp_fu_29505_p_din0,
        grp_fu_29505_p_din1,
        grp_fu_29505_p_opcode,
        grp_fu_29505_p_dout0,
        grp_fu_29505_p_ce
);

parameter    ap_ST_fsm_state1 = 95'd1;
parameter    ap_ST_fsm_state2 = 95'd2;
parameter    ap_ST_fsm_state3 = 95'd4;
parameter    ap_ST_fsm_state4 = 95'd8;
parameter    ap_ST_fsm_state5 = 95'd16;
parameter    ap_ST_fsm_state6 = 95'd32;
parameter    ap_ST_fsm_state7 = 95'd64;
parameter    ap_ST_fsm_state8 = 95'd128;
parameter    ap_ST_fsm_state9 = 95'd256;
parameter    ap_ST_fsm_state10 = 95'd512;
parameter    ap_ST_fsm_state11 = 95'd1024;
parameter    ap_ST_fsm_state12 = 95'd2048;
parameter    ap_ST_fsm_state13 = 95'd4096;
parameter    ap_ST_fsm_state14 = 95'd8192;
parameter    ap_ST_fsm_state15 = 95'd16384;
parameter    ap_ST_fsm_state16 = 95'd32768;
parameter    ap_ST_fsm_state17 = 95'd65536;
parameter    ap_ST_fsm_state18 = 95'd131072;
parameter    ap_ST_fsm_state19 = 95'd262144;
parameter    ap_ST_fsm_state20 = 95'd524288;
parameter    ap_ST_fsm_state21 = 95'd1048576;
parameter    ap_ST_fsm_state22 = 95'd2097152;
parameter    ap_ST_fsm_state23 = 95'd4194304;
parameter    ap_ST_fsm_state24 = 95'd8388608;
parameter    ap_ST_fsm_state25 = 95'd16777216;
parameter    ap_ST_fsm_state26 = 95'd33554432;
parameter    ap_ST_fsm_state27 = 95'd67108864;
parameter    ap_ST_fsm_state28 = 95'd134217728;
parameter    ap_ST_fsm_state29 = 95'd268435456;
parameter    ap_ST_fsm_state30 = 95'd536870912;
parameter    ap_ST_fsm_state31 = 95'd1073741824;
parameter    ap_ST_fsm_state32 = 95'd2147483648;
parameter    ap_ST_fsm_state33 = 95'd4294967296;
parameter    ap_ST_fsm_state34 = 95'd8589934592;
parameter    ap_ST_fsm_state35 = 95'd17179869184;
parameter    ap_ST_fsm_state36 = 95'd34359738368;
parameter    ap_ST_fsm_state37 = 95'd68719476736;
parameter    ap_ST_fsm_state38 = 95'd137438953472;
parameter    ap_ST_fsm_state39 = 95'd274877906944;
parameter    ap_ST_fsm_state40 = 95'd549755813888;
parameter    ap_ST_fsm_state41 = 95'd1099511627776;
parameter    ap_ST_fsm_state42 = 95'd2199023255552;
parameter    ap_ST_fsm_state43 = 95'd4398046511104;
parameter    ap_ST_fsm_state44 = 95'd8796093022208;
parameter    ap_ST_fsm_state45 = 95'd17592186044416;
parameter    ap_ST_fsm_state46 = 95'd35184372088832;
parameter    ap_ST_fsm_state47 = 95'd70368744177664;
parameter    ap_ST_fsm_state48 = 95'd140737488355328;
parameter    ap_ST_fsm_state49 = 95'd281474976710656;
parameter    ap_ST_fsm_state50 = 95'd562949953421312;
parameter    ap_ST_fsm_state51 = 95'd1125899906842624;
parameter    ap_ST_fsm_state52 = 95'd2251799813685248;
parameter    ap_ST_fsm_state53 = 95'd4503599627370496;
parameter    ap_ST_fsm_state54 = 95'd9007199254740992;
parameter    ap_ST_fsm_state55 = 95'd18014398509481984;
parameter    ap_ST_fsm_state56 = 95'd36028797018963968;
parameter    ap_ST_fsm_state57 = 95'd72057594037927936;
parameter    ap_ST_fsm_state58 = 95'd144115188075855872;
parameter    ap_ST_fsm_state59 = 95'd288230376151711744;
parameter    ap_ST_fsm_state60 = 95'd576460752303423488;
parameter    ap_ST_fsm_state61 = 95'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 95'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 95'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 95'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 95'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 95'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 95'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 95'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 95'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 95'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 95'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 95'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 95'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 95'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 95'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 95'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 95'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 95'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 95'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 95'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 95'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 95'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 95'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 95'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 95'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 95'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 95'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 95'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 95'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 95'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 95'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 95'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 95'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 95'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 95'd19807040628566084398385987584;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] inputs_address0;
output   inputs_ce0;
input  [31:0] inputs_q0;
output  [11:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;
output  [31:0] grp_fu_49873_p_din0;
output  [31:0] grp_fu_49873_p_din1;
output  [1:0] grp_fu_49873_p_opcode;
input  [31:0] grp_fu_49873_p_dout0;
output   grp_fu_49873_p_ce;
output  [31:0] grp_fu_49877_p_din0;
output  [31:0] grp_fu_49877_p_din1;
input  [31:0] grp_fu_49877_p_dout0;
output   grp_fu_49877_p_ce;
output  [31:0] grp_fu_29505_p_din0;
output  [31:0] grp_fu_29505_p_din1;
output  [4:0] grp_fu_29505_p_opcode;
input  [0:0] grp_fu_29505_p_dout0;
output   grp_fu_29505_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] inputs_address0;
reg inputs_ce0;
reg[11:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [94:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] layer2_weights_address0;
reg    layer2_weights_ce0;
wire   [31:0] layer2_weights_q0;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state84;
wire   [31:0] grp_fu_570_p2;
reg   [31:0] reg_592;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state87;
wire   [4:0] add_ln66_fu_597_p2;
reg   [4:0] add_ln66_reg_1644;
wire    ap_CS_fsm_state2;
wire   [10:0] next_mul2_fu_603_p2;
reg   [10:0] next_mul2_reg_1649;
wire   [11:0] next_mul_fu_609_p2;
reg   [11:0] next_mul_reg_1657;
wire   [10:0] empty_82_fu_621_p2;
reg   [10:0] empty_82_reg_1665;
wire   [0:0] icmp_ln66_fu_615_p2;
wire   [3:0] empty_83_fu_627_p2;
reg   [3:0] empty_83_reg_1672;
wire    ap_CS_fsm_state3;
wire  signed [11:0] p_cast52_fu_669_p1;
reg  signed [11:0] p_cast52_reg_1680;
wire   [0:0] icmp_ln67_fu_633_p2;
wire  signed [10:0] p_cast38_fu_703_p1;
reg  signed [10:0] p_cast38_reg_1685;
wire  signed [11:0] p_cast28_fu_707_p1;
reg  signed [11:0] p_cast28_reg_1690;
wire  signed [10:0] p_cast41_fu_741_p1;
reg  signed [10:0] p_cast41_reg_1696;
wire  signed [11:0] p_cast31_fu_745_p1;
reg  signed [11:0] p_cast31_reg_1701;
wire  signed [10:0] sext_ln68_fu_785_p1;
reg  signed [10:0] sext_ln68_reg_1707;
wire  signed [11:0] sext_ln68_1_fu_789_p1;
reg  signed [11:0] sext_ln68_1_reg_1712;
wire   [3:0] add_ln68_fu_793_p2;
reg   [3:0] add_ln68_reg_1718;
wire    ap_CS_fsm_state4;
wire   [11:0] zext_ln68_fu_799_p1;
reg   [11:0] zext_ln68_reg_1723;
wire   [9:0] zext_ln68_5_fu_803_p1;
reg   [9:0] zext_ln68_5_reg_1728;
wire   [8:0] zext_ln68_6_fu_807_p1;
reg   [8:0] zext_ln68_6_reg_1735;
wire   [7:0] zext_ln68_7_fu_811_p1;
reg   [7:0] zext_ln68_7_reg_1742;
wire   [2:0] add_ln73_fu_821_p2;
reg   [2:0] add_ln73_reg_1752;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln73_fu_831_p2;
wire   [0:0] icmp_ln90_fu_897_p2;
reg   [0:0] icmp_ln90_reg_1770;
wire   [31:0] grp_fu_903_p3;
wire    ap_CS_fsm_state12;
wire   [2:0] add_ln73_1_fu_910_p2;
reg   [2:0] add_ln73_1_reg_1780;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln73_1_fu_920_p2;
wire   [31:0] grp_fu_558_p2;
wire    ap_CS_fsm_state22;
wire   [2:0] add_ln73_2_fu_992_p2;
reg   [2:0] add_ln73_2_reg_1803;
wire    ap_CS_fsm_state23;
wire   [0:0] icmp_ln73_2_fu_1002_p2;
wire    ap_CS_fsm_state32;
wire   [2:0] add_ln73_3_fu_1074_p2;
reg   [2:0] add_ln73_3_reg_1826;
wire    ap_CS_fsm_state33;
wire   [0:0] icmp_ln73_3_fu_1084_p2;
wire    ap_CS_fsm_state42;
wire   [2:0] add_ln73_4_fu_1155_p2;
reg   [2:0] add_ln73_4_reg_1849;
wire    ap_CS_fsm_state43;
wire   [0:0] icmp_ln73_4_fu_1165_p2;
wire    ap_CS_fsm_state52;
wire   [2:0] add_ln73_5_fu_1236_p2;
reg   [2:0] add_ln73_5_reg_1872;
wire    ap_CS_fsm_state53;
wire   [0:0] icmp_ln73_5_fu_1246_p2;
wire    ap_CS_fsm_state62;
wire   [2:0] add_ln73_6_fu_1317_p2;
reg   [2:0] add_ln73_6_reg_1895;
wire    ap_CS_fsm_state63;
wire   [0:0] icmp_ln73_6_fu_1327_p2;
wire    ap_CS_fsm_state72;
wire   [2:0] add_ln73_7_fu_1402_p2;
reg   [2:0] add_ln73_7_reg_1918;
wire    ap_CS_fsm_state73;
wire   [0:0] icmp_ln73_7_fu_1412_p2;
wire    ap_CS_fsm_state82;
wire   [2:0] add_ln73_8_fu_1487_p2;
reg   [2:0] add_ln73_8_reg_1941;
wire    ap_CS_fsm_state83;
wire   [0:0] icmp_ln73_8_fu_1497_p2;
wire    ap_CS_fsm_state92;
wire   [11:0] add_ln110_fu_1587_p2;
reg   [11:0] add_ln110_reg_1964;
wire    ap_CS_fsm_state93;
reg   [11:0] output_addr_reg_1972;
wire   [0:0] icmp_ln110_fu_1598_p2;
wire    ap_CS_fsm_state94;
wire   [0:0] icmp_ln111_fu_1622_p2;
reg   [0:0] icmp_ln111_reg_1982;
wire   [0:0] icmp_ln111_2_fu_1628_p2;
reg   [0:0] icmp_ln111_2_reg_1987;
reg   [4:0] x_reg_290;
reg   [11:0] phi_mul_reg_301;
reg   [10:0] phi_mul1_reg_313;
reg   [3:0] y_reg_325;
wire   [0:0] icmp_ln68_fu_815_p2;
reg   [3:0] z_reg_336;
reg   [2:0] k_0_0_reg_347;
reg   [31:0] sum_2_0_0_reg_358;
reg   [2:0] k_0_1_reg_370;
reg   [31:0] sum_2_0_1_reg_381;
reg   [2:0] k_0_2_reg_392;
reg   [31:0] sum_2_0_2_reg_403;
reg   [2:0] k_1_0_reg_414;
reg   [31:0] sum_2_1_0_reg_425;
reg   [2:0] k_1_1_reg_436;
reg   [31:0] sum_2_1_1_reg_447;
reg   [2:0] k_1_2_reg_458;
reg   [31:0] sum_2_1_2_reg_469;
reg   [2:0] k_2_0_reg_480;
reg   [31:0] sum_2_2_0_reg_491;
reg   [2:0] k_2_1_reg_502;
reg   [31:0] sum_2_2_1_reg_513;
reg   [2:0] k_2_2_reg_524;
reg   [31:0] sum_2_2_2_reg_535;
reg   [11:0] i_reg_547;
wire    ap_CS_fsm_state95;
wire  signed [63:0] sext_ln78_fu_872_p1;
wire  signed [63:0] sext_ln84_fu_892_p1;
wire   [63:0] zext_ln78_fu_967_p1;
wire  signed [63:0] sext_ln84_1_fu_987_p1;
wire   [63:0] zext_ln78_9_fu_1049_p1;
wire  signed [63:0] sext_ln84_2_fu_1069_p1;
wire   [63:0] zext_ln78_10_fu_1135_p1;
wire   [63:0] zext_ln84_11_fu_1150_p1;
wire   [63:0] zext_ln78_11_fu_1216_p1;
wire   [63:0] zext_ln84_12_fu_1231_p1;
wire   [63:0] zext_ln78_12_fu_1297_p1;
wire   [63:0] zext_ln84_13_fu_1312_p1;
wire   [63:0] zext_ln78_13_fu_1378_p1;
wire   [63:0] zext_ln84_15_fu_1397_p1;
wire   [63:0] zext_ln78_14_fu_1463_p1;
wire   [63:0] zext_ln84_17_fu_1482_p1;
wire   [63:0] zext_ln78_15_fu_1548_p1;
wire   [63:0] zext_ln84_19_fu_1567_p1;
wire   [63:0] zext_ln104_fu_1582_p1;
wire   [63:0] zext_ln110_fu_1593_p1;
wire   [0:0] and_ln111_fu_1638_p2;
reg   [31:0] grp_fu_558_p0;
wire   [31:0] grp_fu_558_p1;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state88;
wire   [31:0] grp_fu_570_p0;
wire   [31:0] grp_fu_570_p1;
wire   [31:0] grp_fu_576_p0;
wire   [31:0] grp_fu_576_p1;
wire   [7:0] p_shl_fu_639_p3;
wire   [5:0] p_shl1_fu_651_p3;
wire   [8:0] p_shl_cast_fu_647_p1;
wire   [8:0] p_shl1_cast_fu_659_p1;
wire   [8:0] empty_85_fu_663_p2;
wire   [6:0] p_shl2_fu_673_p3;
wire   [4:0] p_shl3_fu_685_p3;
wire   [7:0] p_shl2_cast_fu_681_p1;
wire   [7:0] p_shl3_cast_fu_693_p1;
wire  signed [7:0] empty_86_fu_697_p2;
wire   [6:0] p_shl6_fu_711_p3;
wire   [4:0] p_shl7_fu_723_p3;
wire   [7:0] p_shl6_cast_fu_719_p1;
wire   [7:0] p_shl7_cast_fu_731_p1;
wire  signed [7:0] empty_87_fu_735_p2;
wire   [3:0] empty_88_fu_749_p2;
wire   [6:0] p_shl4_fu_755_p3;
wire   [4:0] p_shl5_fu_767_p3;
wire   [7:0] p_shl10_cast_fu_763_p1;
wire   [7:0] p_shl11_cast_fu_775_p1;
wire  signed [7:0] empty_89_fu_779_p2;
wire   [6:0] shl_ln_fu_837_p3;
wire   [4:0] shl_ln76_1_fu_849_p3;
wire   [7:0] zext_ln76_fu_845_p1;
wire   [7:0] zext_ln76_1_fu_857_p1;
wire   [7:0] sub_ln76_fu_861_p2;
wire   [7:0] add_ln78_fu_867_p2;
wire   [10:0] zext_ln73_fu_827_p1;
wire   [10:0] add_ln84_17_fu_877_p2;
wire   [11:0] zext_ln84_fu_883_p1;
wire   [11:0] add_ln84_fu_887_p2;
wire    ap_CS_fsm_state10;
wire   [6:0] shl_ln76_2_fu_926_p3;
wire   [4:0] shl_ln76_3_fu_938_p3;
wire   [7:0] zext_ln76_2_fu_934_p1;
wire   [7:0] zext_ln76_3_fu_946_p1;
wire   [7:0] sub_ln76_1_fu_950_p2;
wire   [7:0] add_ln78_6_fu_956_p2;
wire   [7:0] add_ln78_7_fu_962_p2;
wire   [10:0] zext_ln73_1_fu_916_p1;
wire   [10:0] add_ln84_18_fu_972_p2;
wire   [11:0] zext_ln84_9_fu_978_p1;
wire   [11:0] add_ln84_9_fu_982_p2;
wire   [6:0] shl_ln76_4_fu_1008_p3;
wire   [4:0] shl_ln76_5_fu_1020_p3;
wire   [7:0] zext_ln76_4_fu_1016_p1;
wire   [7:0] zext_ln76_5_fu_1028_p1;
wire   [7:0] sub_ln76_2_fu_1032_p2;
wire   [7:0] add_ln78_8_fu_1038_p2;
wire   [7:0] add_ln78_9_fu_1044_p2;
wire   [10:0] zext_ln73_2_fu_998_p1;
wire   [10:0] add_ln84_19_fu_1054_p2;
wire   [11:0] zext_ln84_10_fu_1060_p1;
wire   [11:0] add_ln84_10_fu_1064_p2;
wire   [6:0] shl_ln76_6_fu_1090_p3;
wire   [4:0] shl_ln76_7_fu_1102_p3;
wire   [7:0] zext_ln76_6_fu_1098_p1;
wire   [7:0] zext_ln76_7_fu_1110_p1;
wire   [7:0] sub_ln76_3_fu_1114_p2;
wire  signed [8:0] sext_ln78_2_fu_1120_p1;
wire   [8:0] add_ln78_10_fu_1124_p2;
wire   [8:0] add_ln78_11_fu_1130_p2;
wire   [10:0] zext_ln73_3_fu_1080_p1;
wire   [10:0] add_ln84_20_fu_1140_p2;
wire   [10:0] add_ln84_11_fu_1145_p2;
wire   [6:0] shl_ln76_8_fu_1171_p3;
wire   [4:0] shl_ln76_9_fu_1183_p3;
wire   [7:0] zext_ln76_8_fu_1179_p1;
wire   [7:0] zext_ln76_9_fu_1191_p1;
wire   [7:0] sub_ln76_4_fu_1195_p2;
wire  signed [8:0] sext_ln78_3_fu_1201_p1;
wire   [8:0] add_ln78_17_fu_1205_p2;
wire   [8:0] add_ln78_12_fu_1211_p2;
wire   [10:0] zext_ln73_4_fu_1161_p1;
wire   [10:0] add_ln84_21_fu_1221_p2;
wire   [10:0] add_ln84_12_fu_1226_p2;
wire   [6:0] shl_ln76_s_fu_1252_p3;
wire   [4:0] shl_ln76_10_fu_1264_p3;
wire   [7:0] zext_ln76_10_fu_1260_p1;
wire   [7:0] zext_ln76_11_fu_1272_p1;
wire   [7:0] sub_ln76_5_fu_1276_p2;
wire  signed [8:0] sext_ln78_4_fu_1282_p1;
wire   [8:0] add_ln78_18_fu_1286_p2;
wire   [8:0] add_ln78_13_fu_1292_p2;
wire   [10:0] zext_ln73_5_fu_1242_p1;
wire   [10:0] add_ln84_22_fu_1302_p2;
wire   [10:0] add_ln84_13_fu_1307_p2;
wire   [6:0] shl_ln76_11_fu_1333_p3;
wire   [4:0] shl_ln76_12_fu_1345_p3;
wire   [7:0] zext_ln76_12_fu_1341_p1;
wire   [7:0] zext_ln76_13_fu_1353_p1;
wire   [7:0] sub_ln76_6_fu_1357_p2;
wire  signed [9:0] sext_ln78_5_fu_1363_p1;
wire   [9:0] add_ln78_19_fu_1367_p2;
wire   [9:0] add_ln78_14_fu_1373_p2;
wire   [10:0] zext_ln73_6_fu_1323_p1;
wire   [10:0] add_ln84_23_fu_1383_p2;
wire   [11:0] zext_ln84_14_fu_1388_p1;
wire   [11:0] add_ln84_14_fu_1392_p2;
wire   [6:0] shl_ln76_13_fu_1418_p3;
wire   [4:0] shl_ln76_14_fu_1430_p3;
wire   [7:0] zext_ln76_14_fu_1426_p1;
wire   [7:0] zext_ln76_15_fu_1438_p1;
wire   [7:0] sub_ln76_7_fu_1442_p2;
wire  signed [9:0] sext_ln78_6_fu_1448_p1;
wire   [9:0] add_ln78_20_fu_1452_p2;
wire   [9:0] add_ln78_15_fu_1458_p2;
wire   [10:0] zext_ln73_7_fu_1408_p1;
wire   [10:0] add_ln84_24_fu_1468_p2;
wire   [11:0] zext_ln84_16_fu_1473_p1;
wire   [11:0] add_ln84_15_fu_1477_p2;
wire   [6:0] shl_ln76_15_fu_1503_p3;
wire   [4:0] shl_ln76_16_fu_1515_p3;
wire   [7:0] zext_ln76_16_fu_1511_p1;
wire   [7:0] zext_ln76_17_fu_1523_p1;
wire   [7:0] sub_ln76_8_fu_1527_p2;
wire  signed [9:0] sext_ln78_7_fu_1533_p1;
wire   [9:0] add_ln78_21_fu_1537_p2;
wire   [9:0] add_ln78_16_fu_1543_p2;
wire   [10:0] zext_ln73_8_fu_1493_p1;
wire   [10:0] add_ln84_25_fu_1553_p2;
wire   [11:0] zext_ln84_18_fu_1558_p1;
wire   [11:0] add_ln84_16_fu_1562_p2;
wire   [11:0] add_ln104_2_fu_1572_p2;
wire   [11:0] add_ln104_fu_1577_p2;
wire   [31:0] bitcast_ln111_fu_1604_p1;
wire   [7:0] tmp_s_fu_1608_p4;
wire   [22:0] trunc_ln111_fu_1618_p1;
wire   [0:0] or_ln111_fu_1634_p2;
wire   [0:0] grp_fu_576_p2;
wire    grp_fu_558_ce;
wire    grp_fu_570_ce;
wire    grp_fu_576_ce;
wire   [4:0] grp_fu_576_opcode;
reg    grp_fu_903_in_valid;
reg   [94:0] ap_NS_fsm;
wire   [31:0] grp_fu_903_p0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 95'd1;
end

runner_conv2d_1_layer2_weights #(
    .DataWidth( 32 ),
    .AddressRange( 648 ),
    .AddressWidth( 10 ))
layer2_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_address0),
    .ce0(layer2_weights_ce0),
    .q0(layer2_weights_q0)
);

runner_facc_32ns_32ns_1ns_32_3_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_3_no_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .ce(1'b1),
    .in_data(reg_592),
    .in_last(icmp_ln90_reg_1770),
    .in_valid(grp_fu_903_in_valid),
    .out_data(grp_fu_903_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_615_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_547 <= 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        i_reg_547 <= add_ln110_reg_1964;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_815_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k_0_0_reg_347 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        k_0_0_reg_347 <= add_ln73_reg_1752;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_831_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        k_0_1_reg_370 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        k_0_1_reg_370 <= add_ln73_1_reg_1780;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_1_fu_920_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        k_0_2_reg_392 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        k_0_2_reg_392 <= add_ln73_2_reg_1803;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_2_fu_1002_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        k_1_0_reg_414 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        k_1_0_reg_414 <= add_ln73_3_reg_1826;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_3_fu_1084_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        k_1_1_reg_436 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        k_1_1_reg_436 <= add_ln73_4_reg_1849;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_4_fu_1165_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        k_1_2_reg_458 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        k_1_2_reg_458 <= add_ln73_5_reg_1872;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_5_fu_1246_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
        k_2_0_reg_480 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        k_2_0_reg_480 <= add_ln73_6_reg_1895;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_6_fu_1327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state63))) begin
        k_2_1_reg_502 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        k_2_1_reg_502 <= add_ln73_7_reg_1918;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_7_fu_1412_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state73))) begin
        k_2_2_reg_524 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        k_2_2_reg_524 <= add_ln73_8_reg_1941;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul1_reg_313 <= 11'd0;
    end else if (((icmp_ln67_fu_633_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul1_reg_313 <= next_mul2_reg_1649;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_301 <= 12'd0;
    end else if (((icmp_ln67_fu_633_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_301 <= next_mul_reg_1657;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_815_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sum_2_0_0_reg_358 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        sum_2_0_0_reg_358 <= grp_fu_903_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_831_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        sum_2_0_1_reg_381 <= sum_2_0_0_reg_358;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        sum_2_0_1_reg_381 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_1_fu_920_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        sum_2_0_2_reg_403 <= sum_2_0_1_reg_381;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        sum_2_0_2_reg_403 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_2_fu_1002_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        sum_2_1_0_reg_425 <= sum_2_0_2_reg_403;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        sum_2_1_0_reg_425 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_3_fu_1084_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        sum_2_1_1_reg_447 <= sum_2_1_0_reg_425;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        sum_2_1_1_reg_447 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_4_fu_1165_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        sum_2_1_2_reg_469 <= sum_2_1_1_reg_447;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        sum_2_1_2_reg_469 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_5_fu_1246_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
        sum_2_2_0_reg_491 <= sum_2_1_2_reg_469;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        sum_2_2_0_reg_491 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_6_fu_1327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state63))) begin
        sum_2_2_1_reg_513 <= sum_2_2_0_reg_491;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        sum_2_2_1_reg_513 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_7_fu_1412_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state73))) begin
        sum_2_2_2_reg_535 <= sum_2_2_1_reg_513;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        sum_2_2_2_reg_535 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_reg_290 <= 5'd0;
    end else if (((icmp_ln67_fu_633_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        x_reg_290 <= add_ln66_reg_1644;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_615_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        y_reg_325 <= 4'd0;
    end else if (((icmp_ln68_fu_815_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        y_reg_325 <= empty_83_reg_1672;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_633_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        z_reg_336 <= 4'd0;
    end else if (((icmp_ln73_8_fu_1497_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state83))) begin
        z_reg_336 <= add_ln68_reg_1718;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        add_ln110_reg_1964 <= add_ln110_fu_1587_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln66_reg_1644 <= add_ln66_fu_597_p2;
        next_mul2_reg_1649 <= next_mul2_fu_603_p2;
        next_mul_reg_1657 <= next_mul_fu_609_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln68_reg_1718 <= add_ln68_fu_793_p2;
        zext_ln68_5_reg_1728[3 : 0] <= zext_ln68_5_fu_803_p1[3 : 0];
        zext_ln68_6_reg_1735[3 : 0] <= zext_ln68_6_fu_807_p1[3 : 0];
        zext_ln68_7_reg_1742[3 : 0] <= zext_ln68_7_fu_811_p1[3 : 0];
        zext_ln68_reg_1723[3 : 0] <= zext_ln68_fu_799_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        add_ln73_1_reg_1780 <= add_ln73_1_fu_910_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        add_ln73_2_reg_1803 <= add_ln73_2_fu_992_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        add_ln73_3_reg_1826 <= add_ln73_3_fu_1074_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        add_ln73_4_reg_1849 <= add_ln73_4_fu_1155_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        add_ln73_5_reg_1872 <= add_ln73_5_fu_1236_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        add_ln73_6_reg_1895 <= add_ln73_6_fu_1317_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        add_ln73_7_reg_1918 <= add_ln73_7_fu_1402_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        add_ln73_8_reg_1941 <= add_ln73_8_fu_1487_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln73_reg_1752 <= add_ln73_fu_821_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_615_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_82_reg_1665 <= empty_82_fu_621_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_83_reg_1672 <= empty_83_fu_627_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        icmp_ln111_2_reg_1987 <= icmp_ln111_2_fu_1628_p2;
        icmp_ln111_reg_1982 <= icmp_ln111_fu_1622_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_831_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        icmp_ln90_reg_1770 <= icmp_ln90_fu_897_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln110_fu_1598_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state93))) begin
        output_addr_reg_1972 <= zext_ln110_fu_1593_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_633_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_cast28_reg_1690[11 : 1] <= p_cast28_fu_707_p1[11 : 1];
        p_cast31_reg_1701[11 : 1] <= p_cast31_fu_745_p1[11 : 1];
        p_cast38_reg_1685[10 : 1] <= p_cast38_fu_703_p1[10 : 1];
        p_cast41_reg_1696[10 : 1] <= p_cast41_fu_741_p1[10 : 1];
        p_cast52_reg_1680[11 : 2] <= p_cast52_fu_669_p1[11 : 2];
        sext_ln68_1_reg_1712[11 : 1] <= sext_ln68_1_fu_789_p1[11 : 1];
        sext_ln68_reg_1707[10 : 1] <= sext_ln68_fu_785_p1[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_592 <= grp_fu_49877_p_dout0;
    end
end

always @ (*) begin
    if ((((icmp_ln110_fu_1598_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state93)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln110_fu_1598_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state93))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        grp_fu_558_p0 = sum_2_2_2_reg_535;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_558_p0 = sum_2_2_1_reg_513;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        grp_fu_558_p0 = sum_2_2_0_reg_491;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_558_p0 = sum_2_1_2_reg_469;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_558_p0 = sum_2_1_1_reg_447;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_558_p0 = sum_2_1_0_reg_425;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_558_p0 = sum_2_0_2_reg_403;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_558_p0 = sum_2_0_1_reg_381;
    end else begin
        grp_fu_558_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_903_in_valid = 1'b1;
    end else begin
        grp_fu_903_in_valid = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        inputs_address0 = zext_ln84_19_fu_1567_p1;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        inputs_address0 = zext_ln84_17_fu_1482_p1;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        inputs_address0 = zext_ln84_15_fu_1397_p1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        inputs_address0 = zext_ln84_13_fu_1312_p1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        inputs_address0 = zext_ln84_12_fu_1231_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        inputs_address0 = zext_ln84_11_fu_1150_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        inputs_address0 = sext_ln84_2_fu_1069_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        inputs_address0 = sext_ln84_1_fu_987_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        inputs_address0 = sext_ln84_fu_892_p1;
    end else begin
        inputs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state5))) begin
        inputs_ce0 = 1'b1;
    end else begin
        inputs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        layer2_weights_address0 = zext_ln78_15_fu_1548_p1;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        layer2_weights_address0 = zext_ln78_14_fu_1463_p1;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        layer2_weights_address0 = zext_ln78_13_fu_1378_p1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        layer2_weights_address0 = zext_ln78_12_fu_1297_p1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        layer2_weights_address0 = zext_ln78_11_fu_1216_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        layer2_weights_address0 = zext_ln78_10_fu_1135_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        layer2_weights_address0 = zext_ln78_9_fu_1049_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        layer2_weights_address0 = zext_ln78_fu_967_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        layer2_weights_address0 = sext_ln78_fu_872_p1;
    end else begin
        layer2_weights_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state5))) begin
        layer2_weights_ce0 = 1'b1;
    end else begin
        layer2_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        output_r_address0 = output_addr_reg_1972;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        output_r_address0 = zext_ln110_fu_1593_p1;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        output_r_address0 = zext_ln104_fu_1582_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state83))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        output_r_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        output_r_d0 = sum_2_2_2_reg_535;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln111_fu_1638_p2) & (1'b1 == ap_CS_fsm_state95)) | ((icmp_ln73_8_fu_1497_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state83)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln66_fu_615_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state93;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln67_fu_633_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln68_fu_815_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln73_fu_831_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln73_1_fu_920_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state23 : begin
            if (((icmp_ln73_2_fu_1002_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state33 : begin
            if (((icmp_ln73_3_fu_1084_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state43 : begin
            if (((icmp_ln73_4_fu_1165_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state53 : begin
            if (((icmp_ln73_5_fu_1246_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state63 : begin
            if (((icmp_ln73_6_fu_1327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state73 : begin
            if (((icmp_ln73_7_fu_1412_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state83 : begin
            if (((icmp_ln73_8_fu_1497_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state83))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state93 : begin
            if (((icmp_ln110_fu_1598_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state93))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln104_2_fu_1572_p2 = (phi_mul_reg_301 + zext_ln68_reg_1723);

assign add_ln104_fu_1577_p2 = ($signed(add_ln104_2_fu_1572_p2) + $signed(p_cast52_reg_1680));

assign add_ln110_fu_1587_p2 = (i_reg_547 + 12'd1);

assign add_ln66_fu_597_p2 = (x_reg_290 + 5'd1);

assign add_ln68_fu_793_p2 = (z_reg_336 + 4'd1);

assign add_ln73_1_fu_910_p2 = (k_0_1_reg_370 + 3'd1);

assign add_ln73_2_fu_992_p2 = (k_0_2_reg_392 + 3'd1);

assign add_ln73_3_fu_1074_p2 = (k_1_0_reg_414 + 3'd1);

assign add_ln73_4_fu_1155_p2 = (k_1_1_reg_436 + 3'd1);

assign add_ln73_5_fu_1236_p2 = (k_1_2_reg_458 + 3'd1);

assign add_ln73_6_fu_1317_p2 = (k_2_0_reg_480 + 3'd1);

assign add_ln73_7_fu_1402_p2 = (k_2_1_reg_502 + 3'd1);

assign add_ln73_8_fu_1487_p2 = (k_2_2_reg_524 + 3'd1);

assign add_ln73_fu_821_p2 = (k_0_0_reg_347 + 3'd1);

assign add_ln78_10_fu_1124_p2 = ($signed(sext_ln78_2_fu_1120_p1) + $signed(9'd216));

assign add_ln78_11_fu_1130_p2 = (add_ln78_10_fu_1124_p2 + zext_ln68_6_reg_1735);

assign add_ln78_12_fu_1211_p2 = (add_ln78_17_fu_1205_p2 + zext_ln68_6_reg_1735);

assign add_ln78_13_fu_1292_p2 = (add_ln78_18_fu_1286_p2 + zext_ln68_6_reg_1735);

assign add_ln78_14_fu_1373_p2 = (add_ln78_19_fu_1367_p2 + zext_ln68_5_reg_1728);

assign add_ln78_15_fu_1458_p2 = (add_ln78_20_fu_1452_p2 + zext_ln68_5_reg_1728);

assign add_ln78_16_fu_1543_p2 = (add_ln78_21_fu_1537_p2 + zext_ln68_5_reg_1728);

assign add_ln78_17_fu_1205_p2 = ($signed(sext_ln78_3_fu_1201_p1) + $signed(9'd288));

assign add_ln78_18_fu_1286_p2 = ($signed(sext_ln78_4_fu_1282_p1) + $signed(9'd360));

assign add_ln78_19_fu_1367_p2 = ($signed(sext_ln78_5_fu_1363_p1) + $signed(10'd432));

assign add_ln78_20_fu_1452_p2 = ($signed(sext_ln78_6_fu_1448_p1) + $signed(10'd504));

assign add_ln78_21_fu_1537_p2 = ($signed(sext_ln78_7_fu_1533_p1) + $signed(10'd576));

assign add_ln78_6_fu_956_p2 = (sub_ln76_1_fu_950_p2 + 8'd72);

assign add_ln78_7_fu_962_p2 = (add_ln78_6_fu_956_p2 + zext_ln68_7_reg_1742);

assign add_ln78_8_fu_1038_p2 = ($signed(sub_ln76_2_fu_1032_p2) + $signed(8'd144));

assign add_ln78_9_fu_1044_p2 = (add_ln78_8_fu_1038_p2 + zext_ln68_7_reg_1742);

assign add_ln78_fu_867_p2 = (zext_ln68_7_reg_1742 + sub_ln76_fu_861_p2);

assign add_ln84_10_fu_1064_p2 = ($signed(zext_ln84_10_fu_1060_p1) + $signed(sext_ln68_1_reg_1712));

assign add_ln84_11_fu_1145_p2 = ($signed(add_ln84_20_fu_1140_p2) + $signed(p_cast38_reg_1685));

assign add_ln84_12_fu_1226_p2 = ($signed(add_ln84_21_fu_1221_p2) + $signed(p_cast41_reg_1696));

assign add_ln84_13_fu_1307_p2 = ($signed(add_ln84_22_fu_1302_p2) + $signed(sext_ln68_reg_1707));

assign add_ln84_14_fu_1392_p2 = ($signed(zext_ln84_14_fu_1388_p1) + $signed(p_cast28_reg_1690));

assign add_ln84_15_fu_1477_p2 = ($signed(zext_ln84_16_fu_1473_p1) + $signed(p_cast31_reg_1701));

assign add_ln84_16_fu_1562_p2 = ($signed(zext_ln84_18_fu_1558_p1) + $signed(sext_ln68_1_reg_1712));

assign add_ln84_17_fu_877_p2 = (phi_mul1_reg_313 + zext_ln73_fu_827_p1);

assign add_ln84_18_fu_972_p2 = (phi_mul1_reg_313 + zext_ln73_1_fu_916_p1);

assign add_ln84_19_fu_1054_p2 = (phi_mul1_reg_313 + zext_ln73_2_fu_998_p1);

assign add_ln84_20_fu_1140_p2 = (next_mul2_reg_1649 + zext_ln73_3_fu_1080_p1);

assign add_ln84_21_fu_1221_p2 = (next_mul2_reg_1649 + zext_ln73_4_fu_1161_p1);

assign add_ln84_22_fu_1302_p2 = (next_mul2_reg_1649 + zext_ln73_5_fu_1242_p1);

assign add_ln84_23_fu_1383_p2 = (empty_82_reg_1665 + zext_ln73_6_fu_1323_p1);

assign add_ln84_24_fu_1468_p2 = (empty_82_reg_1665 + zext_ln73_7_fu_1408_p1);

assign add_ln84_25_fu_1553_p2 = (empty_82_reg_1665 + zext_ln73_8_fu_1493_p1);

assign add_ln84_9_fu_982_p2 = ($signed(zext_ln84_9_fu_978_p1) + $signed(p_cast31_reg_1701));

assign add_ln84_fu_887_p2 = ($signed(zext_ln84_fu_883_p1) + $signed(p_cast28_reg_1690));

assign and_ln111_fu_1638_p2 = (or_ln111_fu_1634_p2 & grp_fu_29505_p_dout0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign bitcast_ln111_fu_1604_p1 = output_r_q0;

assign empty_82_fu_621_p2 = (phi_mul1_reg_313 + 11'd180);

assign empty_83_fu_627_p2 = (y_reg_325 + 4'd1);

assign empty_85_fu_663_p2 = (p_shl_cast_fu_647_p1 - p_shl1_cast_fu_659_p1);

assign empty_86_fu_697_p2 = (p_shl2_cast_fu_681_p1 - p_shl3_cast_fu_693_p1);

assign empty_87_fu_735_p2 = (p_shl6_cast_fu_719_p1 - p_shl7_cast_fu_731_p1);

assign empty_88_fu_749_p2 = (y_reg_325 + 4'd2);

assign empty_89_fu_779_p2 = (p_shl10_cast_fu_763_p1 - p_shl11_cast_fu_775_p1);

assign grp_fu_29505_p_ce = 1'b1;

assign grp_fu_29505_p_din0 = output_r_q0;

assign grp_fu_29505_p_din1 = 32'd0;

assign grp_fu_29505_p_opcode = 5'd4;

assign grp_fu_49873_p_ce = 1'b1;

assign grp_fu_49873_p_din0 = grp_fu_558_p0;

assign grp_fu_49873_p_din1 = reg_592;

assign grp_fu_49873_p_opcode = 2'd0;

assign grp_fu_49877_p_ce = 1'b1;

assign grp_fu_49877_p_din0 = layer2_weights_q0;

assign grp_fu_49877_p_din1 = inputs_q0;

assign grp_fu_558_ce = 1'b1;

assign grp_fu_558_p1 = reg_592;

assign grp_fu_558_p2 = grp_fu_49873_p_dout0;

assign grp_fu_570_ce = 1'b1;

assign grp_fu_570_p0 = layer2_weights_q0;

assign grp_fu_570_p1 = inputs_q0;

assign grp_fu_570_p2 = grp_fu_49877_p_dout0;

assign grp_fu_576_ce = 1'b1;

assign grp_fu_576_opcode = 5'd4;

assign grp_fu_576_p0 = output_r_q0;

assign grp_fu_576_p1 = 32'd0;

assign grp_fu_576_p2 = grp_fu_29505_p_dout0;

assign icmp_ln110_fu_1598_p2 = ((i_reg_547 == 12'd3276) ? 1'b1 : 1'b0);

assign icmp_ln111_2_fu_1628_p2 = ((trunc_ln111_fu_1618_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln111_fu_1622_p2 = ((tmp_s_fu_1608_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_615_p2 = ((x_reg_290 == 5'd21) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_633_p2 = ((y_reg_325 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_815_p2 = ((z_reg_336 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln73_1_fu_920_p2 = ((k_0_1_reg_370 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln73_2_fu_1002_p2 = ((k_0_2_reg_392 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln73_3_fu_1084_p2 = ((k_1_0_reg_414 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln73_4_fu_1165_p2 = ((k_1_1_reg_436 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln73_5_fu_1246_p2 = ((k_1_2_reg_458 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln73_6_fu_1327_p2 = ((k_2_0_reg_480 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln73_7_fu_1412_p2 = ((k_2_1_reg_502 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln73_8_fu_1497_p2 = ((k_2_2_reg_524 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_831_p2 = ((k_0_0_reg_347 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_897_p2 = ((add_ln73_fu_821_p2 == 3'd6) ? 1'b1 : 1'b0);

assign next_mul2_fu_603_p2 = (phi_mul1_reg_313 + 11'd90);

assign next_mul_fu_609_p2 = (phi_mul_reg_301 + 12'd156);

assign or_ln111_fu_1634_p2 = (icmp_ln111_reg_1982 | icmp_ln111_2_reg_1987);

assign p_cast28_fu_707_p1 = empty_86_fu_697_p2;

assign p_cast31_fu_745_p1 = empty_87_fu_735_p2;

assign p_cast38_fu_703_p1 = empty_86_fu_697_p2;

assign p_cast41_fu_741_p1 = empty_87_fu_735_p2;

assign p_cast52_fu_669_p1 = $signed(empty_85_fu_663_p2);

assign p_shl10_cast_fu_763_p1 = p_shl4_fu_755_p3;

assign p_shl11_cast_fu_775_p1 = p_shl5_fu_767_p3;

assign p_shl1_cast_fu_659_p1 = p_shl1_fu_651_p3;

assign p_shl1_fu_651_p3 = {{y_reg_325}, {2'd0}};

assign p_shl2_cast_fu_681_p1 = p_shl2_fu_673_p3;

assign p_shl2_fu_673_p3 = {{y_reg_325}, {3'd0}};

assign p_shl3_cast_fu_693_p1 = p_shl3_fu_685_p3;

assign p_shl3_fu_685_p3 = {{y_reg_325}, {1'd0}};

assign p_shl4_fu_755_p3 = {{empty_88_fu_749_p2}, {3'd0}};

assign p_shl5_fu_767_p3 = {{empty_88_fu_749_p2}, {1'd0}};

assign p_shl6_cast_fu_719_p1 = p_shl6_fu_711_p3;

assign p_shl6_fu_711_p3 = {{empty_83_fu_627_p2}, {3'd0}};

assign p_shl7_cast_fu_731_p1 = p_shl7_fu_723_p3;

assign p_shl7_fu_723_p3 = {{empty_83_fu_627_p2}, {1'd0}};

assign p_shl_cast_fu_647_p1 = p_shl_fu_639_p3;

assign p_shl_fu_639_p3 = {{y_reg_325}, {4'd0}};

assign sext_ln68_1_fu_789_p1 = empty_89_fu_779_p2;

assign sext_ln68_fu_785_p1 = empty_89_fu_779_p2;

assign sext_ln78_2_fu_1120_p1 = $signed(sub_ln76_3_fu_1114_p2);

assign sext_ln78_3_fu_1201_p1 = $signed(sub_ln76_4_fu_1195_p2);

assign sext_ln78_4_fu_1282_p1 = $signed(sub_ln76_5_fu_1276_p2);

assign sext_ln78_5_fu_1363_p1 = $signed(sub_ln76_6_fu_1357_p2);

assign sext_ln78_6_fu_1448_p1 = $signed(sub_ln76_7_fu_1442_p2);

assign sext_ln78_7_fu_1533_p1 = $signed(sub_ln76_8_fu_1527_p2);

assign sext_ln78_fu_872_p1 = $signed(add_ln78_fu_867_p2);

assign sext_ln84_1_fu_987_p1 = $signed(add_ln84_9_fu_982_p2);

assign sext_ln84_2_fu_1069_p1 = $signed(add_ln84_10_fu_1064_p2);

assign sext_ln84_fu_892_p1 = $signed(add_ln84_fu_887_p2);

assign shl_ln76_10_fu_1264_p3 = {{k_1_2_reg_458}, {2'd0}};

assign shl_ln76_11_fu_1333_p3 = {{k_2_0_reg_480}, {4'd0}};

assign shl_ln76_12_fu_1345_p3 = {{k_2_0_reg_480}, {2'd0}};

assign shl_ln76_13_fu_1418_p3 = {{k_2_1_reg_502}, {4'd0}};

assign shl_ln76_14_fu_1430_p3 = {{k_2_1_reg_502}, {2'd0}};

assign shl_ln76_15_fu_1503_p3 = {{k_2_2_reg_524}, {4'd0}};

assign shl_ln76_16_fu_1515_p3 = {{k_2_2_reg_524}, {2'd0}};

assign shl_ln76_1_fu_849_p3 = {{k_0_0_reg_347}, {2'd0}};

assign shl_ln76_2_fu_926_p3 = {{k_0_1_reg_370}, {4'd0}};

assign shl_ln76_3_fu_938_p3 = {{k_0_1_reg_370}, {2'd0}};

assign shl_ln76_4_fu_1008_p3 = {{k_0_2_reg_392}, {4'd0}};

assign shl_ln76_5_fu_1020_p3 = {{k_0_2_reg_392}, {2'd0}};

assign shl_ln76_6_fu_1090_p3 = {{k_1_0_reg_414}, {4'd0}};

assign shl_ln76_7_fu_1102_p3 = {{k_1_0_reg_414}, {2'd0}};

assign shl_ln76_8_fu_1171_p3 = {{k_1_1_reg_436}, {4'd0}};

assign shl_ln76_9_fu_1183_p3 = {{k_1_1_reg_436}, {2'd0}};

assign shl_ln76_s_fu_1252_p3 = {{k_1_2_reg_458}, {4'd0}};

assign shl_ln_fu_837_p3 = {{k_0_0_reg_347}, {4'd0}};

assign sub_ln76_1_fu_950_p2 = (zext_ln76_2_fu_934_p1 - zext_ln76_3_fu_946_p1);

assign sub_ln76_2_fu_1032_p2 = (zext_ln76_4_fu_1016_p1 - zext_ln76_5_fu_1028_p1);

assign sub_ln76_3_fu_1114_p2 = (zext_ln76_6_fu_1098_p1 - zext_ln76_7_fu_1110_p1);

assign sub_ln76_4_fu_1195_p2 = (zext_ln76_8_fu_1179_p1 - zext_ln76_9_fu_1191_p1);

assign sub_ln76_5_fu_1276_p2 = (zext_ln76_10_fu_1260_p1 - zext_ln76_11_fu_1272_p1);

assign sub_ln76_6_fu_1357_p2 = (zext_ln76_12_fu_1341_p1 - zext_ln76_13_fu_1353_p1);

assign sub_ln76_7_fu_1442_p2 = (zext_ln76_14_fu_1426_p1 - zext_ln76_15_fu_1438_p1);

assign sub_ln76_8_fu_1527_p2 = (zext_ln76_16_fu_1511_p1 - zext_ln76_17_fu_1523_p1);

assign sub_ln76_fu_861_p2 = (zext_ln76_fu_845_p1 - zext_ln76_1_fu_857_p1);

assign tmp_s_fu_1608_p4 = {{bitcast_ln111_fu_1604_p1[30:23]}};

assign trunc_ln111_fu_1618_p1 = bitcast_ln111_fu_1604_p1[22:0];

assign zext_ln104_fu_1582_p1 = add_ln104_fu_1577_p2;

assign zext_ln110_fu_1593_p1 = i_reg_547;

assign zext_ln68_5_fu_803_p1 = z_reg_336;

assign zext_ln68_6_fu_807_p1 = z_reg_336;

assign zext_ln68_7_fu_811_p1 = z_reg_336;

assign zext_ln68_fu_799_p1 = z_reg_336;

assign zext_ln73_1_fu_916_p1 = k_0_1_reg_370;

assign zext_ln73_2_fu_998_p1 = k_0_2_reg_392;

assign zext_ln73_3_fu_1080_p1 = k_1_0_reg_414;

assign zext_ln73_4_fu_1161_p1 = k_1_1_reg_436;

assign zext_ln73_5_fu_1242_p1 = k_1_2_reg_458;

assign zext_ln73_6_fu_1323_p1 = k_2_0_reg_480;

assign zext_ln73_7_fu_1408_p1 = k_2_1_reg_502;

assign zext_ln73_8_fu_1493_p1 = k_2_2_reg_524;

assign zext_ln73_fu_827_p1 = k_0_0_reg_347;

assign zext_ln76_10_fu_1260_p1 = shl_ln76_s_fu_1252_p3;

assign zext_ln76_11_fu_1272_p1 = shl_ln76_10_fu_1264_p3;

assign zext_ln76_12_fu_1341_p1 = shl_ln76_11_fu_1333_p3;

assign zext_ln76_13_fu_1353_p1 = shl_ln76_12_fu_1345_p3;

assign zext_ln76_14_fu_1426_p1 = shl_ln76_13_fu_1418_p3;

assign zext_ln76_15_fu_1438_p1 = shl_ln76_14_fu_1430_p3;

assign zext_ln76_16_fu_1511_p1 = shl_ln76_15_fu_1503_p3;

assign zext_ln76_17_fu_1523_p1 = shl_ln76_16_fu_1515_p3;

assign zext_ln76_1_fu_857_p1 = shl_ln76_1_fu_849_p3;

assign zext_ln76_2_fu_934_p1 = shl_ln76_2_fu_926_p3;

assign zext_ln76_3_fu_946_p1 = shl_ln76_3_fu_938_p3;

assign zext_ln76_4_fu_1016_p1 = shl_ln76_4_fu_1008_p3;

assign zext_ln76_5_fu_1028_p1 = shl_ln76_5_fu_1020_p3;

assign zext_ln76_6_fu_1098_p1 = shl_ln76_6_fu_1090_p3;

assign zext_ln76_7_fu_1110_p1 = shl_ln76_7_fu_1102_p3;

assign zext_ln76_8_fu_1179_p1 = shl_ln76_8_fu_1171_p3;

assign zext_ln76_9_fu_1191_p1 = shl_ln76_9_fu_1183_p3;

assign zext_ln76_fu_845_p1 = shl_ln_fu_837_p3;

assign zext_ln78_10_fu_1135_p1 = add_ln78_11_fu_1130_p2;

assign zext_ln78_11_fu_1216_p1 = add_ln78_12_fu_1211_p2;

assign zext_ln78_12_fu_1297_p1 = add_ln78_13_fu_1292_p2;

assign zext_ln78_13_fu_1378_p1 = add_ln78_14_fu_1373_p2;

assign zext_ln78_14_fu_1463_p1 = add_ln78_15_fu_1458_p2;

assign zext_ln78_15_fu_1548_p1 = add_ln78_16_fu_1543_p2;

assign zext_ln78_9_fu_1049_p1 = add_ln78_9_fu_1044_p2;

assign zext_ln78_fu_967_p1 = add_ln78_7_fu_962_p2;

assign zext_ln84_10_fu_1060_p1 = add_ln84_19_fu_1054_p2;

assign zext_ln84_11_fu_1150_p1 = add_ln84_11_fu_1145_p2;

assign zext_ln84_12_fu_1231_p1 = add_ln84_12_fu_1226_p2;

assign zext_ln84_13_fu_1312_p1 = add_ln84_13_fu_1307_p2;

assign zext_ln84_14_fu_1388_p1 = add_ln84_23_fu_1383_p2;

assign zext_ln84_15_fu_1397_p1 = add_ln84_14_fu_1392_p2;

assign zext_ln84_16_fu_1473_p1 = add_ln84_24_fu_1468_p2;

assign zext_ln84_17_fu_1482_p1 = add_ln84_15_fu_1477_p2;

assign zext_ln84_18_fu_1558_p1 = add_ln84_25_fu_1553_p2;

assign zext_ln84_19_fu_1567_p1 = add_ln84_16_fu_1562_p2;

assign zext_ln84_9_fu_978_p1 = add_ln84_18_fu_972_p2;

assign zext_ln84_fu_883_p1 = add_ln84_17_fu_877_p2;

always @ (posedge ap_clk) begin
    p_cast52_reg_1680[1:0] <= 2'b00;
    p_cast38_reg_1685[0] <= 1'b0;
    p_cast28_reg_1690[0] <= 1'b0;
    p_cast41_reg_1696[0] <= 1'b0;
    p_cast31_reg_1701[0] <= 1'b0;
    sext_ln68_reg_1707[0] <= 1'b0;
    sext_ln68_1_reg_1712[0] <= 1'b0;
    zext_ln68_reg_1723[11:4] <= 8'b00000000;
    zext_ln68_5_reg_1728[9:4] <= 6'b000000;
    zext_ln68_6_reg_1735[8:4] <= 5'b00000;
    zext_ln68_7_reg_1742[7:4] <= 4'b0000;
end

endmodule //runner_conv2d_1
