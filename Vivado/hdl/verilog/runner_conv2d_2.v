// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module runner_conv2d_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inputs_address0,
        inputs_ce0,
        inputs_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        grp_fu_49873_p_din0,
        grp_fu_49873_p_din1,
        grp_fu_49873_p_opcode,
        grp_fu_49873_p_dout0,
        grp_fu_49873_p_ce,
        grp_fu_49877_p_din0,
        grp_fu_49877_p_din1,
        grp_fu_49877_p_dout0,
        grp_fu_49877_p_ce,
        grp_fu_29505_p_din0,
        grp_fu_29505_p_din1,
        grp_fu_29505_p_opcode,
        grp_fu_29505_p_dout0,
        grp_fu_29505_p_ce
);

parameter    ap_ST_fsm_state1 = 106'd1;
parameter    ap_ST_fsm_state2 = 106'd2;
parameter    ap_ST_fsm_state3 = 106'd4;
parameter    ap_ST_fsm_state4 = 106'd8;
parameter    ap_ST_fsm_state5 = 106'd16;
parameter    ap_ST_fsm_state6 = 106'd32;
parameter    ap_ST_fsm_state7 = 106'd64;
parameter    ap_ST_fsm_state8 = 106'd128;
parameter    ap_ST_fsm_state9 = 106'd256;
parameter    ap_ST_fsm_state10 = 106'd512;
parameter    ap_ST_fsm_state11 = 106'd1024;
parameter    ap_ST_fsm_state12 = 106'd2048;
parameter    ap_ST_fsm_state13 = 106'd4096;
parameter    ap_ST_fsm_state14 = 106'd8192;
parameter    ap_ST_fsm_state15 = 106'd16384;
parameter    ap_ST_fsm_state16 = 106'd32768;
parameter    ap_ST_fsm_state17 = 106'd65536;
parameter    ap_ST_fsm_state18 = 106'd131072;
parameter    ap_ST_fsm_state19 = 106'd262144;
parameter    ap_ST_fsm_state20 = 106'd524288;
parameter    ap_ST_fsm_state21 = 106'd1048576;
parameter    ap_ST_fsm_state22 = 106'd2097152;
parameter    ap_ST_fsm_state23 = 106'd4194304;
parameter    ap_ST_fsm_state24 = 106'd8388608;
parameter    ap_ST_fsm_state25 = 106'd16777216;
parameter    ap_ST_fsm_state26 = 106'd33554432;
parameter    ap_ST_fsm_state27 = 106'd67108864;
parameter    ap_ST_fsm_state28 = 106'd134217728;
parameter    ap_ST_fsm_state29 = 106'd268435456;
parameter    ap_ST_fsm_state30 = 106'd536870912;
parameter    ap_ST_fsm_state31 = 106'd1073741824;
parameter    ap_ST_fsm_state32 = 106'd2147483648;
parameter    ap_ST_fsm_state33 = 106'd4294967296;
parameter    ap_ST_fsm_state34 = 106'd8589934592;
parameter    ap_ST_fsm_state35 = 106'd17179869184;
parameter    ap_ST_fsm_state36 = 106'd34359738368;
parameter    ap_ST_fsm_state37 = 106'd68719476736;
parameter    ap_ST_fsm_state38 = 106'd137438953472;
parameter    ap_ST_fsm_state39 = 106'd274877906944;
parameter    ap_ST_fsm_state40 = 106'd549755813888;
parameter    ap_ST_fsm_state41 = 106'd1099511627776;
parameter    ap_ST_fsm_state42 = 106'd2199023255552;
parameter    ap_ST_fsm_state43 = 106'd4398046511104;
parameter    ap_ST_fsm_state44 = 106'd8796093022208;
parameter    ap_ST_fsm_state45 = 106'd17592186044416;
parameter    ap_ST_fsm_state46 = 106'd35184372088832;
parameter    ap_ST_fsm_state47 = 106'd70368744177664;
parameter    ap_ST_fsm_state48 = 106'd140737488355328;
parameter    ap_ST_fsm_state49 = 106'd281474976710656;
parameter    ap_ST_fsm_state50 = 106'd562949953421312;
parameter    ap_ST_fsm_state51 = 106'd1125899906842624;
parameter    ap_ST_fsm_state52 = 106'd2251799813685248;
parameter    ap_ST_fsm_state53 = 106'd4503599627370496;
parameter    ap_ST_fsm_state54 = 106'd9007199254740992;
parameter    ap_ST_fsm_state55 = 106'd18014398509481984;
parameter    ap_ST_fsm_state56 = 106'd36028797018963968;
parameter    ap_ST_fsm_state57 = 106'd72057594037927936;
parameter    ap_ST_fsm_state58 = 106'd144115188075855872;
parameter    ap_ST_fsm_state59 = 106'd288230376151711744;
parameter    ap_ST_fsm_state60 = 106'd576460752303423488;
parameter    ap_ST_fsm_state61 = 106'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 106'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 106'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 106'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 106'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 106'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 106'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 106'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 106'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 106'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 106'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 106'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 106'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 106'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 106'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 106'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 106'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 106'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 106'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 106'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 106'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 106'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 106'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 106'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 106'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 106'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 106'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 106'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 106'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 106'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 106'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 106'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 106'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 106'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 106'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 106'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 106'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 106'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 106'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 106'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 106'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 106'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 106'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 106'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 106'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 106'd40564819207303340847894502572032;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] inputs_address0;
output   inputs_ce0;
input  [31:0] inputs_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;
output  [31:0] grp_fu_49873_p_din0;
output  [31:0] grp_fu_49873_p_din1;
output  [1:0] grp_fu_49873_p_opcode;
input  [31:0] grp_fu_49873_p_dout0;
output   grp_fu_49873_p_ce;
output  [31:0] grp_fu_49877_p_din0;
output  [31:0] grp_fu_49877_p_din1;
input  [31:0] grp_fu_49877_p_dout0;
output   grp_fu_49877_p_ce;
output  [31:0] grp_fu_29505_p_din0;
output  [31:0] grp_fu_29505_p_din1;
output  [4:0] grp_fu_29505_p_opcode;
input  [0:0] grp_fu_29505_p_dout0;
output   grp_fu_29505_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] inputs_address0;
reg inputs_ce0;
reg[13:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [105:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] layer0_weights_address0;
reg    layer0_weights_ce0;
wire   [31:0] layer0_weights_q0;
reg   [31:0] reg_580;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state95;
wire   [31:0] grp_fu_569_p2;
reg   [31:0] reg_590;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state98;
wire   [5:0] empty_fu_595_p2;
reg   [5:0] empty_reg_1042;
wire    ap_CS_fsm_state2;
wire   [12:0] next_mul_fu_601_p2;
reg   [12:0] next_mul_reg_1050;
wire   [5:0] empty_66_fu_613_p2;
reg   [5:0] empty_66_reg_1058;
wire   [0:0] icmp_ln66_fu_607_p2;
wire   [4:0] empty_67_fu_619_p2;
reg   [4:0] empty_67_reg_1065;
wire    ap_CS_fsm_state3;
wire   [10:0] zext_ln67_fu_625_p1;
reg   [10:0] zext_ln67_reg_1070;
wire  signed [13:0] p_cast36_fu_665_p1;
reg  signed [13:0] p_cast36_reg_1080;
wire   [0:0] icmp_ln67_fu_629_p2;
wire   [10:0] p_cast24_fu_669_p1;
reg   [10:0] p_cast24_reg_1085;
wire   [10:0] zext_ln68_fu_679_p1;
reg   [10:0] zext_ln68_reg_1092;
wire   [2:0] add_ln68_fu_683_p2;
reg   [2:0] add_ln68_reg_1099;
wire    ap_CS_fsm_state4;
wire   [12:0] zext_ln68_1_fu_689_p1;
reg   [12:0] zext_ln68_1_reg_1104;
wire   [5:0] zext_ln68_2_fu_693_p1;
reg   [5:0] zext_ln68_2_reg_1109;
wire   [4:0] zext_ln68_3_fu_697_p1;
reg   [4:0] zext_ln68_3_reg_1116;
wire   [3:0] zext_ln68_4_fu_701_p1;
reg   [3:0] zext_ln68_4_reg_1122;
wire   [0:0] icmp_ln68_fu_705_p2;
wire    ap_CS_fsm_state6;
wire   [0:0] ap_phi_mux_k_0_0_phi_fu_332_p4;
wire   [31:0] grp_fu_556_p2;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state17;
wire   [0:0] ap_phi_mux_k_0_1_phi_fu_357_p4;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state28;
wire   [0:0] ap_phi_mux_k_0_2_phi_fu_381_p4;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state39;
wire   [0:0] ap_phi_mux_k_1_0_phi_fu_405_p4;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state50;
wire   [0:0] ap_phi_mux_k_1_1_phi_fu_429_p4;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state61;
wire   [0:0] ap_phi_mux_k_1_2_phi_fu_453_p4;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state72;
wire   [0:0] ap_phi_mux_k_2_0_phi_fu_477_p4;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state83;
wire   [0:0] ap_phi_mux_k_2_1_phi_fu_501_p4;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state94;
wire   [0:0] ap_phi_mux_k_2_2_phi_fu_525_p4;
wire    ap_CS_fsm_state103;
wire   [13:0] add_ln110_fu_985_p2;
reg   [13:0] add_ln110_reg_1265;
wire    ap_CS_fsm_state104;
reg   [13:0] output_addr_reg_1273;
wire   [0:0] icmp_ln110_fu_996_p2;
wire    ap_CS_fsm_state105;
wire   [0:0] icmp_ln111_fu_1020_p2;
reg   [0:0] icmp_ln111_reg_1283;
wire   [0:0] icmp_ln111_1_fu_1026_p2;
reg   [0:0] icmp_ln111_1_reg_1288;
reg   [5:0] x_reg_280;
reg   [12:0] phi_mul_reg_292;
reg   [4:0] y_reg_304;
reg   [2:0] z_reg_315;
reg   [0:0] k_0_0_reg_327;
reg   [31:0] sum_2_0_0_reg_340;
reg   [0:0] k_0_1_reg_352;
reg   [31:0] sum_2_0_1_reg_365;
reg   [0:0] k_0_2_reg_376;
reg   [31:0] sum_2_0_2_reg_389;
reg   [0:0] k_1_0_reg_400;
reg   [31:0] sum_2_1_0_reg_413;
reg   [0:0] k_1_1_reg_424;
reg   [31:0] sum_2_1_1_reg_437;
reg   [0:0] k_1_2_reg_448;
reg   [31:0] sum_2_1_2_reg_461;
reg   [0:0] k_2_0_reg_472;
reg   [31:0] sum_2_2_0_reg_485;
reg   [0:0] k_2_1_reg_496;
reg   [31:0] sum_2_2_1_reg_509;
reg   [0:0] k_2_2_reg_520;
reg   [31:0] sum_2_2_2_reg_533;
reg   [13:0] i_reg_545;
wire    ap_CS_fsm_state106;
wire   [63:0] zext_ln78_fu_711_p1;
wire   [63:0] zext_ln84_fu_729_p1;
wire   [63:0] zext_ln78_1_fu_739_p1;
wire   [63:0] zext_ln84_1_fu_757_p1;
wire   [63:0] zext_ln78_2_fu_767_p1;
wire   [63:0] zext_ln84_2_fu_785_p1;
wire   [63:0] zext_ln78_3_fu_795_p1;
wire   [63:0] zext_ln84_3_fu_812_p1;
wire   [63:0] zext_ln78_4_fu_829_p1;
wire   [63:0] zext_ln84_4_fu_846_p1;
wire   [63:0] zext_ln78_5_fu_856_p1;
wire   [63:0] zext_ln84_5_fu_873_p1;
wire   [63:0] zext_ln78_6_fu_883_p1;
wire   [63:0] zext_ln84_6_fu_900_p1;
wire   [63:0] zext_ln78_7_fu_910_p1;
wire   [63:0] zext_ln84_7_fu_927_p1;
wire   [63:0] zext_ln78_8_fu_944_p1;
wire   [63:0] zext_ln84_8_fu_961_p1;
wire   [63:0] zext_ln104_1_fu_980_p1;
wire   [63:0] zext_ln110_fu_991_p1;
wire   [0:0] and_ln111_fu_1036_p2;
reg   [31:0] grp_fu_556_p0;
wire   [31:0] grp_fu_556_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state99;
wire   [31:0] grp_fu_569_p0;
wire   [31:0] grp_fu_569_p1;
wire   [31:0] grp_fu_574_p0;
wire   [31:0] grp_fu_574_p1;
wire   [7:0] p_shl_fu_635_p3;
wire   [5:0] p_shl1_fu_647_p3;
wire   [8:0] p_shl_cast_fu_643_p1;
wire   [8:0] p_shl1_cast_fu_655_p1;
wire   [8:0] empty_69_fu_659_p2;
wire   [4:0] empty_70_fu_673_p2;
wire   [10:0] tmp_fu_716_p3;
wire   [10:0] add_ln84_fu_724_p2;
wire   [3:0] add_ln78_fu_734_p2;
wire   [10:0] tmp2_fu_744_p3;
wire   [10:0] add_ln84_1_fu_752_p2;
wire   [4:0] add_ln78_1_fu_762_p2;
wire   [10:0] tmp4_fu_772_p3;
wire   [10:0] add_ln84_2_fu_780_p2;
wire   [4:0] add_ln78_2_fu_790_p2;
wire   [10:0] tmp6_fu_800_p3;
wire   [10:0] add_ln84_3_fu_807_p2;
wire   [3:0] or_ln_fu_817_p3;
wire  signed [4:0] sext_ln78_fu_825_p1;
wire   [10:0] tmp8_fu_834_p3;
wire   [10:0] add_ln84_4_fu_841_p2;
wire   [5:0] add_ln78_3_fu_851_p2;
wire   [10:0] tmp10_fu_861_p3;
wire   [10:0] add_ln84_5_fu_868_p2;
wire   [5:0] add_ln78_4_fu_878_p2;
wire   [10:0] tmp12_fu_888_p3;
wire   [10:0] add_ln84_6_fu_895_p2;
wire   [5:0] add_ln78_5_fu_905_p2;
wire   [10:0] tmp14_fu_915_p3;
wire   [10:0] add_ln84_7_fu_922_p2;
wire   [4:0] or_ln78_1_fu_932_p3;
wire  signed [5:0] sext_ln78_1_fu_940_p1;
wire   [10:0] tmp16_fu_949_p3;
wire   [10:0] add_ln84_8_fu_956_p2;
wire   [12:0] add_ln104_1_fu_966_p2;
wire   [13:0] zext_ln104_fu_971_p1;
wire   [13:0] add_ln104_fu_975_p2;
wire   [31:0] bitcast_ln111_fu_1002_p1;
wire   [7:0] tmp_s_fu_1006_p4;
wire   [22:0] trunc_ln111_fu_1016_p1;
wire   [0:0] or_ln111_fu_1032_p2;
wire   [0:0] grp_fu_574_p2;
wire    grp_fu_556_ce;
wire    grp_fu_569_ce;
wire    grp_fu_574_ce;
wire   [4:0] grp_fu_574_opcode;
reg   [105:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 106'd1;
end

runner_conv2d_2_layer0_weights #(
    .DataWidth( 32 ),
    .AddressRange( 54 ),
    .AddressWidth( 6 ))
layer0_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer0_weights_address0),
    .ce0(layer0_weights_ce0),
    .q0(layer0_weights_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_607_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_545 <= 14'd0;
    end else if ((1'b1 == ap_CS_fsm_state106)) begin
        i_reg_545 <= add_ln110_reg_1265;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_0_0_reg_327 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        k_0_0_reg_327 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        k_0_1_reg_352 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        k_0_1_reg_352 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        k_0_2_reg_376 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        k_0_2_reg_376 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        k_1_0_reg_400 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        k_1_0_reg_400 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        k_1_1_reg_424 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        k_1_1_reg_424 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        k_1_2_reg_448 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        k_1_2_reg_448 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        k_2_0_reg_472 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        k_2_0_reg_472 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        k_2_1_reg_496 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        k_2_1_reg_496 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        k_2_2_reg_520 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        k_2_2_reg_520 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_292 <= 13'd0;
    end else if (((icmp_ln67_fu_629_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_292 <= next_mul_reg_1050;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sum_2_0_0_reg_340 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        sum_2_0_0_reg_340 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        sum_2_0_1_reg_365 <= sum_2_0_0_reg_340;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        sum_2_0_1_reg_365 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        sum_2_0_2_reg_389 <= sum_2_0_1_reg_365;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        sum_2_0_2_reg_389 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        sum_2_1_0_reg_413 <= sum_2_0_2_reg_389;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        sum_2_1_0_reg_413 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        sum_2_1_1_reg_437 <= sum_2_1_0_reg_413;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        sum_2_1_1_reg_437 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        sum_2_1_2_reg_461 <= sum_2_1_1_reg_437;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        sum_2_1_2_reg_461 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        sum_2_2_0_reg_485 <= sum_2_1_2_reg_461;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        sum_2_2_0_reg_485 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        sum_2_2_1_reg_509 <= sum_2_2_0_reg_485;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        sum_2_2_1_reg_509 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        sum_2_2_2_reg_533 <= sum_2_2_1_reg_509;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        sum_2_2_2_reg_533 <= grp_fu_49873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_reg_280 <= 6'd0;
    end else if (((icmp_ln67_fu_629_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        x_reg_280 <= empty_reg_1042;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_607_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        y_reg_304 <= 5'd0;
    end else if (((icmp_ln68_fu_705_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        y_reg_304 <= empty_67_reg_1065;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_629_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        z_reg_315 <= 3'd0;
    end else if (((ap_phi_mux_k_2_2_phi_fu_525_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state94))) begin
        z_reg_315 <= add_ln68_reg_1099;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state104)) begin
        add_ln110_reg_1265 <= add_ln110_fu_985_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln68_reg_1099 <= add_ln68_fu_683_p2;
        zext_ln68_1_reg_1104[2 : 0] <= zext_ln68_1_fu_689_p1[2 : 0];
        zext_ln68_2_reg_1109[2 : 0] <= zext_ln68_2_fu_693_p1[2 : 0];
        zext_ln68_3_reg_1116[2 : 0] <= zext_ln68_3_fu_697_p1[2 : 0];
        zext_ln68_4_reg_1122[2 : 0] <= zext_ln68_4_fu_701_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_607_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_66_reg_1058 <= empty_66_fu_613_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_67_reg_1065 <= empty_67_fu_619_p2;
        zext_ln67_reg_1070[4 : 0] <= zext_ln67_fu_625_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_reg_1042 <= empty_fu_595_p2;
        next_mul_reg_1050 <= next_mul_fu_601_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        icmp_ln111_1_reg_1288 <= icmp_ln111_1_fu_1026_p2;
        icmp_ln111_reg_1283 <= icmp_ln111_fu_1020_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln110_fu_996_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state104))) begin
        output_addr_reg_1273 <= zext_ln110_fu_991_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_629_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_cast24_reg_1085[4 : 0] <= p_cast24_fu_669_p1[4 : 0];
        p_cast36_reg_1080[13 : 1] <= p_cast36_fu_665_p1[13 : 1];
        zext_ln68_reg_1092[4 : 0] <= zext_ln68_fu_679_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_580 <= layer0_weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_590 <= grp_fu_49877_p_dout0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((icmp_ln110_fu_996_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state104)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln110_fu_996_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state104))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        grp_fu_556_p0 = sum_2_2_2_reg_533;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        grp_fu_556_p0 = sum_2_2_1_reg_509;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        grp_fu_556_p0 = sum_2_2_0_reg_485;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        grp_fu_556_p0 = sum_2_1_2_reg_461;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_556_p0 = sum_2_1_1_reg_437;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_556_p0 = sum_2_1_0_reg_413;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_556_p0 = sum_2_0_2_reg_389;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_556_p0 = sum_2_0_1_reg_365;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_556_p0 = sum_2_0_0_reg_340;
    end else begin
        grp_fu_556_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        inputs_address0 = zext_ln84_8_fu_961_p1;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        inputs_address0 = zext_ln84_7_fu_927_p1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        inputs_address0 = zext_ln84_6_fu_900_p1;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        inputs_address0 = zext_ln84_5_fu_873_p1;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        inputs_address0 = zext_ln84_4_fu_846_p1;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        inputs_address0 = zext_ln84_3_fu_812_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        inputs_address0 = zext_ln84_2_fu_785_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        inputs_address0 = zext_ln84_1_fu_757_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        inputs_address0 = zext_ln84_fu_729_p1;
    end else begin
        inputs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state6))) begin
        inputs_ce0 = 1'b1;
    end else begin
        inputs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        layer0_weights_address0 = zext_ln78_8_fu_944_p1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        layer0_weights_address0 = zext_ln78_7_fu_910_p1;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        layer0_weights_address0 = zext_ln78_6_fu_883_p1;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        layer0_weights_address0 = zext_ln78_5_fu_856_p1;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        layer0_weights_address0 = zext_ln78_4_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        layer0_weights_address0 = zext_ln78_3_fu_795_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        layer0_weights_address0 = zext_ln78_2_fu_767_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        layer0_weights_address0 = zext_ln78_1_fu_739_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        layer0_weights_address0 = zext_ln78_fu_711_p1;
    end else begin
        layer0_weights_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        layer0_weights_ce0 = 1'b1;
    end else begin
        layer0_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state106)) begin
        output_r_address0 = output_addr_reg_1273;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        output_r_address0 = zext_ln110_fu_991_p1;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        output_r_address0 = zext_ln104_1_fu_980_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state94))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state106)) begin
        output_r_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        output_r_d0 = sum_2_2_2_reg_533;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln111_fu_1036_p2) & (1'b1 == ap_CS_fsm_state106)) | ((ap_phi_mux_k_2_2_phi_fu_525_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state94)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln66_fu_607_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state104;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln67_fu_629_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln68_fu_705_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((ap_phi_mux_k_0_0_phi_fu_332_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((ap_phi_mux_k_0_1_phi_fu_357_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((ap_phi_mux_k_0_2_phi_fu_381_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((ap_phi_mux_k_1_0_phi_fu_405_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if (((ap_phi_mux_k_1_1_phi_fu_429_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            if (((ap_phi_mux_k_1_2_phi_fu_453_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state61))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if (((ap_phi_mux_k_2_0_phi_fu_477_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            if (((ap_phi_mux_k_2_1_phi_fu_501_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state83))) begin
                ap_NS_fsm = ap_ST_fsm_state93;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            if (((ap_phi_mux_k_2_2_phi_fu_525_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state94))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state95;
            end
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state104 : begin
            if (((icmp_ln110_fu_996_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state104))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state105;
            end
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln104_1_fu_966_p2 = (phi_mul_reg_292 + zext_ln68_1_reg_1104);

assign add_ln104_fu_975_p2 = ($signed(zext_ln104_fu_971_p1) + $signed(p_cast36_reg_1080));

assign add_ln110_fu_985_p2 = (i_reg_545 + 14'd1);

assign add_ln68_fu_683_p2 = (z_reg_315 + 3'd1);

assign add_ln78_1_fu_762_p2 = (zext_ln68_3_reg_1116 + 5'd12);

assign add_ln78_2_fu_790_p2 = ($signed(zext_ln68_3_reg_1116) + $signed(5'd18));

assign add_ln78_3_fu_851_p2 = (zext_ln68_2_reg_1109 + 6'd30);

assign add_ln78_4_fu_878_p2 = ($signed(zext_ln68_2_reg_1109) + $signed(6'd36));

assign add_ln78_5_fu_905_p2 = ($signed(zext_ln68_2_reg_1109) + $signed(6'd42));

assign add_ln78_fu_734_p2 = (zext_ln68_4_reg_1122 + 4'd6);

assign add_ln84_1_fu_752_p2 = (tmp2_fu_744_p3 + p_cast24_reg_1085);

assign add_ln84_2_fu_780_p2 = (tmp4_fu_772_p3 + zext_ln68_reg_1092);

assign add_ln84_3_fu_807_p2 = (tmp6_fu_800_p3 + zext_ln67_reg_1070);

assign add_ln84_4_fu_841_p2 = (tmp8_fu_834_p3 + p_cast24_reg_1085);

assign add_ln84_5_fu_868_p2 = (tmp10_fu_861_p3 + zext_ln68_reg_1092);

assign add_ln84_6_fu_895_p2 = (tmp12_fu_888_p3 + zext_ln67_reg_1070);

assign add_ln84_7_fu_922_p2 = (tmp14_fu_915_p3 + p_cast24_reg_1085);

assign add_ln84_8_fu_956_p2 = (tmp16_fu_949_p3 + zext_ln68_reg_1092);

assign add_ln84_fu_724_p2 = (tmp_fu_716_p3 + zext_ln67_reg_1070);

assign and_ln111_fu_1036_p2 = (or_ln111_fu_1032_p2 & grp_fu_29505_p_dout0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

assign ap_phi_mux_k_0_0_phi_fu_332_p4 = k_0_0_reg_327;

assign ap_phi_mux_k_0_1_phi_fu_357_p4 = k_0_1_reg_352;

assign ap_phi_mux_k_0_2_phi_fu_381_p4 = k_0_2_reg_376;

assign ap_phi_mux_k_1_0_phi_fu_405_p4 = k_1_0_reg_400;

assign ap_phi_mux_k_1_1_phi_fu_429_p4 = k_1_1_reg_424;

assign ap_phi_mux_k_1_2_phi_fu_453_p4 = k_1_2_reg_448;

assign ap_phi_mux_k_2_0_phi_fu_477_p4 = k_2_0_reg_472;

assign ap_phi_mux_k_2_1_phi_fu_501_p4 = k_2_1_reg_496;

assign ap_phi_mux_k_2_2_phi_fu_525_p4 = k_2_2_reg_520;

assign bitcast_ln111_fu_1002_p1 = output_r_q0;

assign empty_66_fu_613_p2 = (x_reg_280 + 6'd2);

assign empty_67_fu_619_p2 = (y_reg_304 + 5'd1);

assign empty_69_fu_659_p2 = (p_shl_cast_fu_643_p1 - p_shl1_cast_fu_655_p1);

assign empty_70_fu_673_p2 = (y_reg_304 + 5'd2);

assign empty_fu_595_p2 = (x_reg_280 + 6'd1);

assign grp_fu_29505_p_ce = 1'b1;

assign grp_fu_29505_p_din0 = output_r_q0;

assign grp_fu_29505_p_din1 = 32'd0;

assign grp_fu_29505_p_opcode = 5'd4;

assign grp_fu_49873_p_ce = 1'b1;

assign grp_fu_49873_p_din0 = grp_fu_556_p0;

assign grp_fu_49873_p_din1 = reg_590;

assign grp_fu_49873_p_opcode = 2'd0;

assign grp_fu_49877_p_ce = 1'b1;

assign grp_fu_49877_p_din0 = reg_580;

assign grp_fu_49877_p_din1 = inputs_q0;

assign grp_fu_556_ce = 1'b1;

assign grp_fu_556_p1 = reg_590;

assign grp_fu_556_p2 = grp_fu_49873_p_dout0;

assign grp_fu_569_ce = 1'b1;

assign grp_fu_569_p0 = reg_580;

assign grp_fu_569_p1 = inputs_q0;

assign grp_fu_569_p2 = grp_fu_49877_p_dout0;

assign grp_fu_574_ce = 1'b1;

assign grp_fu_574_opcode = 5'd4;

assign grp_fu_574_p0 = output_r_q0;

assign grp_fu_574_p1 = 32'd0;

assign grp_fu_574_p2 = grp_fu_29505_p_dout0;

assign icmp_ln110_fu_996_p2 = ((i_reg_545 == 14'd8280) ? 1'b1 : 1'b0);

assign icmp_ln111_1_fu_1026_p2 = ((trunc_ln111_fu_1016_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln111_fu_1020_p2 = ((tmp_s_fu_1006_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_607_p2 = ((x_reg_280 == 6'd46) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_629_p2 = ((y_reg_304 == 5'd30) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_705_p2 = ((z_reg_315 == 3'd6) ? 1'b1 : 1'b0);

assign next_mul_fu_601_p2 = (phi_mul_reg_292 + 13'd180);

assign or_ln111_fu_1032_p2 = (icmp_ln111_reg_1283 | icmp_ln111_1_reg_1288);

assign or_ln78_1_fu_932_p3 = {{2'd2}, {z_reg_315}};

assign or_ln_fu_817_p3 = {{1'd1}, {z_reg_315}};

assign p_cast24_fu_669_p1 = empty_67_fu_619_p2;

assign p_cast36_fu_665_p1 = $signed(empty_69_fu_659_p2);

assign p_shl1_cast_fu_655_p1 = p_shl1_fu_647_p3;

assign p_shl1_fu_647_p3 = {{y_reg_304}, {1'd0}};

assign p_shl_cast_fu_643_p1 = p_shl_fu_635_p3;

assign p_shl_fu_635_p3 = {{y_reg_304}, {3'd0}};

assign sext_ln78_1_fu_940_p1 = $signed(or_ln78_1_fu_932_p3);

assign sext_ln78_fu_825_p1 = $signed(or_ln_fu_817_p3);

assign tmp10_fu_861_p3 = {{empty_reg_1042}, {5'd0}};

assign tmp12_fu_888_p3 = {{empty_66_reg_1058}, {5'd0}};

assign tmp14_fu_915_p3 = {{empty_66_reg_1058}, {5'd0}};

assign tmp16_fu_949_p3 = {{empty_66_reg_1058}, {5'd0}};

assign tmp2_fu_744_p3 = {{x_reg_280}, {5'd0}};

assign tmp4_fu_772_p3 = {{x_reg_280}, {5'd0}};

assign tmp6_fu_800_p3 = {{empty_reg_1042}, {5'd0}};

assign tmp8_fu_834_p3 = {{empty_reg_1042}, {5'd0}};

assign tmp_fu_716_p3 = {{x_reg_280}, {5'd0}};

assign tmp_s_fu_1006_p4 = {{bitcast_ln111_fu_1002_p1[30:23]}};

assign trunc_ln111_fu_1016_p1 = bitcast_ln111_fu_1002_p1[22:0];

assign zext_ln104_1_fu_980_p1 = add_ln104_fu_975_p2;

assign zext_ln104_fu_971_p1 = add_ln104_1_fu_966_p2;

assign zext_ln110_fu_991_p1 = i_reg_545;

assign zext_ln67_fu_625_p1 = y_reg_304;

assign zext_ln68_1_fu_689_p1 = z_reg_315;

assign zext_ln68_2_fu_693_p1 = z_reg_315;

assign zext_ln68_3_fu_697_p1 = z_reg_315;

assign zext_ln68_4_fu_701_p1 = z_reg_315;

assign zext_ln68_fu_679_p1 = empty_70_fu_673_p2;

assign zext_ln78_1_fu_739_p1 = add_ln78_fu_734_p2;

assign zext_ln78_2_fu_767_p1 = add_ln78_1_fu_762_p2;

assign zext_ln78_3_fu_795_p1 = add_ln78_2_fu_790_p2;

assign zext_ln78_4_fu_829_p1 = $unsigned(sext_ln78_fu_825_p1);

assign zext_ln78_5_fu_856_p1 = add_ln78_3_fu_851_p2;

assign zext_ln78_6_fu_883_p1 = add_ln78_4_fu_878_p2;

assign zext_ln78_7_fu_910_p1 = add_ln78_5_fu_905_p2;

assign zext_ln78_8_fu_944_p1 = $unsigned(sext_ln78_1_fu_940_p1);

assign zext_ln78_fu_711_p1 = z_reg_315;

assign zext_ln84_1_fu_757_p1 = add_ln84_1_fu_752_p2;

assign zext_ln84_2_fu_785_p1 = add_ln84_2_fu_780_p2;

assign zext_ln84_3_fu_812_p1 = add_ln84_3_fu_807_p2;

assign zext_ln84_4_fu_846_p1 = add_ln84_4_fu_841_p2;

assign zext_ln84_5_fu_873_p1 = add_ln84_5_fu_868_p2;

assign zext_ln84_6_fu_900_p1 = add_ln84_6_fu_895_p2;

assign zext_ln84_7_fu_927_p1 = add_ln84_7_fu_922_p2;

assign zext_ln84_8_fu_961_p1 = add_ln84_8_fu_956_p2;

assign zext_ln84_fu_729_p1 = add_ln84_fu_724_p2;

always @ (posedge ap_clk) begin
    zext_ln67_reg_1070[10:5] <= 6'b000000;
    p_cast36_reg_1080[0] <= 1'b0;
    p_cast24_reg_1085[10:5] <= 6'b000000;
    zext_ln68_reg_1092[10:5] <= 6'b000000;
    zext_ln68_1_reg_1104[12:3] <= 10'b0000000000;
    zext_ln68_2_reg_1109[5:3] <= 3'b000;
    zext_ln68_3_reg_1116[4:3] <= 2'b00;
    zext_ln68_4_reg_1122[3] <= 1'b0;
end

endmodule //runner_conv2d_2
