// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module runner_dense_layer3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        layer_7_output_address0,
        layer_7_output_ce0,
        layer_7_output_q0,
        grp_fu_49873_p_din0,
        grp_fu_49873_p_din1,
        grp_fu_49873_p_opcode,
        grp_fu_49873_p_dout0,
        grp_fu_49873_p_ce,
        grp_fu_49877_p_din0,
        grp_fu_49877_p_din1,
        grp_fu_49877_p_dout0,
        grp_fu_49877_p_ce,
        grp_fu_29496_p_din0,
        grp_fu_29496_p_dout0,
        grp_fu_29496_p_ce,
        grp_fu_29510_p_din0,
        grp_fu_29510_p_din1,
        grp_fu_29510_p_dout0,
        grp_fu_29510_p_ce
);

parameter    ap_ST_fsm_state1 = 70'd1;
parameter    ap_ST_fsm_state2 = 70'd2;
parameter    ap_ST_fsm_state3 = 70'd4;
parameter    ap_ST_fsm_state4 = 70'd8;
parameter    ap_ST_fsm_state5 = 70'd16;
parameter    ap_ST_fsm_state6 = 70'd32;
parameter    ap_ST_fsm_state7 = 70'd64;
parameter    ap_ST_fsm_state8 = 70'd128;
parameter    ap_ST_fsm_state9 = 70'd256;
parameter    ap_ST_fsm_state10 = 70'd512;
parameter    ap_ST_fsm_state11 = 70'd1024;
parameter    ap_ST_fsm_state12 = 70'd2048;
parameter    ap_ST_fsm_state13 = 70'd4096;
parameter    ap_ST_fsm_state14 = 70'd8192;
parameter    ap_ST_fsm_state15 = 70'd16384;
parameter    ap_ST_fsm_state16 = 70'd32768;
parameter    ap_ST_fsm_state17 = 70'd65536;
parameter    ap_ST_fsm_state18 = 70'd131072;
parameter    ap_ST_fsm_state19 = 70'd262144;
parameter    ap_ST_fsm_state20 = 70'd524288;
parameter    ap_ST_fsm_state21 = 70'd1048576;
parameter    ap_ST_fsm_state22 = 70'd2097152;
parameter    ap_ST_fsm_state23 = 70'd4194304;
parameter    ap_ST_fsm_state24 = 70'd8388608;
parameter    ap_ST_fsm_state25 = 70'd16777216;
parameter    ap_ST_fsm_state26 = 70'd33554432;
parameter    ap_ST_fsm_state27 = 70'd67108864;
parameter    ap_ST_fsm_state28 = 70'd134217728;
parameter    ap_ST_fsm_state29 = 70'd268435456;
parameter    ap_ST_fsm_state30 = 70'd536870912;
parameter    ap_ST_fsm_state31 = 70'd1073741824;
parameter    ap_ST_fsm_state32 = 70'd2147483648;
parameter    ap_ST_fsm_state33 = 70'd4294967296;
parameter    ap_ST_fsm_state34 = 70'd8589934592;
parameter    ap_ST_fsm_state35 = 70'd17179869184;
parameter    ap_ST_fsm_state36 = 70'd34359738368;
parameter    ap_ST_fsm_state37 = 70'd68719476736;
parameter    ap_ST_fsm_state38 = 70'd137438953472;
parameter    ap_ST_fsm_state39 = 70'd274877906944;
parameter    ap_ST_fsm_state40 = 70'd549755813888;
parameter    ap_ST_fsm_state41 = 70'd1099511627776;
parameter    ap_ST_fsm_state42 = 70'd2199023255552;
parameter    ap_ST_fsm_state43 = 70'd4398046511104;
parameter    ap_ST_fsm_state44 = 70'd8796093022208;
parameter    ap_ST_fsm_state45 = 70'd17592186044416;
parameter    ap_ST_fsm_state46 = 70'd35184372088832;
parameter    ap_ST_fsm_state47 = 70'd70368744177664;
parameter    ap_ST_fsm_state48 = 70'd140737488355328;
parameter    ap_ST_fsm_state49 = 70'd281474976710656;
parameter    ap_ST_fsm_state50 = 70'd562949953421312;
parameter    ap_ST_fsm_state51 = 70'd1125899906842624;
parameter    ap_ST_fsm_state52 = 70'd2251799813685248;
parameter    ap_ST_fsm_state53 = 70'd4503599627370496;
parameter    ap_ST_fsm_state54 = 70'd9007199254740992;
parameter    ap_ST_fsm_state55 = 70'd18014398509481984;
parameter    ap_ST_fsm_state56 = 70'd36028797018963968;
parameter    ap_ST_fsm_state57 = 70'd72057594037927936;
parameter    ap_ST_fsm_state58 = 70'd144115188075855872;
parameter    ap_ST_fsm_state59 = 70'd288230376151711744;
parameter    ap_ST_fsm_state60 = 70'd576460752303423488;
parameter    ap_ST_fsm_state61 = 70'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 70'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 70'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 70'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 70'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 70'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 70'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 70'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 70'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 70'd590295810358705651712;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;
output  [4:0] layer_7_output_address0;
output   layer_7_output_ce0;
input  [31:0] layer_7_output_q0;
output  [31:0] grp_fu_49873_p_din0;
output  [31:0] grp_fu_49873_p_din1;
output  [1:0] grp_fu_49873_p_opcode;
input  [31:0] grp_fu_49873_p_dout0;
output   grp_fu_49873_p_ce;
output  [31:0] grp_fu_49877_p_din0;
output  [31:0] grp_fu_49877_p_din1;
input  [31:0] grp_fu_49877_p_dout0;
output   grp_fu_49877_p_ce;
output  [63:0] grp_fu_29496_p_din0;
input  [31:0] grp_fu_29496_p_dout0;
output   grp_fu_29496_p_ce;
output  [63:0] grp_fu_29510_p_din0;
output  [63:0] grp_fu_29510_p_din1;
input  [63:0] grp_fu_29510_p_dout0;
output   grp_fu_29510_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;
reg layer_7_output_ce0;

(* fsm_encoding = "none" *) reg   [69:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] layer8_weights_address0;
reg    layer8_weights_ce0;
wire   [31:0] layer8_weights_q0;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state45;
wire   [63:0] grp_fu_244_p1;
reg   [63:0] reg_276;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state46;
wire   [1:0] add_ln16_fu_283_p2;
wire    ap_CS_fsm_state2;
wire   [4:0] add_ln21_fu_300_p2;
reg   [4:0] add_ln21_reg_533;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln21_fu_315_p2;
wire   [6:0] empty_60_fu_329_p2;
reg   [6:0] empty_60_reg_546;
reg   [31:0] layer_7_output_load_reg_551;
wire    ap_CS_fsm_state4;
wire   [1:0] add_ln23_fu_335_p2;
reg   [1:0] add_ln23_reg_556;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln23_fu_350_p2;
reg   [1:0] output_addr_5_reg_569;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_235_p2;
reg   [31:0] mul8_reg_579;
wire    ap_CS_fsm_state9;
wire   [1:0] add_ln39_fu_377_p2;
reg   [1:0] add_ln39_reg_587;
wire    ap_CS_fsm_state17;
wire   [0:0] icmp_ln39_fu_371_p2;
reg   [63:0] max_2_reg_597;
wire    ap_CS_fsm_state19;
wire   [63:0] max_3_fu_466_p3;
wire    ap_CS_fsm_state20;
wire   [1:0] add_ln46_fu_473_p2;
reg   [1:0] add_ln46_reg_609;
wire    ap_CS_fsm_state21;
reg   [1:0] output_addr_6_reg_617;
wire   [0:0] icmp_ln46_fu_484_p2;
wire   [0:0] icmp_ln48_fu_490_p2;
reg   [0:0] icmp_ln48_reg_622;
wire   [63:0] grp_fu_254_p2;
reg   [63:0] sub_reg_627;
wire    ap_CS_fsm_state28;
wire   [31:0] grp_fu_240_p1;
reg   [31:0] conv1_reg_632;
wire    ap_CS_fsm_state30;
wire   [31:0] grp_fu_248_p2;
reg   [31:0] tmp_reg_637;
wire    ap_CS_fsm_state38;
wire   [63:0] grp_fu_496_p3;
wire    ap_CS_fsm_state43;
wire   [1:0] add_ln51_fu_503_p2;
reg   [1:0] add_ln51_reg_647;
wire    ap_CS_fsm_state44;
reg   [1:0] output_addr_7_reg_655;
wire   [0:0] icmp_ln51_fu_514_p2;
wire   [63:0] grp_fu_259_p2;
reg   [63:0] div_reg_660;
wire    ap_CS_fsm_state68;
reg   [1:0] i_reg_141;
wire   [0:0] icmp_ln16_fu_294_p2;
reg   [4:0] i_1_reg_152;
reg   [1:0] j_reg_163;
wire    ap_CS_fsm_state14;
reg   [1:0] i_2_reg_174;
reg   [63:0] max_1_reg_185;
reg   [1:0] i_3_reg_195;
reg   [63:0] sum_reg_206;
reg   [1:0] i_4_reg_218;
wire    ap_CS_fsm_state70;
wire   [63:0] zext_ln16_fu_289_p1;
wire   [63:0] zext_ln21_fu_306_p1;
wire   [63:0] zext_ln25_fu_361_p1;
wire   [63:0] zext_ln23_fu_341_p1;
wire   [63:0] i_2_cast_fu_366_p1;
wire   [63:0] zext_ln46_fu_479_p1;
wire   [63:0] zext_ln51_fu_509_p1;
wire   [31:0] grp_fu_229_p2;
wire   [31:0] grp_fu_229_p0;
wire   [31:0] grp_fu_229_p1;
wire   [31:0] grp_fu_235_p0;
wire   [31:0] grp_fu_235_p1;
reg   [63:0] grp_fu_240_p0;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state69;
reg   [31:0] grp_fu_244_p0;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state24;
wire   [63:0] grp_fu_259_p0;
wire   [63:0] grp_fu_259_p1;
wire    ap_CS_fsm_state47;
wire   [6:0] p_shl_fu_321_p3;
wire   [6:0] zext_ln21_1_fu_311_p1;
wire   [6:0] zext_ln23_2_fu_346_p1;
wire   [6:0] add_ln25_fu_356_p2;
wire   [63:0] bitcast_ln40_fu_383_p1;
wire   [63:0] bitcast_ln40_1_fu_400_p1;
wire   [10:0] tmp_s_fu_386_p4;
wire   [51:0] trunc_ln40_fu_396_p1;
wire   [0:0] icmp_ln40_1_fu_424_p2;
wire   [0:0] icmp_ln40_fu_418_p2;
wire   [10:0] tmp_30_fu_404_p4;
wire   [51:0] trunc_ln40_1_fu_414_p1;
wire   [0:0] icmp_ln40_3_fu_442_p2;
wire   [0:0] icmp_ln40_2_fu_436_p2;
wire   [0:0] or_ln40_fu_430_p2;
wire   [0:0] or_ln40_1_fu_448_p2;
wire   [0:0] and_ln40_fu_454_p2;
wire   [0:0] grp_fu_264_p2;
wire   [0:0] and_ln40_1_fu_460_p2;
wire    ap_CS_fsm_state41;
wire    grp_fu_229_ce;
wire    grp_fu_235_ce;
wire    grp_fu_240_ce;
wire    grp_fu_259_ce;
reg    grp_fu_496_in_valid;
reg   [69:0] ap_NS_fsm;
wire   [63:0] grp_fu_496_p0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 70'd1;
end

runner_dense_layer3_layer8_weights #(
    .DataWidth( 32 ),
    .AddressRange( 72 ),
    .AddressWidth( 7 ))
layer8_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer8_weights_address0),
    .ce0(layer8_weights_ce0),
    .q0(layer8_weights_q0)
);

runner_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_244_p0),
    .ce(1'b1),
    .dout(grp_fu_244_p1)
);

runner_fexp_32ns_32ns_32_8_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fexp_32ns_32ns_32_8_full_dsp_1_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(conv1_reg_632),
    .ce(1'b1),
    .dout(grp_fu_248_p2)
);

runner_dsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_5_full_dsp_1_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_276),
    .din1(max_1_reg_185),
    .ce(1'b1),
    .dout(grp_fu_254_p2)
);

runner_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_244_p1),
    .din1(max_1_reg_185),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_264_p2)
);

runner_dacc_64ns_64ns_1ns_64_3_no_dsp_1 #(
    .DWIDTH( 64 ))
dacc_64ns_64ns_1ns_64_3_no_dsp_1_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .ce(1'b1),
    .in_data(reg_276),
    .in_last(icmp_ln48_reg_622),
    .in_valid(grp_fu_496_in_valid),
    .out_data(grp_fu_496_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_294_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_152 <= 5'd0;
    end else if (((icmp_ln23_fu_350_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_1_reg_152 <= add_ln21_reg_533;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i_2_reg_174 <= add_ln39_reg_587;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        i_2_reg_174 <= 2'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_371_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        i_3_reg_195 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        i_3_reg_195 <= add_ln46_reg_609;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_484_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        i_4_reg_218 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        i_4_reg_218 <= add_ln51_reg_647;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_141 <= 2'd0;
    end else if (((icmp_ln16_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_141 <= add_ln16_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_163 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        j_reg_163 <= add_ln23_reg_556;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        max_1_reg_185 <= max_3_fu_466_p3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        max_1_reg_185 <= grp_fu_244_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_371_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        sum_reg_206 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        sum_reg_206 <= grp_fu_496_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln21_reg_533 <= add_ln21_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln23_reg_556 <= add_ln23_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        add_ln39_reg_587 <= add_ln39_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        add_ln46_reg_609 <= add_ln46_fu_473_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        add_ln51_reg_647 <= add_ln51_fu_503_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        conv1_reg_632 <= grp_fu_29496_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        div_reg_660 <= grp_fu_29510_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln21_fu_315_p2 == 1'd0))) begin
        empty_60_reg_546 <= empty_60_fu_329_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_484_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        icmp_ln48_reg_622 <= icmp_ln48_fu_490_p2;
        output_addr_6_reg_617 <= zext_ln46_fu_479_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        layer_7_output_load_reg_551 <= layer_7_output_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        max_2_reg_597 <= grp_fu_244_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mul8_reg_579 <= grp_fu_49877_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        output_addr_5_reg_569 <= zext_ln23_fu_341_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_fu_514_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        output_addr_7_reg_655 <= zext_ln51_fu_509_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_276 <= grp_fu_244_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        sub_reg_627 <= grp_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        tmp_reg_637 <= grp_fu_248_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln51_fu_514_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln51_fu_514_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        grp_fu_240_p0 = div_reg_660;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_240_p0 = sub_reg_627;
    end else begin
        grp_fu_240_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_244_p0 = tmp_reg_637;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_fu_244_p0 = output_r_q0;
    end else begin
        grp_fu_244_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_496_in_valid = 1'b1;
    end else begin
        grp_fu_496_in_valid = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        layer8_weights_ce0 = 1'b1;
    end else begin
        layer8_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        layer_7_output_ce0 = 1'b1;
    end else begin
        layer_7_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        output_r_address0 = output_addr_7_reg_655;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        output_r_address0 = zext_ln51_fu_509_p1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        output_r_address0 = output_addr_6_reg_617;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_r_address0 = zext_ln46_fu_479_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        output_r_address0 = i_2_cast_fu_366_p1;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9))) begin
        output_r_address0 = output_addr_5_reg_569;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_r_address0 = zext_ln16_fu_289_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        output_r_d0 = grp_fu_29496_p_dout0;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        output_r_d0 = grp_fu_248_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_r_d0 = grp_fu_49873_p_dout0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_r_d0 = 32'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state38) | ((icmp_ln16_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln16_fu_294_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln21_fu_315_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln23_fu_350_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((icmp_ln39_fu_371_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state21 : begin
            if (((icmp_ln46_fu_484_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state44 : begin
            if (((icmp_ln51_fu_514_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln16_fu_283_p2 = (i_reg_141 + 2'd1);

assign add_ln21_fu_300_p2 = (i_1_reg_152 + 5'd1);

assign add_ln23_fu_335_p2 = (j_reg_163 + 2'd1);

assign add_ln25_fu_356_p2 = (zext_ln23_2_fu_346_p1 + empty_60_reg_546);

assign add_ln39_fu_377_p2 = (i_2_reg_174 + 2'd1);

assign add_ln46_fu_473_p2 = (i_3_reg_195 + 2'd1);

assign add_ln51_fu_503_p2 = (i_4_reg_218 + 2'd1);

assign and_ln40_1_fu_460_p2 = (grp_fu_264_p2 & and_ln40_fu_454_p2);

assign and_ln40_fu_454_p2 = (or_ln40_fu_430_p2 & or_ln40_1_fu_448_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln40_1_fu_400_p1 = max_1_reg_185;

assign bitcast_ln40_fu_383_p1 = max_2_reg_597;

assign empty_60_fu_329_p2 = (p_shl_fu_321_p3 - zext_ln21_1_fu_311_p1);

assign grp_fu_229_ce = 1'b1;

assign grp_fu_229_p0 = output_r_q0;

assign grp_fu_229_p1 = mul8_reg_579;

assign grp_fu_229_p2 = grp_fu_49873_p_dout0;

assign grp_fu_235_ce = 1'b1;

assign grp_fu_235_p0 = layer_7_output_load_reg_551;

assign grp_fu_235_p1 = layer8_weights_q0;

assign grp_fu_235_p2 = grp_fu_49877_p_dout0;

assign grp_fu_240_ce = 1'b1;

assign grp_fu_240_p1 = grp_fu_29496_p_dout0;

assign grp_fu_259_ce = 1'b1;

assign grp_fu_259_p0 = reg_276;

assign grp_fu_259_p1 = sum_reg_206;

assign grp_fu_259_p2 = grp_fu_29510_p_dout0;

assign grp_fu_29496_p_ce = 1'b1;

assign grp_fu_29496_p_din0 = grp_fu_240_p0;

assign grp_fu_29510_p_ce = 1'b1;

assign grp_fu_29510_p_din0 = reg_276;

assign grp_fu_29510_p_din1 = sum_reg_206;

assign grp_fu_49873_p_ce = 1'b1;

assign grp_fu_49873_p_din0 = output_r_q0;

assign grp_fu_49873_p_din1 = mul8_reg_579;

assign grp_fu_49873_p_opcode = 2'd0;

assign grp_fu_49877_p_ce = 1'b1;

assign grp_fu_49877_p_din0 = layer_7_output_load_reg_551;

assign grp_fu_49877_p_din1 = layer8_weights_q0;

assign i_2_cast_fu_366_p1 = i_2_reg_174;

assign icmp_ln16_fu_294_p2 = ((i_reg_141 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_315_p2 = ((i_1_reg_152 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_350_p2 = ((j_reg_163 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_371_p2 = ((i_2_reg_174 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln40_1_fu_424_p2 = ((trunc_ln40_fu_396_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln40_2_fu_436_p2 = ((tmp_30_fu_404_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln40_3_fu_442_p2 = ((trunc_ln40_1_fu_414_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_418_p2 = ((tmp_s_fu_386_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_484_p2 = ((i_3_reg_195 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_490_p2 = ((add_ln46_fu_473_p2 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_514_p2 = ((i_4_reg_218 == 2'd3) ? 1'b1 : 1'b0);

assign layer8_weights_address0 = zext_ln25_fu_361_p1;

assign layer_7_output_address0 = zext_ln21_fu_306_p1;

assign max_3_fu_466_p3 = ((and_ln40_1_fu_460_p2[0:0] == 1'b1) ? max_2_reg_597 : max_1_reg_185);

assign or_ln40_1_fu_448_p2 = (icmp_ln40_3_fu_442_p2 | icmp_ln40_2_fu_436_p2);

assign or_ln40_fu_430_p2 = (icmp_ln40_fu_418_p2 | icmp_ln40_1_fu_424_p2);

assign p_shl_fu_321_p3 = {{i_1_reg_152}, {2'd0}};

assign tmp_30_fu_404_p4 = {{bitcast_ln40_1_fu_400_p1[62:52]}};

assign tmp_s_fu_386_p4 = {{bitcast_ln40_fu_383_p1[62:52]}};

assign trunc_ln40_1_fu_414_p1 = bitcast_ln40_1_fu_400_p1[51:0];

assign trunc_ln40_fu_396_p1 = bitcast_ln40_fu_383_p1[51:0];

assign zext_ln16_fu_289_p1 = i_reg_141;

assign zext_ln21_1_fu_311_p1 = i_1_reg_152;

assign zext_ln21_fu_306_p1 = i_1_reg_152;

assign zext_ln23_2_fu_346_p1 = j_reg_163;

assign zext_ln23_fu_341_p1 = j_reg_163;

assign zext_ln25_fu_361_p1 = add_ln25_fu_356_p2;

assign zext_ln46_fu_479_p1 = i_3_reg_195;

assign zext_ln51_fu_509_p1 = i_4_reg_218;

endmodule //runner_dense_layer3
