// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module runner_dense_layer3_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        layer_5_output_address0,
        layer_5_output_ce0,
        layer_5_output_q0,
        grp_fu_49873_p_din0,
        grp_fu_49873_p_din1,
        grp_fu_49873_p_opcode,
        grp_fu_49873_p_dout0,
        grp_fu_49873_p_ce,
        grp_fu_49877_p_din0,
        grp_fu_49877_p_din1,
        grp_fu_49877_p_dout0,
        grp_fu_49877_p_ce,
        grp_fu_29505_p_din0,
        grp_fu_29505_p_din1,
        grp_fu_29505_p_opcode,
        grp_fu_29505_p_dout0,
        grp_fu_29505_p_ce
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;
output  [7:0] layer_5_output_address0;
output   layer_5_output_ce0;
input  [31:0] layer_5_output_q0;
output  [31:0] grp_fu_49873_p_din0;
output  [31:0] grp_fu_49873_p_din1;
output  [1:0] grp_fu_49873_p_opcode;
input  [31:0] grp_fu_49873_p_dout0;
output   grp_fu_49873_p_ce;
output  [31:0] grp_fu_49877_p_din0;
output  [31:0] grp_fu_49877_p_din1;
input  [31:0] grp_fu_49877_p_dout0;
output   grp_fu_49877_p_ce;
output  [31:0] grp_fu_29505_p_din0;
output  [31:0] grp_fu_29505_p_din1;
output  [4:0] grp_fu_29505_p_opcode;
input  [0:0] grp_fu_29505_p_dout0;
output   grp_fu_29505_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;
reg layer_5_output_ce0;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [12:0] layer7_weights_address0;
reg    layer7_weights_ce0;
wire   [31:0] layer7_weights_q0;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state16;
wire   [4:0] add_ln16_fu_177_p2;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln21_fu_194_p2;
reg   [7:0] add_ln21_reg_333;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln21_fu_205_p2;
wire   [12:0] empty_56_fu_231_p2;
reg   [12:0] empty_56_reg_346;
wire    ap_CS_fsm_state4;
reg   [31:0] layer_5_output_load_reg_351;
wire   [4:0] add_ln23_fu_237_p2;
reg   [4:0] add_ln23_reg_356;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln23_fu_252_p2;
reg   [4:0] output_addr_2_reg_369;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_160_p2;
reg   [31:0] mul8_reg_379;
wire    ap_CS_fsm_state9;
wire   [4:0] add_ln31_fu_268_p2;
reg   [4:0] add_ln31_reg_384;
wire    ap_CS_fsm_state15;
reg   [4:0] output_addr_1_reg_392;
wire   [0:0] icmp_ln31_fu_279_p2;
wire   [0:0] icmp_ln32_fu_303_p2;
reg   [0:0] icmp_ln32_reg_397;
wire   [0:0] icmp_ln32_1_fu_309_p2;
reg   [0:0] icmp_ln32_1_reg_402;
reg   [4:0] i_reg_109;
wire   [0:0] icmp_ln16_fu_188_p2;
reg   [7:0] i_1_reg_120;
reg   [4:0] j_reg_132;
wire    ap_CS_fsm_state14;
reg   [4:0] i_2_reg_143;
wire    ap_CS_fsm_state17;
wire   [63:0] zext_ln16_fu_183_p1;
wire   [63:0] zext_ln21_fu_200_p1;
wire   [63:0] zext_ln25_fu_263_p1;
wire   [63:0] zext_ln23_fu_243_p1;
wire   [63:0] zext_ln31_fu_274_p1;
wire   [31:0] grp_fu_154_p2;
wire   [0:0] and_ln32_fu_319_p2;
wire   [31:0] grp_fu_154_p0;
wire   [31:0] grp_fu_154_p1;
wire   [31:0] grp_fu_160_p0;
wire   [31:0] grp_fu_160_p1;
wire   [31:0] grp_fu_165_p0;
wire   [31:0] grp_fu_165_p1;
wire   [10:0] p_shl1_fu_219_p3;
wire   [12:0] p_shl_fu_211_p3;
wire   [12:0] p_shl1_cast_fu_227_p1;
wire   [12:0] zext_ln23_1_fu_248_p1;
wire   [12:0] add_ln25_fu_258_p2;
wire   [31:0] bitcast_ln32_fu_285_p1;
wire   [7:0] tmp_fu_289_p4;
wire   [22:0] trunc_ln32_fu_299_p1;
wire   [0:0] or_ln32_fu_315_p2;
wire   [0:0] grp_fu_165_p2;
wire    grp_fu_154_ce;
wire    grp_fu_160_ce;
wire    grp_fu_165_ce;
wire   [4:0] grp_fu_165_opcode;
reg   [16:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
end

runner_dense_layer3_1_layer7_weights #(
    .DataWidth( 32 ),
    .AddressRange( 4608 ),
    .AddressWidth( 13 ))
layer7_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer7_weights_address0),
    .ce0(layer7_weights_ce0),
    .q0(layer7_weights_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln16_fu_188_p2 == 1'd1))) begin
        i_1_reg_120 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln23_fu_252_p2 == 1'd1))) begin
        i_1_reg_120 <= add_ln21_reg_333;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_2_reg_143 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        i_2_reg_143 <= add_ln31_reg_384;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_109 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln16_fu_188_p2 == 1'd0))) begin
        i_reg_109 <= add_ln16_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_132 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        j_reg_132 <= add_ln23_reg_356;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln21_reg_333 <= add_ln21_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln23_reg_356 <= add_ln23_fu_237_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        add_ln31_reg_384 <= add_ln31_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        empty_56_reg_346[12 : 3] <= empty_56_fu_231_p2[12 : 3];
        layer_5_output_load_reg_351 <= layer_5_output_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        icmp_ln32_1_reg_402 <= icmp_ln32_1_fu_309_p2;
        icmp_ln32_reg_397 <= icmp_ln32_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mul8_reg_379 <= grp_fu_49877_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln31_fu_279_p2 == 1'd0))) begin
        output_addr_1_reg_392 <= zext_ln31_fu_274_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln23_fu_252_p2 == 1'd0))) begin
        output_addr_2_reg_369 <= zext_ln23_fu_243_p1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state15) & (icmp_ln31_fu_279_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln31_fu_279_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        layer7_weights_ce0 = 1'b1;
    end else begin
        layer7_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        layer_5_output_ce0 = 1'b1;
    end else begin
        layer_5_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        output_r_address0 = output_addr_1_reg_392;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        output_r_address0 = zext_ln31_fu_274_p1;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9))) begin
        output_r_address0 = output_addr_2_reg_369;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_r_address0 = zext_ln16_fu_183_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state9))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output_r_d0 = grp_fu_49873_p_dout0;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state17))) begin
        output_r_d0 = 32'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln16_fu_188_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state17) & (1'd1 == and_ln32_fu_319_p2)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln16_fu_188_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln21_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln23_fu_252_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln31_fu_279_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln16_fu_177_p2 = (i_reg_109 + 5'd1);

assign add_ln21_fu_194_p2 = (i_1_reg_120 + 8'd1);

assign add_ln23_fu_237_p2 = (j_reg_132 + 5'd1);

assign add_ln25_fu_258_p2 = (zext_ln23_1_fu_248_p1 + empty_56_reg_346);

assign add_ln31_fu_268_p2 = (i_2_reg_143 + 5'd1);

assign and_ln32_fu_319_p2 = (or_ln32_fu_315_p2 & grp_fu_29505_p_dout0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln32_fu_285_p1 = output_r_q0;

assign empty_56_fu_231_p2 = (p_shl_fu_211_p3 - p_shl1_cast_fu_227_p1);

assign grp_fu_154_ce = 1'b1;

assign grp_fu_154_p0 = output_r_q0;

assign grp_fu_154_p1 = mul8_reg_379;

assign grp_fu_154_p2 = grp_fu_49873_p_dout0;

assign grp_fu_160_ce = 1'b1;

assign grp_fu_160_p0 = layer_5_output_load_reg_351;

assign grp_fu_160_p1 = layer7_weights_q0;

assign grp_fu_160_p2 = grp_fu_49877_p_dout0;

assign grp_fu_165_ce = 1'b1;

assign grp_fu_165_opcode = 5'd4;

assign grp_fu_165_p0 = output_r_q0;

assign grp_fu_165_p1 = 32'd0;

assign grp_fu_165_p2 = grp_fu_29505_p_dout0;

assign grp_fu_29505_p_ce = 1'b1;

assign grp_fu_29505_p_din0 = output_r_q0;

assign grp_fu_29505_p_din1 = 32'd0;

assign grp_fu_29505_p_opcode = 5'd4;

assign grp_fu_49873_p_ce = 1'b1;

assign grp_fu_49873_p_din0 = output_r_q0;

assign grp_fu_49873_p_din1 = mul8_reg_379;

assign grp_fu_49873_p_opcode = 2'd0;

assign grp_fu_49877_p_ce = 1'b1;

assign grp_fu_49877_p_din0 = layer_5_output_load_reg_351;

assign grp_fu_49877_p_din1 = layer7_weights_q0;

assign icmp_ln16_fu_188_p2 = ((i_reg_109 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_205_p2 = ((i_1_reg_120 == 8'd192) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_252_p2 = ((j_reg_132 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_279_p2 = ((i_2_reg_143 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln32_1_fu_309_p2 = ((trunc_ln32_fu_299_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_303_p2 = ((tmp_fu_289_p4 != 8'd255) ? 1'b1 : 1'b0);

assign layer7_weights_address0 = zext_ln25_fu_263_p1;

assign layer_5_output_address0 = zext_ln21_fu_200_p1;

assign or_ln32_fu_315_p2 = (icmp_ln32_reg_397 | icmp_ln32_1_reg_402);

assign p_shl1_cast_fu_227_p1 = p_shl1_fu_219_p3;

assign p_shl1_fu_219_p3 = {{i_1_reg_120}, {3'd0}};

assign p_shl_fu_211_p3 = {{i_1_reg_120}, {5'd0}};

assign tmp_fu_289_p4 = {{bitcast_ln32_fu_285_p1[30:23]}};

assign trunc_ln32_fu_299_p1 = bitcast_ln32_fu_285_p1[22:0];

assign zext_ln16_fu_183_p1 = i_reg_109;

assign zext_ln21_fu_200_p1 = i_1_reg_120;

assign zext_ln23_1_fu_248_p1 = j_reg_132;

assign zext_ln23_fu_243_p1 = j_reg_132;

assign zext_ln25_fu_263_p1 = add_ln25_fu_258_p2;

assign zext_ln31_fu_274_p1 = i_2_reg_143;

always @ (posedge ap_clk) begin
    empty_56_reg_346[2:0] <= 3'b000;
end

endmodule //runner_dense_layer3_1
