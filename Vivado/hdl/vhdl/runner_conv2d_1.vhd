-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity runner_conv2d_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inputs_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    inputs_ce0 : OUT STD_LOGIC;
    inputs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_49873_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_49873_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_49873_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_49873_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_49873_p_ce : OUT STD_LOGIC;
    grp_fu_49877_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_49877_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_49877_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_49877_p_ce : OUT STD_LOGIC;
    grp_fu_29505_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_29505_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_29505_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_29505_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_29505_p_ce : OUT STD_LOGIC );
end;


architecture behav of runner_conv2d_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (94 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (94 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (94 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (94 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (94 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (94 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (94 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (94 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (94 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (94 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (94 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv11_5A : STD_LOGIC_VECTOR (10 downto 0) := "00001011010";
    constant ap_const_lv12_9C : STD_LOGIC_VECTOR (11 downto 0) := "000010011100";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv11_B4 : STD_LOGIC_VECTOR (10 downto 0) := "00010110100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_48 : STD_LOGIC_VECTOR (7 downto 0) := "01001000";
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv9_D8 : STD_LOGIC_VECTOR (8 downto 0) := "011011000";
    constant ap_const_lv9_120 : STD_LOGIC_VECTOR (8 downto 0) := "100100000";
    constant ap_const_lv9_168 : STD_LOGIC_VECTOR (8 downto 0) := "101101000";
    constant ap_const_lv10_1B0 : STD_LOGIC_VECTOR (9 downto 0) := "0110110000";
    constant ap_const_lv10_1F8 : STD_LOGIC_VECTOR (9 downto 0) := "0111111000";
    constant ap_const_lv10_240 : STD_LOGIC_VECTOR (9 downto 0) := "1001000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_CCC : STD_LOGIC_VECTOR (11 downto 0) := "110011001100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal layer2_weights_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer2_weights_ce0 : STD_LOGIC;
    signal layer2_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal grp_fu_570_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_592 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal add_ln66_fu_597_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln66_reg_1644 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul2_fu_603_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_mul2_reg_1649 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_mul_fu_609_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul_reg_1657 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_82_fu_621_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_82_reg_1665 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln66_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_83_fu_627_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_83_reg_1672 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_cast52_fu_669_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_cast52_reg_1680 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln67_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast38_fu_703_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_cast38_reg_1685 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_cast28_fu_707_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_cast28_reg_1690 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_cast41_fu_741_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_cast41_reg_1696 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_cast31_fu_745_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_cast31_reg_1701 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln68_fu_785_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln68_reg_1707 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln68_1_fu_789_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln68_1_reg_1712 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln68_fu_793_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln68_reg_1718 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln68_fu_799_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln68_reg_1723 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln68_5_fu_803_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln68_5_reg_1728 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln68_6_fu_807_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln68_6_reg_1735 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln68_7_fu_811_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln68_7_reg_1742 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln73_fu_821_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln73_reg_1752 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln73_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_fu_897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_reg_1770 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_903_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln73_1_fu_910_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln73_1_reg_1780 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln73_1_fu_920_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal add_ln73_2_fu_992_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln73_2_reg_1803 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal icmp_ln73_2_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal add_ln73_3_fu_1074_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln73_3_reg_1826 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal icmp_ln73_3_fu_1084_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal add_ln73_4_fu_1155_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln73_4_reg_1849 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal icmp_ln73_4_fu_1165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal add_ln73_5_fu_1236_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln73_5_reg_1872 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal icmp_ln73_5_fu_1246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal add_ln73_6_fu_1317_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln73_6_reg_1895 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal icmp_ln73_6_fu_1327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal add_ln73_7_fu_1402_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln73_7_reg_1918 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal icmp_ln73_7_fu_1412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal add_ln73_8_fu_1487_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln73_8_reg_1941 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal icmp_ln73_8_fu_1497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal add_ln110_fu_1587_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln110_reg_1964 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal output_addr_reg_1972 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln110_fu_1598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal icmp_ln111_fu_1622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_1982 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_2_fu_1628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_2_reg_1987 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_reg_290 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_301 : STD_LOGIC_VECTOR (11 downto 0);
    signal phi_mul1_reg_313 : STD_LOGIC_VECTOR (10 downto 0);
    signal y_reg_325 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln68_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_reg_336 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_0_0_reg_347 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_2_0_0_reg_358 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_1_reg_370 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_2_0_1_reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_2_reg_392 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_2_0_2_reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_0_reg_414 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_2_1_0_reg_425 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_1_reg_436 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_2_1_1_reg_447 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_2_reg_458 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_2_1_2_reg_469 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_2_0_reg_480 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_2_2_0_reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_2_1_reg_502 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_2_2_1_reg_513 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_2_2_reg_524 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_2_2_2_reg_535 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_547 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal sext_ln78_fu_872_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln84_fu_892_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln78_fu_967_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln84_1_fu_987_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln78_9_fu_1049_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln84_2_fu_1069_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln78_10_fu_1135_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_11_fu_1150_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln78_11_fu_1216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_12_fu_1231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln78_12_fu_1297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_13_fu_1312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln78_13_fu_1378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_15_fu_1397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln78_14_fu_1463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_17_fu_1482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln78_15_fu_1548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_19_fu_1567_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_fu_1582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln110_fu_1593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln111_fu_1638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_558_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_558_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal grp_fu_570_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_570_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_576_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_576_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_639_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_fu_651_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_647_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_659_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_85_fu_663_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_fu_673_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl3_fu_685_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_cast_fu_681_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast_fu_693_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_86_fu_697_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl6_fu_711_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl7_fu_723_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl6_cast_fu_719_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl7_cast_fu_731_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_87_fu_735_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_88_fu_749_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl4_fu_755_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl5_fu_767_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl10_cast_fu_763_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl11_cast_fu_775_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_89_fu_779_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_837_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln76_1_fu_849_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln76_fu_845_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln76_1_fu_857_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln76_fu_861_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln78_fu_867_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln73_fu_827_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln84_17_fu_877_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln84_fu_883_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln84_fu_887_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal shl_ln76_2_fu_926_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln76_3_fu_938_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln76_2_fu_934_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln76_3_fu_946_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln76_1_fu_950_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln78_6_fu_956_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln78_7_fu_962_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln73_1_fu_916_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln84_18_fu_972_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln84_9_fu_978_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln84_9_fu_982_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln76_4_fu_1008_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln76_5_fu_1020_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln76_4_fu_1016_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln76_5_fu_1028_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln76_2_fu_1032_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln78_8_fu_1038_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln78_9_fu_1044_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln73_2_fu_998_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln84_19_fu_1054_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln84_10_fu_1060_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln84_10_fu_1064_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln76_6_fu_1090_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln76_7_fu_1102_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln76_6_fu_1098_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln76_7_fu_1110_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln76_3_fu_1114_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln78_2_fu_1120_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln78_10_fu_1124_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln78_11_fu_1130_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln73_3_fu_1080_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln84_20_fu_1140_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln84_11_fu_1145_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln76_8_fu_1171_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln76_9_fu_1183_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln76_8_fu_1179_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln76_9_fu_1191_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln76_4_fu_1195_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln78_3_fu_1201_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln78_17_fu_1205_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln78_12_fu_1211_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln73_4_fu_1161_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln84_21_fu_1221_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln84_12_fu_1226_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln76_s_fu_1252_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln76_10_fu_1264_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln76_10_fu_1260_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln76_11_fu_1272_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln76_5_fu_1276_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln78_4_fu_1282_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln78_18_fu_1286_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln78_13_fu_1292_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln73_5_fu_1242_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln84_22_fu_1302_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln84_13_fu_1307_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln76_11_fu_1333_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln76_12_fu_1345_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln76_12_fu_1341_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln76_13_fu_1353_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln76_6_fu_1357_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln78_5_fu_1363_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln78_19_fu_1367_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln78_14_fu_1373_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln73_6_fu_1323_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln84_23_fu_1383_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln84_14_fu_1388_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln84_14_fu_1392_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln76_13_fu_1418_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln76_14_fu_1430_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln76_14_fu_1426_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln76_15_fu_1438_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln76_7_fu_1442_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln78_6_fu_1448_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln78_20_fu_1452_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln78_15_fu_1458_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln73_7_fu_1408_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln84_24_fu_1468_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln84_16_fu_1473_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln84_15_fu_1477_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln76_15_fu_1503_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln76_16_fu_1515_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln76_16_fu_1511_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln76_17_fu_1523_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln76_8_fu_1527_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln78_7_fu_1533_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln78_21_fu_1537_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln78_16_fu_1543_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln73_8_fu_1493_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln84_25_fu_1553_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln84_18_fu_1558_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln84_16_fu_1562_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln104_2_fu_1572_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln104_fu_1577_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln111_fu_1604_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1608_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln111_fu_1618_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln111_fu_1634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_558_ce : STD_LOGIC;
    signal grp_fu_570_ce : STD_LOGIC;
    signal grp_fu_576_ce : STD_LOGIC;
    signal grp_fu_576_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_903_in_valid : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (94 downto 0);
    signal grp_fu_903_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component runner_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component runner_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component runner_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component runner_facc_32ns_32ns_1ns_32_3_no_dsp_1 IS
    generic (
        DWIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        ce : IN STD_LOGIC;
        in_data : IN STD_LOGIC_VECTOR (31 downto 0);
        in_last : IN STD_LOGIC_VECTOR (0 downto 0);
        in_valid : IN STD_LOGIC;
        out_data : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component runner_conv2d_1_layer2_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    layer2_weights_U : component runner_conv2d_1_layer2_weights
    generic map (
        DataWidth => 32,
        AddressRange => 648,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_address0,
        ce0 => layer2_weights_ce0,
        q0 => layer2_weights_q0);

    facc_32ns_32ns_1ns_32_3_no_dsp_1_U16 : component runner_facc_32ns_32ns_1ns_32_3_no_dsp_1
    generic map (
        DWIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        ce => ap_const_logic_1,
        in_data => reg_592,
        in_last => icmp_ln90_reg_1770,
        in_valid => grp_fu_903_in_valid,
        out_data => grp_fu_903_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_547_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_615_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_547 <= ap_const_lv12_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
                i_reg_547 <= add_ln110_reg_1964;
            end if; 
        end if;
    end process;

    k_0_0_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_815_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                k_0_0_reg_347 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                k_0_0_reg_347 <= add_ln73_reg_1752;
            end if; 
        end if;
    end process;

    k_0_1_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_fu_831_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k_0_1_reg_370 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                k_0_1_reg_370 <= add_ln73_1_reg_1780;
            end if; 
        end if;
    end process;

    k_0_2_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_1_fu_920_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                k_0_2_reg_392 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                k_0_2_reg_392 <= add_ln73_2_reg_1803;
            end if; 
        end if;
    end process;

    k_1_0_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_2_fu_1002_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                k_1_0_reg_414 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                k_1_0_reg_414 <= add_ln73_3_reg_1826;
            end if; 
        end if;
    end process;

    k_1_1_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_3_fu_1084_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                k_1_1_reg_436 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                k_1_1_reg_436 <= add_ln73_4_reg_1849;
            end if; 
        end if;
    end process;

    k_1_2_reg_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_4_fu_1165_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                k_1_2_reg_458 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
                k_1_2_reg_458 <= add_ln73_5_reg_1872;
            end if; 
        end if;
    end process;

    k_2_0_reg_480_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_5_fu_1246_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                k_2_0_reg_480 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                k_2_0_reg_480 <= add_ln73_6_reg_1895;
            end if; 
        end if;
    end process;

    k_2_1_reg_502_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_6_fu_1327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then 
                k_2_1_reg_502 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
                k_2_1_reg_502 <= add_ln73_7_reg_1918;
            end if; 
        end if;
    end process;

    k_2_2_reg_524_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_7_fu_1412_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
                k_2_2_reg_524 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
                k_2_2_reg_524 <= add_ln73_8_reg_1941;
            end if; 
        end if;
    end process;

    phi_mul1_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul1_reg_313 <= ap_const_lv11_0;
            elsif (((icmp_ln67_fu_633_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul1_reg_313 <= next_mul2_reg_1649;
            end if; 
        end if;
    end process;

    phi_mul_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_301 <= ap_const_lv12_0;
            elsif (((icmp_ln67_fu_633_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_301 <= next_mul_reg_1657;
            end if; 
        end if;
    end process;

    sum_2_0_0_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_815_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                sum_2_0_0_reg_358 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                sum_2_0_0_reg_358 <= grp_fu_903_p3;
            end if; 
        end if;
    end process;

    sum_2_0_1_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_fu_831_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                sum_2_0_1_reg_381 <= sum_2_0_0_reg_358;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                sum_2_0_1_reg_381 <= grp_fu_49873_p_dout0;
            end if; 
        end if;
    end process;

    sum_2_0_2_reg_403_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_1_fu_920_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                sum_2_0_2_reg_403 <= sum_2_0_1_reg_381;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                sum_2_0_2_reg_403 <= grp_fu_49873_p_dout0;
            end if; 
        end if;
    end process;

    sum_2_1_0_reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_2_fu_1002_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                sum_2_1_0_reg_425 <= sum_2_0_2_reg_403;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                sum_2_1_0_reg_425 <= grp_fu_49873_p_dout0;
            end if; 
        end if;
    end process;

    sum_2_1_1_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_3_fu_1084_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                sum_2_1_1_reg_447 <= sum_2_1_0_reg_425;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                sum_2_1_1_reg_447 <= grp_fu_49873_p_dout0;
            end if; 
        end if;
    end process;

    sum_2_1_2_reg_469_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_4_fu_1165_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                sum_2_1_2_reg_469 <= sum_2_1_1_reg_447;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
                sum_2_1_2_reg_469 <= grp_fu_49873_p_dout0;
            end if; 
        end if;
    end process;

    sum_2_2_0_reg_491_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_5_fu_1246_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                sum_2_2_0_reg_491 <= sum_2_1_2_reg_469;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                sum_2_2_0_reg_491 <= grp_fu_49873_p_dout0;
            end if; 
        end if;
    end process;

    sum_2_2_1_reg_513_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_6_fu_1327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then 
                sum_2_2_1_reg_513 <= sum_2_2_0_reg_491;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
                sum_2_2_1_reg_513 <= grp_fu_49873_p_dout0;
            end if; 
        end if;
    end process;

    sum_2_2_2_reg_535_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_7_fu_1412_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
                sum_2_2_2_reg_535 <= sum_2_2_1_reg_513;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
                sum_2_2_2_reg_535 <= grp_fu_49873_p_dout0;
            end if; 
        end if;
    end process;

    x_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                x_reg_290 <= ap_const_lv5_0;
            elsif (((icmp_ln67_fu_633_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_reg_290 <= add_ln66_reg_1644;
            end if; 
        end if;
    end process;

    y_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_615_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y_reg_325 <= ap_const_lv4_0;
            elsif (((icmp_ln68_fu_815_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                y_reg_325 <= empty_83_reg_1672;
            end if; 
        end if;
    end process;

    z_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_fu_633_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                z_reg_336 <= ap_const_lv4_0;
            elsif (((icmp_ln73_8_fu_1497_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then 
                z_reg_336 <= add_ln68_reg_1718;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then
                add_ln110_reg_1964 <= add_ln110_fu_1587_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln66_reg_1644 <= add_ln66_fu_597_p2;
                next_mul2_reg_1649 <= next_mul2_fu_603_p2;
                next_mul_reg_1657 <= next_mul_fu_609_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln68_reg_1718 <= add_ln68_fu_793_p2;
                    zext_ln68_5_reg_1728(3 downto 0) <= zext_ln68_5_fu_803_p1(3 downto 0);
                    zext_ln68_6_reg_1735(3 downto 0) <= zext_ln68_6_fu_807_p1(3 downto 0);
                    zext_ln68_7_reg_1742(3 downto 0) <= zext_ln68_7_fu_811_p1(3 downto 0);
                    zext_ln68_reg_1723(3 downto 0) <= zext_ln68_fu_799_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln73_1_reg_1780 <= add_ln73_1_fu_910_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                add_ln73_2_reg_1803 <= add_ln73_2_fu_992_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                add_ln73_3_reg_1826 <= add_ln73_3_fu_1074_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                add_ln73_4_reg_1849 <= add_ln73_4_fu_1155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                add_ln73_5_reg_1872 <= add_ln73_5_fu_1236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                add_ln73_6_reg_1895 <= add_ln73_6_fu_1317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then
                add_ln73_7_reg_1918 <= add_ln73_7_fu_1402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then
                add_ln73_8_reg_1941 <= add_ln73_8_fu_1487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln73_reg_1752 <= add_ln73_fu_821_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_615_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                empty_82_reg_1665 <= empty_82_fu_621_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                empty_83_reg_1672 <= empty_83_fu_627_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state94)) then
                icmp_ln111_2_reg_1987 <= icmp_ln111_2_fu_1628_p2;
                icmp_ln111_reg_1982 <= icmp_ln111_fu_1622_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_fu_831_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                icmp_ln90_reg_1770 <= icmp_ln90_fu_897_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln110_fu_1598_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state93))) then
                output_addr_reg_1972 <= zext_ln110_fu_1593_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_fu_633_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    p_cast28_reg_1690(11 downto 1) <= p_cast28_fu_707_p1(11 downto 1);
                    p_cast31_reg_1701(11 downto 1) <= p_cast31_fu_745_p1(11 downto 1);
                    p_cast38_reg_1685(10 downto 1) <= p_cast38_fu_703_p1(10 downto 1);
                    p_cast41_reg_1696(10 downto 1) <= p_cast41_fu_741_p1(10 downto 1);
                    p_cast52_reg_1680(11 downto 2) <= p_cast52_fu_669_p1(11 downto 2);
                    sext_ln68_1_reg_1712(11 downto 1) <= sext_ln68_1_fu_789_p1(11 downto 1);
                    sext_ln68_reg_1707(10 downto 1) <= sext_ln68_fu_785_p1(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_592 <= grp_fu_49877_p_dout0;
            end if;
        end if;
    end process;
    p_cast52_reg_1680(1 downto 0) <= "00";
    p_cast38_reg_1685(0) <= '0';
    p_cast28_reg_1690(0) <= '0';
    p_cast41_reg_1696(0) <= '0';
    p_cast31_reg_1701(0) <= '0';
    sext_ln68_reg_1707(0) <= '0';
    sext_ln68_1_reg_1712(0) <= '0';
    zext_ln68_reg_1723(11 downto 4) <= "00000000";
    zext_ln68_5_reg_1728(9 downto 4) <= "000000";
    zext_ln68_6_reg_1735(8 downto 4) <= "00000";
    zext_ln68_7_reg_1742(7 downto 4) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln66_fu_615_p2, ap_CS_fsm_state3, icmp_ln67_fu_633_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln73_fu_831_p2, ap_CS_fsm_state13, icmp_ln73_1_fu_920_p2, ap_CS_fsm_state23, icmp_ln73_2_fu_1002_p2, ap_CS_fsm_state33, icmp_ln73_3_fu_1084_p2, ap_CS_fsm_state43, icmp_ln73_4_fu_1165_p2, ap_CS_fsm_state53, icmp_ln73_5_fu_1246_p2, ap_CS_fsm_state63, icmp_ln73_6_fu_1327_p2, ap_CS_fsm_state73, icmp_ln73_7_fu_1412_p2, ap_CS_fsm_state83, icmp_ln73_8_fu_1497_p2, ap_CS_fsm_state93, icmp_ln110_fu_1598_p2, icmp_ln68_fu_815_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln66_fu_615_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state93;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln67_fu_633_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln68_fu_815_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln73_fu_831_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln73_1_fu_920_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state23 => 
                if (((icmp_ln73_2_fu_1002_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state33 => 
                if (((icmp_ln73_3_fu_1084_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state43 => 
                if (((icmp_ln73_4_fu_1165_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state53 => 
                if (((icmp_ln73_5_fu_1246_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state63 => 
                if (((icmp_ln73_6_fu_1327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state73 => 
                if (((icmp_ln73_7_fu_1412_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state83 => 
                if (((icmp_ln73_8_fu_1497_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state93 => 
                if (((icmp_ln110_fu_1598_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state94;
                end if;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln104_2_fu_1572_p2 <= std_logic_vector(unsigned(phi_mul_reg_301) + unsigned(zext_ln68_reg_1723));
    add_ln104_fu_1577_p2 <= std_logic_vector(unsigned(add_ln104_2_fu_1572_p2) + unsigned(p_cast52_reg_1680));
    add_ln110_fu_1587_p2 <= std_logic_vector(unsigned(i_reg_547) + unsigned(ap_const_lv12_1));
    add_ln66_fu_597_p2 <= std_logic_vector(unsigned(x_reg_290) + unsigned(ap_const_lv5_1));
    add_ln68_fu_793_p2 <= std_logic_vector(unsigned(z_reg_336) + unsigned(ap_const_lv4_1));
    add_ln73_1_fu_910_p2 <= std_logic_vector(unsigned(k_0_1_reg_370) + unsigned(ap_const_lv3_1));
    add_ln73_2_fu_992_p2 <= std_logic_vector(unsigned(k_0_2_reg_392) + unsigned(ap_const_lv3_1));
    add_ln73_3_fu_1074_p2 <= std_logic_vector(unsigned(k_1_0_reg_414) + unsigned(ap_const_lv3_1));
    add_ln73_4_fu_1155_p2 <= std_logic_vector(unsigned(k_1_1_reg_436) + unsigned(ap_const_lv3_1));
    add_ln73_5_fu_1236_p2 <= std_logic_vector(unsigned(k_1_2_reg_458) + unsigned(ap_const_lv3_1));
    add_ln73_6_fu_1317_p2 <= std_logic_vector(unsigned(k_2_0_reg_480) + unsigned(ap_const_lv3_1));
    add_ln73_7_fu_1402_p2 <= std_logic_vector(unsigned(k_2_1_reg_502) + unsigned(ap_const_lv3_1));
    add_ln73_8_fu_1487_p2 <= std_logic_vector(unsigned(k_2_2_reg_524) + unsigned(ap_const_lv3_1));
    add_ln73_fu_821_p2 <= std_logic_vector(unsigned(k_0_0_reg_347) + unsigned(ap_const_lv3_1));
    add_ln78_10_fu_1124_p2 <= std_logic_vector(signed(sext_ln78_2_fu_1120_p1) + signed(ap_const_lv9_D8));
    add_ln78_11_fu_1130_p2 <= std_logic_vector(unsigned(add_ln78_10_fu_1124_p2) + unsigned(zext_ln68_6_reg_1735));
    add_ln78_12_fu_1211_p2 <= std_logic_vector(unsigned(add_ln78_17_fu_1205_p2) + unsigned(zext_ln68_6_reg_1735));
    add_ln78_13_fu_1292_p2 <= std_logic_vector(unsigned(add_ln78_18_fu_1286_p2) + unsigned(zext_ln68_6_reg_1735));
    add_ln78_14_fu_1373_p2 <= std_logic_vector(unsigned(add_ln78_19_fu_1367_p2) + unsigned(zext_ln68_5_reg_1728));
    add_ln78_15_fu_1458_p2 <= std_logic_vector(unsigned(add_ln78_20_fu_1452_p2) + unsigned(zext_ln68_5_reg_1728));
    add_ln78_16_fu_1543_p2 <= std_logic_vector(unsigned(add_ln78_21_fu_1537_p2) + unsigned(zext_ln68_5_reg_1728));
    add_ln78_17_fu_1205_p2 <= std_logic_vector(signed(sext_ln78_3_fu_1201_p1) + signed(ap_const_lv9_120));
    add_ln78_18_fu_1286_p2 <= std_logic_vector(signed(sext_ln78_4_fu_1282_p1) + signed(ap_const_lv9_168));
    add_ln78_19_fu_1367_p2 <= std_logic_vector(signed(sext_ln78_5_fu_1363_p1) + signed(ap_const_lv10_1B0));
    add_ln78_20_fu_1452_p2 <= std_logic_vector(signed(sext_ln78_6_fu_1448_p1) + signed(ap_const_lv10_1F8));
    add_ln78_21_fu_1537_p2 <= std_logic_vector(signed(sext_ln78_7_fu_1533_p1) + signed(ap_const_lv10_240));
    add_ln78_6_fu_956_p2 <= std_logic_vector(unsigned(sub_ln76_1_fu_950_p2) + unsigned(ap_const_lv8_48));
    add_ln78_7_fu_962_p2 <= std_logic_vector(unsigned(add_ln78_6_fu_956_p2) + unsigned(zext_ln68_7_reg_1742));
    add_ln78_8_fu_1038_p2 <= std_logic_vector(unsigned(sub_ln76_2_fu_1032_p2) + unsigned(ap_const_lv8_90));
    add_ln78_9_fu_1044_p2 <= std_logic_vector(unsigned(add_ln78_8_fu_1038_p2) + unsigned(zext_ln68_7_reg_1742));
    add_ln78_fu_867_p2 <= std_logic_vector(unsigned(zext_ln68_7_reg_1742) + unsigned(sub_ln76_fu_861_p2));
    add_ln84_10_fu_1064_p2 <= std_logic_vector(unsigned(zext_ln84_10_fu_1060_p1) + unsigned(sext_ln68_1_reg_1712));
    add_ln84_11_fu_1145_p2 <= std_logic_vector(unsigned(add_ln84_20_fu_1140_p2) + unsigned(p_cast38_reg_1685));
    add_ln84_12_fu_1226_p2 <= std_logic_vector(unsigned(add_ln84_21_fu_1221_p2) + unsigned(p_cast41_reg_1696));
    add_ln84_13_fu_1307_p2 <= std_logic_vector(unsigned(add_ln84_22_fu_1302_p2) + unsigned(sext_ln68_reg_1707));
    add_ln84_14_fu_1392_p2 <= std_logic_vector(unsigned(zext_ln84_14_fu_1388_p1) + unsigned(p_cast28_reg_1690));
    add_ln84_15_fu_1477_p2 <= std_logic_vector(unsigned(zext_ln84_16_fu_1473_p1) + unsigned(p_cast31_reg_1701));
    add_ln84_16_fu_1562_p2 <= std_logic_vector(unsigned(zext_ln84_18_fu_1558_p1) + unsigned(sext_ln68_1_reg_1712));
    add_ln84_17_fu_877_p2 <= std_logic_vector(unsigned(phi_mul1_reg_313) + unsigned(zext_ln73_fu_827_p1));
    add_ln84_18_fu_972_p2 <= std_logic_vector(unsigned(phi_mul1_reg_313) + unsigned(zext_ln73_1_fu_916_p1));
    add_ln84_19_fu_1054_p2 <= std_logic_vector(unsigned(phi_mul1_reg_313) + unsigned(zext_ln73_2_fu_998_p1));
    add_ln84_20_fu_1140_p2 <= std_logic_vector(unsigned(next_mul2_reg_1649) + unsigned(zext_ln73_3_fu_1080_p1));
    add_ln84_21_fu_1221_p2 <= std_logic_vector(unsigned(next_mul2_reg_1649) + unsigned(zext_ln73_4_fu_1161_p1));
    add_ln84_22_fu_1302_p2 <= std_logic_vector(unsigned(next_mul2_reg_1649) + unsigned(zext_ln73_5_fu_1242_p1));
    add_ln84_23_fu_1383_p2 <= std_logic_vector(unsigned(empty_82_reg_1665) + unsigned(zext_ln73_6_fu_1323_p1));
    add_ln84_24_fu_1468_p2 <= std_logic_vector(unsigned(empty_82_reg_1665) + unsigned(zext_ln73_7_fu_1408_p1));
    add_ln84_25_fu_1553_p2 <= std_logic_vector(unsigned(empty_82_reg_1665) + unsigned(zext_ln73_8_fu_1493_p1));
    add_ln84_9_fu_982_p2 <= std_logic_vector(unsigned(zext_ln84_9_fu_978_p1) + unsigned(p_cast31_reg_1701));
    add_ln84_fu_887_p2 <= std_logic_vector(unsigned(zext_ln84_fu_883_p1) + unsigned(p_cast28_reg_1690));
    and_ln111_fu_1638_p2 <= (or_ln111_fu_1634_p2 and grp_fu_29505_p_dout0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state93, icmp_ln110_fu_1598_p2)
    begin
        if ((((icmp_ln110_fu_1598_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state93)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state93, icmp_ln110_fu_1598_p2)
    begin
        if (((icmp_ln110_fu_1598_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln111_fu_1604_p1 <= output_r_q0;
    empty_82_fu_621_p2 <= std_logic_vector(unsigned(phi_mul1_reg_313) + unsigned(ap_const_lv11_B4));
    empty_83_fu_627_p2 <= std_logic_vector(unsigned(y_reg_325) + unsigned(ap_const_lv4_1));
    empty_85_fu_663_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_647_p1) - unsigned(p_shl1_cast_fu_659_p1));
    empty_86_fu_697_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_681_p1) - unsigned(p_shl3_cast_fu_693_p1));
    empty_87_fu_735_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_719_p1) - unsigned(p_shl7_cast_fu_731_p1));
    empty_88_fu_749_p2 <= std_logic_vector(unsigned(y_reg_325) + unsigned(ap_const_lv4_2));
    empty_89_fu_779_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_763_p1) - unsigned(p_shl11_cast_fu_775_p1));
    grp_fu_29505_p_ce <= ap_const_logic_1;
    grp_fu_29505_p_din0 <= output_r_q0;
    grp_fu_29505_p_din1 <= ap_const_lv32_0;
    grp_fu_29505_p_opcode <= ap_const_lv5_4;
    grp_fu_49873_p_ce <= ap_const_logic_1;
    grp_fu_49873_p_din0 <= grp_fu_558_p0;
    grp_fu_49873_p_din1 <= reg_592;
    grp_fu_49873_p_opcode <= ap_const_lv2_0;
    grp_fu_49877_p_ce <= ap_const_logic_1;
    grp_fu_49877_p_din0 <= layer2_weights_q0;
    grp_fu_49877_p_din1 <= inputs_q0;
    grp_fu_558_ce <= ap_const_logic_1;

    grp_fu_558_p0_assign_proc : process(sum_2_0_1_reg_381, sum_2_0_2_reg_403, sum_2_1_0_reg_425, sum_2_1_1_reg_447, sum_2_1_2_reg_469, sum_2_2_0_reg_491, sum_2_2_1_reg_513, sum_2_2_2_reg_535, ap_CS_fsm_state18, ap_CS_fsm_state28, ap_CS_fsm_state38, ap_CS_fsm_state48, ap_CS_fsm_state58, ap_CS_fsm_state68, ap_CS_fsm_state78, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            grp_fu_558_p0 <= sum_2_2_2_reg_535;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            grp_fu_558_p0 <= sum_2_2_1_reg_513;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_fu_558_p0 <= sum_2_2_0_reg_491;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_fu_558_p0 <= sum_2_1_2_reg_469;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_558_p0 <= sum_2_1_1_reg_447;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_558_p0 <= sum_2_1_0_reg_425;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_558_p0 <= sum_2_0_2_reg_403;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_558_p0 <= sum_2_0_1_reg_381;
        else 
            grp_fu_558_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_558_p1 <= reg_592;
    grp_fu_558_p2 <= grp_fu_49873_p_dout0;
    grp_fu_570_ce <= ap_const_logic_1;
    grp_fu_570_p0 <= layer2_weights_q0;
    grp_fu_570_p1 <= inputs_q0;
    grp_fu_570_p2 <= grp_fu_49877_p_dout0;
    grp_fu_576_ce <= ap_const_logic_1;
    grp_fu_576_opcode <= ap_const_lv5_4;
    grp_fu_576_p0 <= output_r_q0;
    grp_fu_576_p1 <= ap_const_lv32_0;
    grp_fu_576_p2 <= grp_fu_29505_p_dout0;

    grp_fu_903_in_valid_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_903_in_valid <= ap_const_logic_1;
        else 
            grp_fu_903_in_valid <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln110_fu_1598_p2 <= "1" when (i_reg_547 = ap_const_lv12_CCC) else "0";
    icmp_ln111_2_fu_1628_p2 <= "1" when (trunc_ln111_fu_1618_p1 = ap_const_lv23_0) else "0";
    icmp_ln111_fu_1622_p2 <= "0" when (tmp_s_fu_1608_p4 = ap_const_lv8_FF) else "1";
    icmp_ln66_fu_615_p2 <= "1" when (x_reg_290 = ap_const_lv5_15) else "0";
    icmp_ln67_fu_633_p2 <= "1" when (y_reg_325 = ap_const_lv4_D) else "0";
    icmp_ln68_fu_815_p2 <= "1" when (z_reg_336 = ap_const_lv4_C) else "0";
    icmp_ln73_1_fu_920_p2 <= "1" when (k_0_1_reg_370 = ap_const_lv3_6) else "0";
    icmp_ln73_2_fu_1002_p2 <= "1" when (k_0_2_reg_392 = ap_const_lv3_6) else "0";
    icmp_ln73_3_fu_1084_p2 <= "1" when (k_1_0_reg_414 = ap_const_lv3_6) else "0";
    icmp_ln73_4_fu_1165_p2 <= "1" when (k_1_1_reg_436 = ap_const_lv3_6) else "0";
    icmp_ln73_5_fu_1246_p2 <= "1" when (k_1_2_reg_458 = ap_const_lv3_6) else "0";
    icmp_ln73_6_fu_1327_p2 <= "1" when (k_2_0_reg_480 = ap_const_lv3_6) else "0";
    icmp_ln73_7_fu_1412_p2 <= "1" when (k_2_1_reg_502 = ap_const_lv3_6) else "0";
    icmp_ln73_8_fu_1497_p2 <= "1" when (k_2_2_reg_524 = ap_const_lv3_6) else "0";
    icmp_ln73_fu_831_p2 <= "1" when (k_0_0_reg_347 = ap_const_lv3_6) else "0";
    icmp_ln90_fu_897_p2 <= "1" when (add_ln73_fu_821_p2 = ap_const_lv3_6) else "0";

    inputs_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state23, ap_CS_fsm_state33, ap_CS_fsm_state43, ap_CS_fsm_state53, ap_CS_fsm_state63, ap_CS_fsm_state73, ap_CS_fsm_state83, sext_ln84_fu_892_p1, sext_ln84_1_fu_987_p1, sext_ln84_2_fu_1069_p1, zext_ln84_11_fu_1150_p1, zext_ln84_12_fu_1231_p1, zext_ln84_13_fu_1312_p1, zext_ln84_15_fu_1397_p1, zext_ln84_17_fu_1482_p1, zext_ln84_19_fu_1567_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            inputs_address0 <= zext_ln84_19_fu_1567_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            inputs_address0 <= zext_ln84_17_fu_1482_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            inputs_address0 <= zext_ln84_15_fu_1397_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            inputs_address0 <= zext_ln84_13_fu_1312_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            inputs_address0 <= zext_ln84_12_fu_1231_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            inputs_address0 <= zext_ln84_11_fu_1150_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            inputs_address0 <= sext_ln84_2_fu_1069_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            inputs_address0 <= sext_ln84_1_fu_987_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inputs_address0 <= sext_ln84_fu_892_p1(12 - 1 downto 0);
        else 
            inputs_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    inputs_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state23, ap_CS_fsm_state33, ap_CS_fsm_state43, ap_CS_fsm_state53, ap_CS_fsm_state63, ap_CS_fsm_state73, ap_CS_fsm_state83)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            inputs_ce0 <= ap_const_logic_1;
        else 
            inputs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_weights_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state23, ap_CS_fsm_state33, ap_CS_fsm_state43, ap_CS_fsm_state53, ap_CS_fsm_state63, ap_CS_fsm_state73, ap_CS_fsm_state83, sext_ln78_fu_872_p1, zext_ln78_fu_967_p1, zext_ln78_9_fu_1049_p1, zext_ln78_10_fu_1135_p1, zext_ln78_11_fu_1216_p1, zext_ln78_12_fu_1297_p1, zext_ln78_13_fu_1378_p1, zext_ln78_14_fu_1463_p1, zext_ln78_15_fu_1548_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            layer2_weights_address0 <= zext_ln78_15_fu_1548_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            layer2_weights_address0 <= zext_ln78_14_fu_1463_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            layer2_weights_address0 <= zext_ln78_13_fu_1378_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            layer2_weights_address0 <= zext_ln78_12_fu_1297_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            layer2_weights_address0 <= zext_ln78_11_fu_1216_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            layer2_weights_address0 <= zext_ln78_10_fu_1135_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            layer2_weights_address0 <= zext_ln78_9_fu_1049_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            layer2_weights_address0 <= zext_ln78_fu_967_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer2_weights_address0 <= sext_ln78_fu_872_p1(10 - 1 downto 0);
        else 
            layer2_weights_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    layer2_weights_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state23, ap_CS_fsm_state33, ap_CS_fsm_state43, ap_CS_fsm_state53, ap_CS_fsm_state63, ap_CS_fsm_state73, ap_CS_fsm_state83)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            layer2_weights_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul2_fu_603_p2 <= std_logic_vector(unsigned(phi_mul1_reg_313) + unsigned(ap_const_lv11_5A));
    next_mul_fu_609_p2 <= std_logic_vector(unsigned(phi_mul_reg_301) + unsigned(ap_const_lv12_9C));
    or_ln111_fu_1634_p2 <= (icmp_ln111_reg_1982 or icmp_ln111_2_reg_1987);

    output_r_address0_assign_proc : process(ap_CS_fsm_state83, ap_CS_fsm_state93, output_addr_reg_1972, ap_CS_fsm_state95, zext_ln104_fu_1582_p1, zext_ln110_fu_1593_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            output_r_address0 <= output_addr_reg_1972;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            output_r_address0 <= zext_ln110_fu_1593_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            output_r_address0 <= zext_ln104_fu_1582_p1(12 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state83, ap_CS_fsm_state93, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state83))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state83, sum_2_2_2_reg_535, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            output_r_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            output_r_d0 <= sum_2_2_2_reg_535;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state83, icmp_ln73_8_fu_1497_p2, ap_CS_fsm_state95, and_ln111_fu_1638_p2)
    begin
        if ((((ap_const_lv1_1 = and_ln111_fu_1638_p2) and (ap_const_logic_1 = ap_CS_fsm_state95)) or ((icmp_ln73_8_fu_1497_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

        p_cast28_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_86_fu_697_p2),12));

        p_cast31_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_87_fu_735_p2),12));

        p_cast38_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_86_fu_697_p2),11));

        p_cast41_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_87_fu_735_p2),11));

        p_cast52_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_85_fu_663_p2),12));

    p_shl10_cast_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_755_p3),8));
    p_shl11_cast_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_fu_767_p3),8));
    p_shl1_cast_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_651_p3),9));
    p_shl1_fu_651_p3 <= (y_reg_325 & ap_const_lv2_0);
    p_shl2_cast_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_673_p3),8));
    p_shl2_fu_673_p3 <= (y_reg_325 & ap_const_lv3_0);
    p_shl3_cast_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_685_p3),8));
    p_shl3_fu_685_p3 <= (y_reg_325 & ap_const_lv1_0);
    p_shl4_fu_755_p3 <= (empty_88_fu_749_p2 & ap_const_lv3_0);
    p_shl5_fu_767_p3 <= (empty_88_fu_749_p2 & ap_const_lv1_0);
    p_shl6_cast_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl6_fu_711_p3),8));
    p_shl6_fu_711_p3 <= (empty_83_fu_627_p2 & ap_const_lv3_0);
    p_shl7_cast_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl7_fu_723_p3),8));
    p_shl7_fu_723_p3 <= (empty_83_fu_627_p2 & ap_const_lv1_0);
    p_shl_cast_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_639_p3),9));
    p_shl_fu_639_p3 <= (y_reg_325 & ap_const_lv4_0);
        sext_ln68_1_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_89_fu_779_p2),12));

        sext_ln68_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_89_fu_779_p2),11));

        sext_ln78_2_fu_1120_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln76_3_fu_1114_p2),9));

        sext_ln78_3_fu_1201_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln76_4_fu_1195_p2),9));

        sext_ln78_4_fu_1282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln76_5_fu_1276_p2),9));

        sext_ln78_5_fu_1363_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln76_6_fu_1357_p2),10));

        sext_ln78_6_fu_1448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln76_7_fu_1442_p2),10));

        sext_ln78_7_fu_1533_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln76_8_fu_1527_p2),10));

        sext_ln78_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln78_fu_867_p2),64));

        sext_ln84_1_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln84_9_fu_982_p2),64));

        sext_ln84_2_fu_1069_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln84_10_fu_1064_p2),64));

        sext_ln84_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln84_fu_887_p2),64));

    shl_ln76_10_fu_1264_p3 <= (k_1_2_reg_458 & ap_const_lv2_0);
    shl_ln76_11_fu_1333_p3 <= (k_2_0_reg_480 & ap_const_lv4_0);
    shl_ln76_12_fu_1345_p3 <= (k_2_0_reg_480 & ap_const_lv2_0);
    shl_ln76_13_fu_1418_p3 <= (k_2_1_reg_502 & ap_const_lv4_0);
    shl_ln76_14_fu_1430_p3 <= (k_2_1_reg_502 & ap_const_lv2_0);
    shl_ln76_15_fu_1503_p3 <= (k_2_2_reg_524 & ap_const_lv4_0);
    shl_ln76_16_fu_1515_p3 <= (k_2_2_reg_524 & ap_const_lv2_0);
    shl_ln76_1_fu_849_p3 <= (k_0_0_reg_347 & ap_const_lv2_0);
    shl_ln76_2_fu_926_p3 <= (k_0_1_reg_370 & ap_const_lv4_0);
    shl_ln76_3_fu_938_p3 <= (k_0_1_reg_370 & ap_const_lv2_0);
    shl_ln76_4_fu_1008_p3 <= (k_0_2_reg_392 & ap_const_lv4_0);
    shl_ln76_5_fu_1020_p3 <= (k_0_2_reg_392 & ap_const_lv2_0);
    shl_ln76_6_fu_1090_p3 <= (k_1_0_reg_414 & ap_const_lv4_0);
    shl_ln76_7_fu_1102_p3 <= (k_1_0_reg_414 & ap_const_lv2_0);
    shl_ln76_8_fu_1171_p3 <= (k_1_1_reg_436 & ap_const_lv4_0);
    shl_ln76_9_fu_1183_p3 <= (k_1_1_reg_436 & ap_const_lv2_0);
    shl_ln76_s_fu_1252_p3 <= (k_1_2_reg_458 & ap_const_lv4_0);
    shl_ln_fu_837_p3 <= (k_0_0_reg_347 & ap_const_lv4_0);
    sub_ln76_1_fu_950_p2 <= std_logic_vector(unsigned(zext_ln76_2_fu_934_p1) - unsigned(zext_ln76_3_fu_946_p1));
    sub_ln76_2_fu_1032_p2 <= std_logic_vector(unsigned(zext_ln76_4_fu_1016_p1) - unsigned(zext_ln76_5_fu_1028_p1));
    sub_ln76_3_fu_1114_p2 <= std_logic_vector(unsigned(zext_ln76_6_fu_1098_p1) - unsigned(zext_ln76_7_fu_1110_p1));
    sub_ln76_4_fu_1195_p2 <= std_logic_vector(unsigned(zext_ln76_8_fu_1179_p1) - unsigned(zext_ln76_9_fu_1191_p1));
    sub_ln76_5_fu_1276_p2 <= std_logic_vector(unsigned(zext_ln76_10_fu_1260_p1) - unsigned(zext_ln76_11_fu_1272_p1));
    sub_ln76_6_fu_1357_p2 <= std_logic_vector(unsigned(zext_ln76_12_fu_1341_p1) - unsigned(zext_ln76_13_fu_1353_p1));
    sub_ln76_7_fu_1442_p2 <= std_logic_vector(unsigned(zext_ln76_14_fu_1426_p1) - unsigned(zext_ln76_15_fu_1438_p1));
    sub_ln76_8_fu_1527_p2 <= std_logic_vector(unsigned(zext_ln76_16_fu_1511_p1) - unsigned(zext_ln76_17_fu_1523_p1));
    sub_ln76_fu_861_p2 <= std_logic_vector(unsigned(zext_ln76_fu_845_p1) - unsigned(zext_ln76_1_fu_857_p1));
    tmp_s_fu_1608_p4 <= bitcast_ln111_fu_1604_p1(30 downto 23);
    trunc_ln111_fu_1618_p1 <= bitcast_ln111_fu_1604_p1(23 - 1 downto 0);
    zext_ln104_fu_1582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln104_fu_1577_p2),64));
    zext_ln110_fu_1593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_547),64));
    zext_ln68_5_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z_reg_336),10));
    zext_ln68_6_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z_reg_336),9));
    zext_ln68_7_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z_reg_336),8));
    zext_ln68_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z_reg_336),12));
    zext_ln73_1_fu_916_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_1_reg_370),11));
    zext_ln73_2_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_2_reg_392),11));
    zext_ln73_3_fu_1080_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_0_reg_414),11));
    zext_ln73_4_fu_1161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_1_reg_436),11));
    zext_ln73_5_fu_1242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_2_reg_458),11));
    zext_ln73_6_fu_1323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_2_0_reg_480),11));
    zext_ln73_7_fu_1408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_2_1_reg_502),11));
    zext_ln73_8_fu_1493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_2_2_reg_524),11));
    zext_ln73_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_0_reg_347),11));
    zext_ln76_10_fu_1260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln76_s_fu_1252_p3),8));
    zext_ln76_11_fu_1272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln76_10_fu_1264_p3),8));
    zext_ln76_12_fu_1341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln76_11_fu_1333_p3),8));
    zext_ln76_13_fu_1353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln76_12_fu_1345_p3),8));
    zext_ln76_14_fu_1426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln76_13_fu_1418_p3),8));
    zext_ln76_15_fu_1438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln76_14_fu_1430_p3),8));
    zext_ln76_16_fu_1511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln76_15_fu_1503_p3),8));
    zext_ln76_17_fu_1523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln76_16_fu_1515_p3),8));
    zext_ln76_1_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln76_1_fu_849_p3),8));
    zext_ln76_2_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln76_2_fu_926_p3),8));
    zext_ln76_3_fu_946_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln76_3_fu_938_p3),8));
    zext_ln76_4_fu_1016_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln76_4_fu_1008_p3),8));
    zext_ln76_5_fu_1028_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln76_5_fu_1020_p3),8));
    zext_ln76_6_fu_1098_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln76_6_fu_1090_p3),8));
    zext_ln76_7_fu_1110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln76_7_fu_1102_p3),8));
    zext_ln76_8_fu_1179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln76_8_fu_1171_p3),8));
    zext_ln76_9_fu_1191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln76_9_fu_1183_p3),8));
    zext_ln76_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_837_p3),8));
    zext_ln78_10_fu_1135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln78_11_fu_1130_p2),64));
    zext_ln78_11_fu_1216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln78_12_fu_1211_p2),64));
    zext_ln78_12_fu_1297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln78_13_fu_1292_p2),64));
    zext_ln78_13_fu_1378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln78_14_fu_1373_p2),64));
    zext_ln78_14_fu_1463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln78_15_fu_1458_p2),64));
    zext_ln78_15_fu_1548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln78_16_fu_1543_p2),64));
    zext_ln78_9_fu_1049_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln78_9_fu_1044_p2),64));
    zext_ln78_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln78_7_fu_962_p2),64));
    zext_ln84_10_fu_1060_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_19_fu_1054_p2),12));
    zext_ln84_11_fu_1150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_11_fu_1145_p2),64));
    zext_ln84_12_fu_1231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_12_fu_1226_p2),64));
    zext_ln84_13_fu_1312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_13_fu_1307_p2),64));
    zext_ln84_14_fu_1388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_23_fu_1383_p2),12));
    zext_ln84_15_fu_1397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_14_fu_1392_p2),64));
    zext_ln84_16_fu_1473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_24_fu_1468_p2),12));
    zext_ln84_17_fu_1482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_15_fu_1477_p2),64));
    zext_ln84_18_fu_1558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_25_fu_1553_p2),12));
    zext_ln84_19_fu_1567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_16_fu_1562_p2),64));
    zext_ln84_9_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_18_fu_972_p2),12));
    zext_ln84_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_17_fu_877_p2),12));
end behav;
