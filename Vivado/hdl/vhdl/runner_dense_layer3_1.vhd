-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity runner_dense_layer3_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer_5_output_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    layer_5_output_ce0 : OUT STD_LOGIC;
    layer_5_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_49873_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_49873_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_49873_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_49873_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_49873_p_ce : OUT STD_LOGIC;
    grp_fu_49877_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_49877_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_49877_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_49877_p_ce : OUT STD_LOGIC;
    grp_fu_29505_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_29505_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_29505_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_29505_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_29505_p_ce : OUT STD_LOGIC );
end;


architecture behav of runner_dense_layer3_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal layer7_weights_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal layer7_weights_ce0 : STD_LOGIC;
    signal layer7_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal add_ln16_fu_177_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln21_fu_194_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln21_reg_333 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln21_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_56_fu_231_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_56_reg_346 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal layer_5_output_load_reg_351 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_fu_237_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_reg_356 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln23_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_2_reg_369 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_160_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_reg_379 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln31_fu_268_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln31_reg_384 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal output_addr_1_reg_392 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln31_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_397 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_1_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_1_reg_402 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_109 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln16_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_120 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_132 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_2_reg_143 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln16_fu_183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln32_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_154_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_154_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_160_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_160_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_165_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_165_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl1_fu_219_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_fu_211_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl1_cast_fu_227_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln23_1_fu_248_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln25_fu_258_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln32_fu_285_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_289_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_fu_299_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln32_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_154_ce : STD_LOGIC;
    signal grp_fu_160_ce : STD_LOGIC;
    signal grp_fu_165_ce : STD_LOGIC;
    signal grp_fu_165_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component runner_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component runner_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component runner_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component runner_dense_layer3_1_layer7_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    layer7_weights_U : component runner_dense_layer3_1_layer7_weights
    generic map (
        DataWidth => 32,
        AddressRange => 4608,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer7_weights_address0,
        ce0 => layer7_weights_ce0,
        q0 => layer7_weights_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln16_fu_188_p2 = ap_const_lv1_1))) then 
                i_1_reg_120 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln23_fu_252_p2 = ap_const_lv1_1))) then 
                i_1_reg_120 <= add_ln21_reg_333;
            end if; 
        end if;
    end process;

    i_2_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_2_reg_143 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_2_reg_143 <= add_ln31_reg_384;
            end if; 
        end if;
    end process;

    i_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_109 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln16_fu_188_p2 = ap_const_lv1_0))) then 
                i_reg_109 <= add_ln16_fu_177_p2;
            end if; 
        end if;
    end process;

    j_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_132 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                j_reg_132 <= add_ln23_reg_356;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln21_reg_333 <= add_ln21_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln23_reg_356 <= add_ln23_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln31_reg_384 <= add_ln31_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    empty_56_reg_346(12 downto 3) <= empty_56_fu_231_p2(12 downto 3);
                layer_5_output_load_reg_351 <= layer_5_output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                icmp_ln32_1_reg_402 <= icmp_ln32_1_fu_309_p2;
                icmp_ln32_reg_397 <= icmp_ln32_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                mul8_reg_379 <= grp_fu_49877_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln31_fu_279_p2 = ap_const_lv1_0))) then
                output_addr_1_reg_392 <= zext_ln31_fu_274_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln23_fu_252_p2 = ap_const_lv1_0))) then
                output_addr_2_reg_369 <= zext_ln23_fu_243_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    empty_56_reg_346(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln21_fu_205_p2, ap_CS_fsm_state5, icmp_ln23_fu_252_p2, ap_CS_fsm_state15, icmp_ln31_fu_279_p2, icmp_ln16_fu_188_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln16_fu_188_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln21_fu_205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln23_fu_252_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln31_fu_279_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln16_fu_177_p2 <= std_logic_vector(unsigned(i_reg_109) + unsigned(ap_const_lv5_1));
    add_ln21_fu_194_p2 <= std_logic_vector(unsigned(i_1_reg_120) + unsigned(ap_const_lv8_1));
    add_ln23_fu_237_p2 <= std_logic_vector(unsigned(j_reg_132) + unsigned(ap_const_lv5_1));
    add_ln25_fu_258_p2 <= std_logic_vector(unsigned(zext_ln23_1_fu_248_p1) + unsigned(empty_56_reg_346));
    add_ln31_fu_268_p2 <= std_logic_vector(unsigned(i_2_reg_143) + unsigned(ap_const_lv5_1));
    and_ln32_fu_319_p2 <= (or_ln32_fu_315_p2 and grp_fu_29505_p_dout0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state15, icmp_ln31_fu_279_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln31_fu_279_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15, icmp_ln31_fu_279_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln31_fu_279_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln32_fu_285_p1 <= output_r_q0;
    empty_56_fu_231_p2 <= std_logic_vector(unsigned(p_shl_fu_211_p3) - unsigned(p_shl1_cast_fu_227_p1));
    grp_fu_154_ce <= ap_const_logic_1;
    grp_fu_154_p0 <= output_r_q0;
    grp_fu_154_p1 <= mul8_reg_379;
    grp_fu_154_p2 <= grp_fu_49873_p_dout0;
    grp_fu_160_ce <= ap_const_logic_1;
    grp_fu_160_p0 <= layer_5_output_load_reg_351;
    grp_fu_160_p1 <= layer7_weights_q0;
    grp_fu_160_p2 <= grp_fu_49877_p_dout0;
    grp_fu_165_ce <= ap_const_logic_1;
    grp_fu_165_opcode <= ap_const_lv5_4;
    grp_fu_165_p0 <= output_r_q0;
    grp_fu_165_p1 <= ap_const_lv32_0;
    grp_fu_165_p2 <= grp_fu_29505_p_dout0;
    grp_fu_29505_p_ce <= ap_const_logic_1;
    grp_fu_29505_p_din0 <= output_r_q0;
    grp_fu_29505_p_din1 <= ap_const_lv32_0;
    grp_fu_29505_p_opcode <= ap_const_lv5_4;
    grp_fu_49873_p_ce <= ap_const_logic_1;
    grp_fu_49873_p_din0 <= output_r_q0;
    grp_fu_49873_p_din1 <= mul8_reg_379;
    grp_fu_49873_p_opcode <= ap_const_lv2_0;
    grp_fu_49877_p_ce <= ap_const_logic_1;
    grp_fu_49877_p_din0 <= layer_5_output_load_reg_351;
    grp_fu_49877_p_din1 <= layer7_weights_q0;
    icmp_ln16_fu_188_p2 <= "1" when (i_reg_109 = ap_const_lv5_18) else "0";
    icmp_ln21_fu_205_p2 <= "1" when (i_1_reg_120 = ap_const_lv8_C0) else "0";
    icmp_ln23_fu_252_p2 <= "1" when (j_reg_132 = ap_const_lv5_18) else "0";
    icmp_ln31_fu_279_p2 <= "1" when (i_2_reg_143 = ap_const_lv5_18) else "0";
    icmp_ln32_1_fu_309_p2 <= "1" when (trunc_ln32_fu_299_p1 = ap_const_lv23_0) else "0";
    icmp_ln32_fu_303_p2 <= "0" when (tmp_fu_289_p4 = ap_const_lv8_FF) else "1";
    layer7_weights_address0 <= zext_ln25_fu_263_p1(13 - 1 downto 0);

    layer7_weights_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer7_weights_ce0 <= ap_const_logic_1;
        else 
            layer7_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_5_output_address0 <= zext_ln21_fu_200_p1(8 - 1 downto 0);

    layer_5_output_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            layer_5_output_ce0 <= ap_const_logic_1;
        else 
            layer_5_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln32_fu_315_p2 <= (icmp_ln32_reg_397 or icmp_ln32_1_reg_402);

    output_r_address0_assign_proc : process(ap_CS_fsm_state2, output_addr_2_reg_369, ap_CS_fsm_state9, ap_CS_fsm_state15, output_addr_1_reg_392, ap_CS_fsm_state14, ap_CS_fsm_state17, zext_ln16_fu_183_p1, zext_ln31_fu_274_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_r_address0 <= output_addr_1_reg_392;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_r_address0 <= zext_ln31_fu_274_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_r_address0 <= output_addr_2_reg_369;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_r_address0 <= zext_ln16_fu_183_p1(5 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state14, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state14, ap_CS_fsm_state17, grp_fu_49873_p_dout0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_r_d0 <= grp_fu_49873_p_dout0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            output_r_d0 <= ap_const_lv32_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln16_fu_188_p2, ap_CS_fsm_state14, ap_CS_fsm_state17, and_ln32_fu_319_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln16_fu_188_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_1 = and_ln32_fu_319_p2)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_219_p3),13));
    p_shl1_fu_219_p3 <= (i_1_reg_120 & ap_const_lv3_0);
    p_shl_fu_211_p3 <= (i_1_reg_120 & ap_const_lv5_0);
    tmp_fu_289_p4 <= bitcast_ln32_fu_285_p1(30 downto 23);
    trunc_ln32_fu_299_p1 <= bitcast_ln32_fu_285_p1(23 - 1 downto 0);
    zext_ln16_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_109),64));
    zext_ln21_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_120),64));
    zext_ln23_1_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_132),13));
    zext_ln23_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_132),64));
    zext_ln25_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_fu_258_p2),64));
    zext_ln31_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_143),64));
end behav;
