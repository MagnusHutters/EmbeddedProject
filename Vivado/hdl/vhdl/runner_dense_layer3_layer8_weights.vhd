-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity runner_dense_layer3_layer8_weights_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 72
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of runner_dense_layer3_layer8_weights_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110111110110011101000011110", 
    1 => "00111110110100010100101001111100", 
    2 => "00111110101110010011001011100100", 
    3 => "00111110100000000000101011001001", 
    4 => "10111110111101001011000100101111", 
    5 => "00111101001101100101001111011010", 
    6 => "10111110011110000101000111101000", 
    7 => "10111110110011100001000110011101", 
    8 => "00111110101101100001000110010001", 
    9 => "00111110101100011110100011110001", 
    10 => "10111111001011111011010011011101", 
    11 => "10111101001100110110110011000101", 
    12 => "10111110101010011111011000010010", 
    13 => "10111110100101111111001000000000", 
    14 => "00111100101011110011100110101000", 
    15 => "10111110111001010101100001100010", 
    16 => "00111110100001100001001011111010", 
    17 => "10111101000000110101101001010111", 
    18 => "10111110010100100100010101111111", 
    19 => "00111110111101001100010011100010", 
    20 => "10111110100011011000100010011101", 
    21 => "10111110000010001011101010000010", 
    22 => "00111100101010001110010000010100", 
    23 => "00111110101101010111010101001000", 
    24 => "00111111001000011000001011100011", 
    25 => "00111110100100000111000001110100", 
    26 => "10111111000010000101111100100001", 
    27 => "10111101100010110100011000110100", 
    28 => "10111110011111100011001001000101", 
    29 => "00111101011101001001101100001000", 
    30 => "10111110000111001101000001000101", 
    31 => "10111110000110000010010001001100", 
    32 => "00111111001001100011111101110000", 
    33 => "00111101110001010000010101101100", 
    34 => "00111110010111000101001101010011", 
    35 => "10111111001000101011010011001000", 
    36 => "10111110101110000101011000000101", 
    37 => "10111111001010101010111111111110", 
    38 => "00111111001011000100101001111001", 
    39 => "10111110100110101111101000111001", 
    40 => "00111000110001000010101011010101", 
    41 => "00111110001010111010001111100101", 
    42 => "10111110011010111100100010111000", 
    43 => "00111101100111101000001111111000", 
    44 => "00111110001010101111111011110101", 
    45 => "00111110111010101111100110101011", 
    46 => "00111100011010101101101111100011", 
    47 => "10111110100011110100100000000101", 
    48 => "00111111000001000011110100101001", 
    49 => "10111110000111001001110001100001", 
    50 => "10111101000101111011011100011011", 
    51 => "10111110100100101001001000000011", 
    52 => "10111110100000111000111101011000", 
    53 => "00111101110001111010110101010111", 
    54 => "00111111001000111001101011110100", 
    55 => "00111101111100111101010111010100", 
    56 => "10111110001101111000011101000011", 
    57 => "10111111000010010001010000000101", 
    58 => "10111110000100010111011010101100", 
    59 => "00111110100011100101001101011011", 
    60 => "00111100111010100001110001001000", 
    61 => "00111110110001010110110101001011", 
    62 => "10111110011010010001101111101010", 
    63 => "10111101000010101011001101111011", 
    64 => "00111110111100010000001110110001", 
    65 => "10111110000110011111101110011001", 
    66 => "00111100110111101111100011000101", 
    67 => "10111110111101111101011011011101", 
    68 => "00111111000001101010101000010001", 
    69 => "00111101110100101100011000000100", 
    70 => "10111110101001100101000110101100", 
    71 => "10111110110111011000101000011010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity runner_dense_layer3_layer8_weights is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 72;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of runner_dense_layer3_layer8_weights is
    component runner_dense_layer3_layer8_weights_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    runner_dense_layer3_layer8_weights_rom_U :  component runner_dense_layer3_layer8_weights_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


