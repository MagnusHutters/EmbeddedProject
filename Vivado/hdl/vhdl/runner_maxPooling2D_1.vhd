-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity runner_maxPooling2D_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer_2_output_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    layer_2_output_ce0 : OUT STD_LOGIC;
    layer_2_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer_3_output_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer_3_output_ce0 : OUT STD_LOGIC;
    layer_3_output_we0 : OUT STD_LOGIC;
    layer_3_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_29505_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_29505_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_29505_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_29505_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_29505_p_ce : OUT STD_LOGIC );
end;


architecture behav of runner_maxPooling2D_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_FF7FFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111011111111111111111111111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_1A : STD_LOGIC_VECTOR (7 downto 0) := "00011010";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_D : STD_LOGIC_VECTOR (8 downto 0) := "000001101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln123_fu_186_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln123_reg_836 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln123_1_fu_192_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln123_1_reg_841 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_39_fu_228_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_39_reg_849 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln123_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_41_fu_244_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_41_reg_854 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln124_fu_250_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln124_reg_859 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_45_fu_307_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_45_reg_867 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln124_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln131_fu_339_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln131_reg_872 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln131_4_fu_371_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln131_4_reg_877 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln131_5_fu_406_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln131_5_reg_882 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln131_6_fu_442_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln131_6_reg_887 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln125_fu_448_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln125_reg_892 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln125_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln136_4_fu_478_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln136_4_reg_905 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln136_5_fu_483_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln136_5_reg_910 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln136_6_fu_488_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln136_6_reg_915 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln146_fu_493_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln146_reg_920 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln136_fu_544_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_reg_930 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_4_fu_636_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_4_reg_937 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal select_ln136_5_fu_730_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln136_5_reg_949 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal h_reg_128 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_139 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_reg_151 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_reg_162 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln136_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_4_fu_498_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_5_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_6_fu_737_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln146_fu_832_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_173_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_173_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_204_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_fu_216_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_224_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast_fu_212_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_40_fu_234_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_41_fu_244_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_41_fu_244_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_fu_266_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln124_fu_256_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_43_fu_282_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_44_fu_287_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_fu_291_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_fu_299_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast6_fu_278_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln131_fu_313_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln131_8_fu_327_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_fu_319_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln131_fu_335_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln131_fu_345_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln131_s_fu_359_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln131_9_fu_351_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln131_1_fu_367_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_cast9_fu_274_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln131_2_fu_377_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln131_fu_382_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln131_2_fu_394_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln131_1_fu_386_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln131_2_fu_402_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln131_3_fu_412_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln131_4_fu_418_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln131_4_fu_430_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln131_3_fu_422_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln131_3_fu_438_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln125_2_fu_458_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln136_fu_468_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln125_fu_454_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal bitcast_ln136_fu_502_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_506_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_fu_516_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_14_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln136_7_fu_553_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln136_8_fu_570_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_556_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_7_fu_566_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_16_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_15_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_574_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_8_fu_584_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_18_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_17_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_7_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_8_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_7_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_8_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln136_9_fu_647_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln136_10_fu_664_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_650_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_9_fu_660_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_20_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_19_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_668_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_10_fu_678_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_22_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_21_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_9_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_10_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_9_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_10_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln136_11_fu_741_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln136_12_fu_758_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_744_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_11_fu_754_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_24_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_23_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_762_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_12_fu_772_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln136_26_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_25_fu_794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_11_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_12_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_11_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_12_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_173_ce : STD_LOGIC;
    signal grp_fu_173_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_41_fu_244_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component runner_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component runner_mul_5ns_5ns_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    mul_5ns_5ns_9_1_1_U22 : component runner_mul_5ns_5ns_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 9)
    port map (
        din0 => empty_41_fu_244_p0,
        din1 => empty_41_fu_244_p1,
        dout => empty_41_fu_244_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    d_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_fu_260_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                d_reg_162 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                d_reg_162 <= add_ln125_reg_892;
            end if; 
        end if;
    end process;

    h_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                h_reg_128 <= ap_const_lv4_0;
            elsif (((icmp_ln124_fu_260_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                h_reg_128 <= add_ln123_reg_836;
            end if; 
        end if;
    end process;

    phi_mul_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_139 <= ap_const_lv8_0;
            elsif (((icmp_ln124_fu_260_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_139 <= add_ln123_1_reg_841;
            end if; 
        end if;
    end process;

    w_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_fu_198_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                w_reg_151 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln125_fu_462_p2 = ap_const_lv1_1))) then 
                w_reg_151 <= add_ln124_reg_859;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln123_1_reg_841 <= add_ln123_1_fu_192_p2;
                add_ln123_reg_836 <= add_ln123_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln124_reg_859 <= add_ln124_fu_250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln125_reg_892 <= add_ln125_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln125_fu_462_p2 = ap_const_lv1_0))) then
                add_ln136_4_reg_905 <= add_ln136_4_fu_478_p2;
                add_ln136_5_reg_910 <= add_ln136_5_fu_483_p2;
                add_ln136_6_reg_915 <= add_ln136_6_fu_488_p2;
                add_ln146_reg_920 <= add_ln146_fu_493_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_fu_198_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    empty_39_reg_849(7 downto 1) <= empty_39_fu_228_p2(7 downto 1);
                empty_41_reg_854 <= empty_41_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_fu_260_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    empty_45_reg_867(9 downto 2) <= empty_45_fu_307_p2(9 downto 2);
                    sub_ln131_4_reg_877(11 downto 3) <= sub_ln131_4_fu_371_p2(11 downto 3);
                    sub_ln131_5_reg_882(11 downto 2) <= sub_ln131_5_fu_406_p2(11 downto 2);
                    sub_ln131_6_reg_887(11 downto 2) <= sub_ln131_6_fu_442_p2(11 downto 2);
                    sub_ln131_reg_872(11 downto 2) <= sub_ln131_fu_339_p2(11 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_180 <= layer_2_output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                select_ln136_4_reg_937 <= select_ln136_4_fu_636_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                select_ln136_5_reg_949 <= select_ln136_5_fu_730_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                select_ln136_reg_930 <= select_ln136_fu_544_p3;
            end if;
        end if;
    end process;
    empty_39_reg_849(0) <= '0';
    empty_45_reg_867(1 downto 0) <= "00";
    sub_ln131_reg_872(1 downto 0) <= "00";
    sub_ln131_4_reg_877(2 downto 0) <= "100";
    sub_ln131_5_reg_882(1 downto 0) <= "00";
    sub_ln131_6_reg_887(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln123_fu_198_p2, ap_CS_fsm_state3, icmp_ln124_fu_260_p2, ap_CS_fsm_state4, icmp_ln125_fu_462_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln123_fu_198_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln124_fu_260_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln125_fu_462_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln123_1_fu_192_p2 <= std_logic_vector(unsigned(phi_mul_reg_139) + unsigned(ap_const_lv8_1A));
    add_ln123_fu_186_p2 <= std_logic_vector(unsigned(h_reg_128) + unsigned(ap_const_lv4_1));
    add_ln124_fu_250_p2 <= std_logic_vector(unsigned(w_reg_151) + unsigned(ap_const_lv3_1));
    add_ln125_fu_448_p2 <= std_logic_vector(unsigned(d_reg_162) + unsigned(ap_const_lv4_1));
    add_ln131_2_fu_377_p2 <= std_logic_vector(unsigned(empty_41_reg_854) + unsigned(p_cast9_fu_274_p1));
    add_ln131_3_fu_412_p2 <= std_logic_vector(unsigned(add_ln131_2_fu_377_p2) + unsigned(ap_const_lv9_1));
    add_ln131_fu_313_p2 <= std_logic_vector(unsigned(phi_mul_reg_139) + unsigned(p_cast6_fu_278_p1));
    add_ln136_4_fu_478_p2 <= std_logic_vector(unsigned(sub_ln131_4_reg_877) + unsigned(zext_ln125_2_fu_458_p1));
    add_ln136_5_fu_483_p2 <= std_logic_vector(unsigned(sub_ln131_5_reg_882) + unsigned(zext_ln125_2_fu_458_p1));
    add_ln136_6_fu_488_p2 <= std_logic_vector(unsigned(sub_ln131_6_reg_887) + unsigned(zext_ln125_2_fu_458_p1));
    add_ln136_fu_468_p2 <= std_logic_vector(unsigned(sub_ln131_reg_872) + unsigned(zext_ln125_2_fu_458_p1));
    add_ln146_fu_493_p2 <= std_logic_vector(unsigned(zext_ln125_fu_454_p1) + unsigned(empty_45_reg_867));
    and_ln136_10_fu_724_p2 <= (grp_fu_29505_p_dout0 and and_ln136_9_fu_718_p2);
    and_ln136_11_fu_812_p2 <= (or_ln136_12_fu_806_p2 and or_ln136_11_fu_788_p2);
    and_ln136_12_fu_818_p2 <= (grp_fu_29505_p_dout0 and and_ln136_11_fu_812_p2);
    and_ln136_7_fu_624_p2 <= (or_ln136_8_fu_618_p2 and or_ln136_7_fu_600_p2);
    and_ln136_8_fu_630_p2 <= (grp_fu_29505_p_dout0 and and_ln136_7_fu_624_p2);
    and_ln136_9_fu_718_p2 <= (or_ln136_9_fu_694_p2 and or_ln136_10_fu_712_p2);
    and_ln136_fu_538_p2 <= (or_ln136_fu_532_p2 and grp_fu_29505_p_dout0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln123_fu_198_p2)
    begin
        if ((((icmp_ln123_fu_198_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln123_fu_198_p2)
    begin
        if (((icmp_ln123_fu_198_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln136_10_fu_664_p1 <= reg_180;
    bitcast_ln136_11_fu_741_p1 <= select_ln136_5_reg_949;
    bitcast_ln136_12_fu_758_p1 <= reg_180;
    bitcast_ln136_7_fu_553_p1 <= select_ln136_reg_930;
    bitcast_ln136_8_fu_570_p1 <= reg_180;
    bitcast_ln136_9_fu_647_p1 <= select_ln136_4_reg_937;
    bitcast_ln136_fu_502_p1 <= reg_180;
    empty_39_fu_228_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_224_p1) - unsigned(p_cast_fu_212_p1));
    empty_40_fu_234_p2 <= (tmp_21_fu_204_p3 or ap_const_lv5_1);
    empty_41_fu_244_p0 <= empty_41_fu_244_p00(5 - 1 downto 0);
    empty_41_fu_244_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_40_fu_234_p2),9));
    empty_41_fu_244_p1 <= ap_const_lv9_D(5 - 1 downto 0);
    empty_43_fu_282_p2 <= std_logic_vector(unsigned(zext_ln124_fu_256_p1) + unsigned(empty_39_reg_849));
    empty_44_fu_287_p1 <= empty_43_fu_282_p2(6 - 1 downto 0);
    empty_45_fu_307_p2 <= std_logic_vector(unsigned(p_shl2_fu_291_p3) - unsigned(p_shl3_fu_299_p3));
    grp_fu_173_ce <= ap_const_logic_1;

    grp_fu_173_opcode_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_173_opcode <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_173_opcode <= ap_const_lv5_4;
        else 
            grp_fu_173_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_173_p0_assign_proc : process(layer_2_output_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, select_ln136_fu_544_p3, select_ln136_4_reg_937, select_ln136_5_reg_949)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_173_p0 <= select_ln136_5_reg_949;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_173_p0 <= select_ln136_4_reg_937;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_173_p0 <= select_ln136_fu_544_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_173_p0 <= layer_2_output_q0;
        else 
            grp_fu_173_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_173_p1_assign_proc : process(layer_2_output_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_173_p1 <= layer_2_output_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_173_p1 <= ap_const_lv32_FF7FFFFF;
        else 
            grp_fu_173_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_173_p2 <= grp_fu_29505_p_dout0;
    grp_fu_29505_p_ce <= ap_const_logic_1;
    grp_fu_29505_p_din0 <= grp_fu_173_p0;
    grp_fu_29505_p_din1 <= grp_fu_173_p1;
    grp_fu_29505_p_opcode <= grp_fu_173_opcode;
    icmp_ln123_fu_198_p2 <= "1" when (h_reg_128 = ap_const_lv4_A) else "0";
    icmp_ln124_fu_260_p2 <= "1" when (w_reg_151 = ap_const_lv3_6) else "0";
    icmp_ln125_fu_462_p2 <= "1" when (d_reg_162 = ap_const_lv4_C) else "0";
    icmp_ln136_14_fu_526_p2 <= "1" when (trunc_ln136_fu_516_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_15_fu_588_p2 <= "0" when (tmp_12_fu_556_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_16_fu_594_p2 <= "1" when (trunc_ln136_7_fu_566_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_17_fu_606_p2 <= "0" when (tmp_13_fu_574_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_18_fu_612_p2 <= "1" when (trunc_ln136_8_fu_584_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_19_fu_682_p2 <= "0" when (tmp_15_fu_650_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_20_fu_688_p2 <= "1" when (trunc_ln136_9_fu_660_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_21_fu_700_p2 <= "0" when (tmp_16_fu_668_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_22_fu_706_p2 <= "1" when (trunc_ln136_10_fu_678_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_23_fu_776_p2 <= "0" when (tmp_18_fu_744_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_24_fu_782_p2 <= "1" when (trunc_ln136_11_fu_754_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_25_fu_794_p2 <= "0" when (tmp_19_fu_762_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_26_fu_800_p2 <= "1" when (trunc_ln136_12_fu_772_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_fu_520_p2 <= "0" when (tmp_fu_506_p4 = ap_const_lv8_FF) else "1";

    layer_2_output_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9, zext_ln136_fu_473_p1, zext_ln136_4_fu_498_p1, zext_ln136_5_fu_643_p1, zext_ln136_6_fu_737_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            layer_2_output_address0 <= zext_ln136_6_fu_737_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            layer_2_output_address0 <= zext_ln136_5_fu_643_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_2_output_address0 <= zext_ln136_4_fu_498_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            layer_2_output_address0 <= zext_ln136_fu_473_p1(12 - 1 downto 0);
        else 
            layer_2_output_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    layer_2_output_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            layer_2_output_ce0 <= ap_const_logic_1;
        else 
            layer_2_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_3_output_address0 <= zext_ln146_fu_832_p1(10 - 1 downto 0);

    layer_3_output_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            layer_3_output_ce0 <= ap_const_logic_1;
        else 
            layer_3_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_3_output_d0 <= 
        select_ln136_5_reg_949 when (and_ln136_12_fu_818_p2(0) = '1') else 
        reg_180;

    layer_3_output_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            layer_3_output_we0 <= ap_const_logic_1;
        else 
            layer_3_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln131_fu_345_p2 <= (ap_const_lv8_1 or add_ln131_fu_313_p2);
    or_ln136_10_fu_712_p2 <= (icmp_ln136_22_fu_706_p2 or icmp_ln136_21_fu_700_p2);
    or_ln136_11_fu_788_p2 <= (icmp_ln136_24_fu_782_p2 or icmp_ln136_23_fu_776_p2);
    or_ln136_12_fu_806_p2 <= (icmp_ln136_26_fu_800_p2 or icmp_ln136_25_fu_794_p2);
    or_ln136_7_fu_600_p2 <= (icmp_ln136_16_fu_594_p2 or icmp_ln136_15_fu_588_p2);
    or_ln136_8_fu_618_p2 <= (icmp_ln136_18_fu_612_p2 or icmp_ln136_17_fu_606_p2);
    or_ln136_9_fu_694_p2 <= (icmp_ln136_20_fu_688_p2 or icmp_ln136_19_fu_682_p2);
    or_ln136_fu_532_p2 <= (icmp_ln136_fu_520_p2 or icmp_ln136_14_fu_526_p2);
    p_cast6_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_266_p3),8));
    p_cast9_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_266_p3),9));
    p_cast_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_204_p3),8));
    p_shl2_fu_291_p3 <= (empty_44_fu_287_p1 & ap_const_lv4_0);
    p_shl3_fu_299_p3 <= (empty_43_fu_282_p2 & ap_const_lv2_0);
    p_shl_cast_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_216_p3),8));
    p_shl_fu_216_p3 <= (h_reg_128 & ap_const_lv3_0);
    select_ln136_4_fu_636_p3 <= 
        select_ln136_reg_930 when (and_ln136_8_fu_630_p2(0) = '1') else 
        reg_180;
    select_ln136_5_fu_730_p3 <= 
        select_ln136_4_reg_937 when (and_ln136_10_fu_724_p2(0) = '1') else 
        reg_180;
    select_ln136_fu_544_p3 <= 
        ap_const_lv32_FF7FFFFF when (and_ln136_fu_538_p2(0) = '1') else 
        reg_180;
    shl_ln131_1_fu_386_p3 <= (trunc_ln131_fu_382_p1 & ap_const_lv4_0);
    shl_ln131_2_fu_394_p3 <= (add_ln131_2_fu_377_p2 & ap_const_lv2_0);
    shl_ln131_3_fu_422_p3 <= (trunc_ln131_4_fu_418_p1 & ap_const_lv4_0);
    shl_ln131_4_fu_430_p3 <= (add_ln131_3_fu_412_p2 & ap_const_lv2_0);
    shl_ln131_8_fu_327_p3 <= (add_ln131_fu_313_p2 & ap_const_lv2_0);
    shl_ln131_9_fu_351_p3 <= (or_ln131_fu_345_p2 & ap_const_lv4_0);
    shl_ln131_s_fu_359_p3 <= (or_ln131_fu_345_p2 & ap_const_lv2_0);
    shl_ln_fu_319_p3 <= (add_ln131_fu_313_p2 & ap_const_lv4_0);
    sub_ln131_4_fu_371_p2 <= std_logic_vector(unsigned(shl_ln131_9_fu_351_p3) - unsigned(zext_ln131_1_fu_367_p1));
    sub_ln131_5_fu_406_p2 <= std_logic_vector(unsigned(shl_ln131_1_fu_386_p3) - unsigned(zext_ln131_2_fu_402_p1));
    sub_ln131_6_fu_442_p2 <= std_logic_vector(unsigned(shl_ln131_3_fu_422_p3) - unsigned(zext_ln131_3_fu_438_p1));
    sub_ln131_fu_339_p2 <= std_logic_vector(unsigned(shl_ln_fu_319_p3) - unsigned(zext_ln131_fu_335_p1));
    tmp_12_fu_556_p4 <= bitcast_ln136_7_fu_553_p1(30 downto 23);
    tmp_13_fu_574_p4 <= bitcast_ln136_8_fu_570_p1(30 downto 23);
    tmp_15_fu_650_p4 <= bitcast_ln136_9_fu_647_p1(30 downto 23);
    tmp_16_fu_668_p4 <= bitcast_ln136_10_fu_664_p1(30 downto 23);
    tmp_18_fu_744_p4 <= bitcast_ln136_11_fu_741_p1(30 downto 23);
    tmp_19_fu_762_p4 <= bitcast_ln136_12_fu_758_p1(30 downto 23);
    tmp_21_fu_204_p3 <= (h_reg_128 & ap_const_lv1_0);
    tmp_22_fu_266_p3 <= (w_reg_151 & ap_const_lv1_0);
    tmp_fu_506_p4 <= bitcast_ln136_fu_502_p1(30 downto 23);
    trunc_ln131_4_fu_418_p1 <= add_ln131_3_fu_412_p2(8 - 1 downto 0);
    trunc_ln131_fu_382_p1 <= add_ln131_2_fu_377_p2(8 - 1 downto 0);
    trunc_ln136_10_fu_678_p1 <= bitcast_ln136_10_fu_664_p1(23 - 1 downto 0);
    trunc_ln136_11_fu_754_p1 <= bitcast_ln136_11_fu_741_p1(23 - 1 downto 0);
    trunc_ln136_12_fu_772_p1 <= bitcast_ln136_12_fu_758_p1(23 - 1 downto 0);
    trunc_ln136_7_fu_566_p1 <= bitcast_ln136_7_fu_553_p1(23 - 1 downto 0);
    trunc_ln136_8_fu_584_p1 <= bitcast_ln136_8_fu_570_p1(23 - 1 downto 0);
    trunc_ln136_9_fu_660_p1 <= bitcast_ln136_9_fu_647_p1(23 - 1 downto 0);
    trunc_ln136_fu_516_p1 <= bitcast_ln136_fu_502_p1(23 - 1 downto 0);
    zext_ln124_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_151),8));
    zext_ln125_2_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_reg_162),12));
    zext_ln125_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_reg_162),10));
    zext_ln131_1_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln131_s_fu_359_p3),12));
    zext_ln131_2_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln131_2_fu_394_p3),12));
    zext_ln131_3_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln131_4_fu_430_p3),12));
    zext_ln131_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln131_8_fu_327_p3),12));
    zext_ln136_4_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_4_reg_905),64));
    zext_ln136_5_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_5_reg_910),64));
    zext_ln136_6_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_6_reg_915),64));
    zext_ln136_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_fu_468_p2),64));
    zext_ln146_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln146_reg_920),64));
end behav;
